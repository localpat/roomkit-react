"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/tsup@8.3.0_@swc+core@1.7.28_jiti@1.21.6_postcss@8.4.47_typescript@5.6.2/node_modules/tsup/assets/cjs_shims.js
var init_cjs_shims = __esm({
  "node_modules/.pnpm/tsup@8.3.0_@swc+core@1.7.28_jiti@1.21.6_postcss@8.4.47_typescript@5.6.2/node_modules/tsup/assets/cjs_shims.js"() {
    "use strict";
  }
});

// src/Theme/base.config.ts
var import_react, baseConfig, defaultUtils, defaultMedia, defaultThemeMap;
var init_base_config = __esm({
  "src/Theme/base.config.ts"() {
    "use strict";
    init_cjs_shims();
    import_react = require("@stitches/react");
    baseConfig = {
      theme: {
        colors: {
          primary_default: "#2572ED",
          primary_bright: "#538DFF",
          primary_dim: "#002D6D",
          primary_disabled: "#004299",
          on_primary_high: "rgba(245, 249, 255, 0.95)",
          on_primary_medium: "rgba(224, 236, 255, 0.8)",
          on_primary_low: "rgba(194, 208, 229, 0.5)",
          secondary_default: "#444954",
          secondary_bright: "#70778B",
          secondary_dim: "#293042",
          secondary_disabled: "#404759",
          on_secondary_high: "#FFFFFF",
          on_secondary_medium: "#D3D9F0",
          on_secondary_low: "#A4ABC0",
          background_default: "#0B0E15",
          background_dim: "#000000",
          surface_default: "#191B23",
          surface_bright: "#272A31",
          surface_brighter: "#2E3038",
          surface_dim: "#11131A",
          on_surface_high: "#EFF0FA",
          on_surface_medium: "#C5C6D0",
          on_surface_low: "#8F9099",
          border_default: "#1D1F27",
          border_bright: "#272A31",
          alert_success: "#36B37E",
          alert_warning: "#FFAB00",
          alert_error_default: "#C74E5B",
          alert_error_bright: "#FFB2B6",
          alert_error_brighter: "#FFEDEC",
          alert_error_dim: "#270005"
        },
        shadows: {
          sm: "0 0 4px 0 #0000004D",
          md: "0 0 8px 0 #0000004D"
        },
        fonts: {
          sans: "Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif"
        },
        fontSizes: {
          h1: "6rem",
          h2: "3.75rem",
          h3: "3rem",
          h4: "2.125rem",
          h5: "1.5rem",
          h6: "1.25rem",
          tiny: "0.625rem",
          xs: "0.75rem",
          sm: "0.875rem",
          md: "1rem",
          lg: "1.125rem"
        },
        fontWeights: {
          semiBold: 600,
          medium: 500,
          regular: 400
        },
        lineHeights: {
          h1: "5.75rem",
          h2: "3.5rem",
          h3: "3.25rem",
          h4: "2.5rem",
          h5: "2rem",
          h6: "1.5rem",
          tiny: "1rem",
          xs: "1rem",
          sm: "1.25rem",
          md: "1.5rem"
        },
        radii: {
          "0": "0.25rem",
          "1": "0.5rem",
          "2": "0.75rem",
          "3": "1rem",
          "4": "1.5rem",
          round: "100rem"
        },
        space: {
          0: "0rem",
          xs: "0.5rem",
          sm: "0.75rem",
          md: "1rem",
          lg: "1.25rem",
          xl: "2.25rem",
          px: "1px",
          1: "0.125rem",
          2: "0.25rem",
          3: "0.375rem",
          4: "0.5rem",
          5: "0.625rem",
          6: "0.75rem",
          7: "0.875rem",
          8: "1rem",
          9: "1.25rem",
          10: "1.5rem",
          11: "1.75rem",
          12: "2rem",
          13: "2.25rem",
          14: "2.5rem",
          15: "2.75rem",
          16: "3rem",
          17: "3.5rem",
          18: "4rem",
          19: "4.25rem",
          20: "5rem",
          24: "6rem",
          28: "7rem",
          32: "8rem",
          36: "9rem",
          40: "10rem",
          44: "11rem",
          48: "12rem",
          52: "13rem",
          56: "14rem",
          60: "15rem",
          64: "16rem",
          72: "18rem",
          80: "20rem",
          96: "24rem",
          100: "25rem"
        },
        borderWidths: {
          light: "1px",
          normal: "2px",
          bold: "3px",
          extrabold: "4px",
          black: "5px"
        }
      }
    };
    defaultUtils = {
      bg: (value) => ({
        backgroundColor: value
      }),
      c: (value) => ({
        color: value
      }),
      r: (value) => ({
        borderRadius: value
      }),
      fs: (value) => ({
        fontSize: value
      }),
      size: (value) => ({
        height: value,
        width: value
      }),
      w: (value) => ({
        width: value
      }),
      h: (value) => ({
        height: value
      }),
      p: (value) => ({
        padding: value
      }),
      pt: (value) => ({
        paddingTop: value
      }),
      pr: (value) => ({
        paddingRight: value
      }),
      pb: (value) => ({
        paddingBottom: value
      }),
      pl: (value) => ({
        paddingLeft: value
      }),
      px: (value) => ({
        paddingLeft: value,
        paddingRight: value
      }),
      py: (value) => ({
        paddingTop: value,
        paddingBottom: value
      }),
      m: (value) => ({
        margin: value
      }),
      mt: (value) => ({
        marginTop: value
      }),
      mr: (value) => ({
        marginRight: value
      }),
      mb: (value) => ({
        marginBottom: value
      }),
      ml: (value) => ({
        marginLeft: value
      }),
      mx: (value) => ({
        marginLeft: value,
        marginRight: value
      }),
      my: (value) => ({
        marginTop: value,
        marginBottom: value
      })
    };
    defaultMedia = {
      allowMotion: "(prefers-reduced-motion: no-preference)",
      sm: "(max-width: 640px)",
      md: "(max-width: 768px)",
      lg: "(max-width: 1024px)",
      xl: "(max-width: 1280px)",
      "2xl": "(max-width: 1536px)",
      ls: "(max-width: 1024px) and (orientation: landscape)"
    };
    defaultThemeMap = {
      ...import_react.defaultThemeMap,
      width: "space",
      height: "space",
      minWidth: "space",
      maxWidth: "space",
      minHeight: "space",
      maxHeight: "space",
      flexBasis: "space",
      gridTemplateColumns: "space",
      gridTemplateRows: "space",
      blockSize: "space",
      minBlockSize: "space",
      maxBlockSize: "space",
      inlineSize: "space",
      minInlineSize: "space",
      maxInlineSize: "space"
    };
  }
});

// src/Prebuilt/common/constants.ts
var import_react_sdk, QUERY_PARAM_PREVIEW_AS_ROLE, UI_MODE_GRID, MAX_TOASTS, RTMP_RECORD_RESOLUTION_MIN, RTMP_RECORD_RESOLUTION_MAX, RTMP_RECORD_DEFAULT_RESOLUTION, EMOJI_REACTION_TYPE, CHAT_SELECTOR, APP_DATA, UI_SETTINGS, SIDE_PANE_OPTIONS, SHEET_OPTIONS, POLL_STATE, POLL_VIEWS, CAPTION_TOAST, SUBSCRIBED_NOTIFICATIONS, REMOTE_STOP_SCREENSHARE_TYPE, isChrome, isFirefox, isSafari, isIOS, isMacOS, isAndroid, isIPadOS, QUESTION_TYPE_TITLE, ROLE_CHANGE_DECLINED, DEFAULT_PORTAL_CONTAINER, TEST_AUDIO_URL;
var init_constants = __esm({
  "src/Prebuilt/common/constants.ts"() {
    "use strict";
    init_cjs_shims();
    import_react_sdk = require("@100mslive/react-sdk");
    QUERY_PARAM_PREVIEW_AS_ROLE = "preview_as_role";
    UI_MODE_GRID = "grid";
    MAX_TOASTS = 5;
    RTMP_RECORD_RESOLUTION_MIN = 480;
    RTMP_RECORD_RESOLUTION_MAX = 1280;
    RTMP_RECORD_DEFAULT_RESOLUTION = {
      width: 1280,
      height: 720
    };
    EMOJI_REACTION_TYPE = "EMOJI_REACTION";
    CHAT_SELECTOR = {
      PEER: "peer",
      ROLE: "role",
      EVERYONE: "Everyone"
    };
    APP_DATA = {
      uiSettings: "uiSettings",
      chatOpen: "chatOpen",
      chatSelector: "chatSelector",
      chatDraft: "chatDraft",
      appConfig: "appConfig",
      sidePane: "sidePane",
      hlsStats: "hlsStats",
      subscribedNotifications: "subscribedNotifications",
      logo: "logo",
      hlsStarted: "hlsStarted",
      rtmpStarted: "rtmpStarted",
      recordingStarted: "recordingStarted",
      embedConfig: "embedConfig",
      pinnedTrackId: "pinnedTrackId",
      dropdownList: "dropdownList",
      authToken: "authToken",
      pdfConfig: "pdfConfig",
      minimiseInset: "minimiseInset",
      activeScreensharePeerId: "activeScreensharePeerId",
      disableNotifications: "disableNotifications",
      pollState: "pollState",
      background: "background",
      sheet: "sheet",
      caption: "caption",
      loadingEffects: "loadingEffects",
      noiseCancellation: "noiseCancellation"
    };
    UI_SETTINGS = {
      isAudioOnly: "isAudioOnly",
      maxTileCount: "maxTileCount",
      uiViewMode: "uiViewMode",
      layoutMode: "layoutMode",
      showStatsOnTiles: "showStatsOnTiles",
      enableAmbientMusic: "enableAmbientMusic",
      mirrorLocalVideo: "mirrorLocalVideo"
    };
    SIDE_PANE_OPTIONS = {
      PARTICIPANTS: "Participants",
      CHAT: "Chat",
      STREAMING: "STREAMING",
      POLLS: "POLLS",
      VB: "VB",
      ROOM_DETAILS: "ROOM_DETAILS"
    };
    SHEET_OPTIONS = {
      ROOM_DETAILS: "ROOM_DETAILS"
    };
    POLL_STATE = {
      pollInView: "pollInView",
      view: "view"
    };
    POLL_VIEWS = {
      CREATE_POLL_QUIZ: "CREATE_POLL_QUIZ",
      CREATE_QUESTIONS: "CREATE_QUESTIONS",
      VOTE: "VOTE",
      RESULTS: "RESULTS"
    };
    CAPTION_TOAST = {
      captionToast: "captionToast"
    };
    SUBSCRIBED_NOTIFICATIONS = {
      PEER_JOINED: "PEER_JOINED",
      PEER_LEFT: "PEER_LEFT",
      METADATA_UPDATED: "METADATA_UPDATED",
      NEW_MESSAGE: "NEW_MESSAGE",
      ERROR: "ERROR"
    };
    REMOTE_STOP_SCREENSHARE_TYPE = "REMOTE_STOP_SCREENSHARE";
    isChrome = import_react_sdk.parsedUserAgent.getBrowser()?.name?.toLowerCase() === "chrome";
    isFirefox = import_react_sdk.parsedUserAgent.getBrowser()?.name?.toLowerCase() === "firefox";
    isSafari = import_react_sdk.parsedUserAgent.getBrowser()?.name?.toLowerCase() === "safari";
    isIOS = import_react_sdk.parsedUserAgent.getOS()?.name?.toLowerCase() === "ios";
    isMacOS = import_react_sdk.parsedUserAgent.getOS()?.name?.toLowerCase() === "mac os";
    isAndroid = import_react_sdk.parsedUserAgent.getOS()?.name?.toLowerCase() === "android";
    isIPadOS = false;
    QUESTION_TYPE_TITLE = /* @__PURE__ */ ((QUESTION_TYPE_TITLE2) => {
      QUESTION_TYPE_TITLE2["single-choice"] = "Single Choice";
      QUESTION_TYPE_TITLE2["multiple-choice"] = "Multiple Choice";
      return QUESTION_TYPE_TITLE2;
    })(QUESTION_TYPE_TITLE || {});
    ROLE_CHANGE_DECLINED = "role_change_declined";
    DEFAULT_PORTAL_CONTAINER = ".prebuilt-container";
    TEST_AUDIO_URL = "https://100ms.live/test-audio.wav";
  }
});

// src/Theme/stitches.config.ts
var import_react2, import_lodash, HmsStitches, theme, createThemeBase, styled, globalCss, keyframes, css, getCssText, config, globalStyles, createTheme;
var init_stitches_config = __esm({
  "src/Theme/stitches.config.ts"() {
    "use strict";
    init_cjs_shims();
    import_react2 = require("@stitches/react");
    import_lodash = __toESM(require("lodash.merge"));
    init_base_config();
    init_constants();
    HmsStitches = (0, import_react2.createStitches)({
      prefix: "hms-ui",
      theme: {
        ...baseConfig.theme,
        colors: {
          ...baseConfig.theme.colors
        }
      },
      media: defaultMedia,
      utils: defaultUtils,
      themeMap: defaultThemeMap
    });
    ({
      theme,
      createTheme: createThemeBase,
      styled,
      globalCss,
      keyframes,
      css,
      getCssText,
      config
    } = HmsStitches);
    globalStyles = globalCss({
      [`${DEFAULT_PORTAL_CONTAINER} *`]: {
        fontFamily: "$sans",
        boxSizing: "border-box"
      },
      "::-webkit-scrollbar-track": {
        WebkitBoxShadow: "inset 0 0 6px rgba(0, 0, 0, 0.3)",
        boxShadow: "inset 0 0 6px rgba(0, 0, 0, 0.3)",
        backgroundColor: "transparent"
      },
      "::-webkit-scrollbar": {
        width: "6px",
        height: "6px",
        backgroundColor: "transparent"
      },
      "::-webkit-scrollbar-thumb": {
        backgroundColor: "#657080",
        borderRadius: "5px"
      },
      /**
       * needed for safari. Safari
       * adds background color on its own
       * on hls-viewer on fullscreen
       */
      "#hls-viewer-dark:fullscreen": {
        backgroundColor: "black !important"
      },
      "#hls-viewer-light:fullscreen": {
        backgroundColor: "white !important"
      }
    });
    createTheme = ({
      themeType,
      theme: theme2,
      className
    }) => {
      if (!themeType) {
        throw new Error("Theme type is required");
      }
      const mergedTheme = (0, import_lodash.default)(baseConfig.theme, theme2 || {});
      return createThemeBase(className || `${themeType}-theme`, mergedTheme);
    };
  }
});

// src/Theme/useSSR.tsx
var import_react3, isBrowser, useSSR, useSSR_default;
var init_useSSR = __esm({
  "src/Theme/useSSR.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react3 = require("react");
    isBrowser = () => {
      return Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
    };
    useSSR = () => {
      const [browser, setBrowser] = (0, import_react3.useState)(false);
      (0, import_react3.useEffect)(() => {
        setBrowser(isBrowser());
      }, []);
      return {
        isBrowser: browser,
        isServer: !browser
      };
    };
    useSSR_default = useSSR;
  }
});

// src/Theme/ThemeProvider.tsx
var import_react4, defaultAspectRatio, ThemeTypes, defaultContext, ThemeContext, HMSThemeProvider, useTheme;
var init_ThemeProvider = __esm({
  "src/Theme/ThemeProvider.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react4 = __toESM(require("react"));
    init_stitches_config();
    init_useSSR();
    defaultAspectRatio = {
      width: 1,
      height: 1
    };
    ThemeTypes = /* @__PURE__ */ ((ThemeTypes2) => {
      ThemeTypes2["default"] = "default";
      return ThemeTypes2;
    })(ThemeTypes || {});
    defaultContext = {
      themeType: "default" /* default */,
      theme,
      aspectRatio: { width: 1, height: 1 },
      toggleTheme: (_themeToUpdateTo) => {
        return;
      }
    };
    ThemeContext = import_react4.default.createContext(defaultContext);
    HMSThemeProvider = ({
      themeType,
      theme: userTheme,
      aspectRatio = defaultAspectRatio,
      children
    }) => {
      const systemTheme = "default" /* default */;
      const [currentTheme, setCurrentTheme] = (0, import_react4.useState)(themeType || systemTheme);
      const previousClassName = (0, import_react4.useRef)("");
      const { isBrowser: isBrowser2 } = useSSR_default();
      const updatedTheme = (0, import_react4.useMemo)(() => {
        const updatedTheme2 = createTheme({ themeType: currentTheme, theme: userTheme || {} });
        if (!isBrowser2) {
          return updatedTheme2;
        }
        if (previousClassName.current) {
          document.documentElement.classList.remove(previousClassName.current);
        }
        previousClassName.current = updatedTheme2.className;
        document.documentElement.classList.add(updatedTheme2);
        return updatedTheme2;
      }, [userTheme, currentTheme, isBrowser2]);
      const toggleTheme = (0, import_react4.useCallback)((themeToUpdateTo) => {
        if (themeToUpdateTo) {
          setCurrentTheme(themeToUpdateTo);
          return;
        }
        setCurrentTheme("default" /* default */);
      }, []);
      (0, import_react4.useEffect)(() => {
        if (themeType) {
          setCurrentTheme(themeType);
        }
      }, [themeType]);
      return /* @__PURE__ */ import_react4.default.createElement(
        ThemeContext.Provider,
        {
          value: { themeType: currentTheme, theme: updatedTheme, aspectRatio, toggleTheme }
        },
        children
      );
    };
    useTheme = () => import_react4.default.useContext(ThemeContext);
  }
});

// src/Theme/index.tsx
var init_Theme = __esm({
  "src/Theme/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_stitches_config();
    init_ThemeProvider();
  }
});

// src/Layout/Flex.tsx
var gapStyles, Flex;
var init_Flex = __esm({
  "src/Layout/Flex.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    gapStyles = (value) => {
      return {
        "& > * + *": {
          marginRight: "0",
          marginLeft: `${0.25 * value}rem`
        }
      };
    };
    Flex = styled("div", {
      display: "flex",
      variants: {
        justify: {
          start: {
            justifyContent: "flex-start"
          },
          end: {
            justifyContent: "flex-end"
          },
          center: {
            justifyContent: "center"
          },
          between: {
            justifyContent: "space-between"
          },
          around: {
            justifyContent: "space-around"
          },
          evenly: {
            justifyContent: "space-evenly"
          }
        },
        align: {
          start: {
            alignItems: "flex-start"
          },
          end: {
            alignItems: "flex-end"
          },
          center: {
            alignItems: "center"
          },
          baseline: {
            alignItems: "baseline"
          },
          strech: {
            alignItems: "stretch"
          }
        },
        direction: {
          row: {
            flexDirection: "row"
          },
          column: {
            flexDirection: "column"
          },
          rowReverse: {
            flexDirection: "row-reverse"
          },
          columnReverse: {
            flexDirection: "column-reverse"
          }
        },
        gap: {
          1: gapStyles(1),
          2: gapStyles(2),
          3: gapStyles(3),
          4: gapStyles(4)
        }
      }
    });
  }
});

// src/Layout/Box.tsx
var Box;
var init_Box = __esm({
  "src/Layout/Box.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    Box = styled("div", {});
  }
});

// src/Layout/index.tsx
var init_Layout = __esm({
  "src/Layout/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Flex();
    init_Box();
  }
});

// src/Loading/Loading.tsx
var import_react5, Loading;
var init_Loading = __esm({
  "src/Loading/Loading.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react5 = __toESM(require("react"));
    Loading = ({ size = 24, color = "white", ...props }) => /* @__PURE__ */ import_react5.default.createElement("svg", { width: size, height: size, viewBox: "0 0 50 50", fill: color, xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ import_react5.default.createElement("circle", { cx: "25", cy: "25", r: "20", stroke: color, strokeWidth: "4", strokeDasharray: "70 30", fill: "none" }, /* @__PURE__ */ import_react5.default.createElement(
      "animateTransform",
      {
        attributeName: "transform",
        attributeType: "XML",
        type: "rotate",
        from: "0 25 25",
        to: "360 25 25",
        dur: "1s",
        repeatCount: "indefinite"
      }
    )));
  }
});

// src/Loading/index.ts
var init_Loading2 = __esm({
  "src/Loading/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Loading();
  }
});

// src/utils/styles.ts
var flexCenter, textEllipsis;
var init_styles = __esm({
  "src/utils/styles.ts"() {
    "use strict";
    init_cjs_shims();
    flexCenter = {
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    };
    textEllipsis = (width) => ({
      maxWidth: width,
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      minWidth: 0
    });
  }
});

// src/Button/Button.tsx
var import_react6, getOutlinedVariants, getButtonVariants, StyledButton, Button;
var init_Button = __esm({
  "src/Button/Button.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react6 = __toESM(require("react"));
    init_Layout();
    init_Loading2();
    init_Theme();
    init_styles();
    getOutlinedVariants = (base, hover, active, disabled, text, textDisabled) => {
      return {
        bg: "transparent",
        border: `solid $space$px $colors${base}`,
        c: text,
        "&[disabled]": {
          c: textDisabled,
          bg: "transparent",
          border: `solid $space$px $colors${disabled}`,
          cursor: "not-allowed"
        },
        "&:not([disabled]):hover": {
          border: `solid $space$px $colors${hover}`,
          bg: "transparent"
        },
        "&:not([disabled]):active": {
          border: `solid $space$px $colors${active}`,
          bg: "transparent"
        },
        "&:not([disabled]):focus-visible": {
          boxShadow: `0 0 0 3px $colors${base}`
        }
      };
    };
    getButtonVariants = (base, hover, active, disabled, text, textDisabled) => {
      return {
        bg: base,
        border: `1px solid ${base}`,
        c: text,
        "&[disabled]": {
          c: textDisabled,
          cursor: "not-allowed",
          bg: disabled,
          border: `1px solid ${disabled}`
        },
        "&:not([disabled]):hover": {
          bg: hover,
          border: `1px solid ${hover}`
        },
        "&:not([disabled]):active": {
          bg: active,
          border: `1px solid ${active}`
        },
        "&:not([disabled]):focus-visible": {
          boxShadow: `0 0 0 3px ${base}`
        }
      };
    };
    StyledButton = styled("button", {
      ...flexCenter,
      cursor: "pointer",
      fontFamily: "$sans",
      lineHeight: "inherit",
      textTransform: "none",
      position: "relative",
      outline: "none",
      border: "none",
      fs: "$md",
      r: "$1",
      backgroundColor: "$primary_default",
      fontWeight: "500",
      whiteSpace: "nowrap",
      p: "$4 $8",
      "-webkit-appearance": "button",
      "&:focus": {
        outline: "none"
      },
      "&:not([disabled]):focus-visible": {
        boxShadow: "0 0 0 3px $colors$primary_default"
      },
      transition: "all 0.2s  ease",
      compoundVariants: [
        {
          variant: "standard",
          outlined: true,
          css: getOutlinedVariants(
            "$secondary_default",
            "$secondary_bright",
            "$secondary_dim",
            "$secondary_disabled",
            "$on_surface_high",
            "$on_surface_low"
          )
        },
        {
          variant: "danger",
          outlined: true,
          css: getOutlinedVariants(
            "$alert_error_default",
            "$alert_error_bright",
            "$alert_error_dim",
            "$alert_error_brighter",
            "$on_surface_high",
            "$on_surface_low"
          )
        },
        {
          variant: "primary",
          outlined: true,
          css: getOutlinedVariants(
            "$primary_default",
            "$primary_bright",
            "$primary_dim",
            "$primary_disabled",
            "$on_surface_high",
            "$on_surface_low"
          )
        }
      ],
      variants: {
        variant: {
          standard: getButtonVariants(
            "$secondary_default",
            "$secondary_bright",
            "$secondary_dim",
            "$secondary_disabled",
            "$on_secondary_high",
            "$on_secondary_low"
          ),
          danger: getButtonVariants(
            "$alert_error_default",
            "$alert_error_bright",
            "$alert_error_dim",
            "$alert_error_dim",
            "$alert_error_brighter",
            "$on_primary_low"
          ),
          primary: getButtonVariants(
            "$primary_default",
            "$primary_bright",
            "$primary_dim",
            "$primary_disabled",
            "$on_primary_high",
            "$on_primary_low"
          )
        },
        outlined: {
          true: {}
        },
        icon: {
          true: {}
        }
      },
      defaultVariants: {
        variant: "primary"
      }
    });
    Button = import_react6.default.forwardRef(({ children, loading = false, icon, ...buttonProps }, ref) => {
      return /* @__PURE__ */ import_react6.default.createElement(StyledButton, { ...buttonProps, ref }, /* @__PURE__ */ import_react6.default.createElement(import_react6.default.Fragment, null, loading && /* @__PURE__ */ import_react6.default.createElement(
        Flex,
        {
          align: "center",
          justify: "center",
          css: { w: "100%", position: "absolute", left: "0", color: "$on_primary_low" }
        },
        /* @__PURE__ */ import_react6.default.createElement(Loading, { color: "currentColor" })
      ), /* @__PURE__ */ import_react6.default.createElement(
        Flex,
        {
          align: "center",
          justify: "center",
          css: { visibility: loading ? "hidden" : "visible", gap: icon ? "$4" : "0" }
        },
        children
      )));
    });
  }
});

// src/Button/index.tsx
var init_Button2 = __esm({
  "src/Button/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Button();
  }
});

// src/Text/Text.tsx
var textVariants, Text;
var init_Text = __esm({
  "src/Text/Text.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    textVariants = {
      h1: {
        fontWeight: "$semiBold",
        letterSpacing: "-1.5px",
        fontSize: "$h1",
        lineHeight: "$h1",
        "@md": {
          fontSize: "4.5rem",
          lineHeight: "4.75rem"
        }
      },
      h2: {
        fontSize: "$h2",
        lineHeight: "$h2",
        fontWeight: "$semiBold",
        letterSpacing: "-0.5px",
        "@md": {
          fontSize: "3rem",
          lineHeight: "3.25rem"
        }
      },
      h3: {
        fontSize: "$h3",
        lineHeight: "$h3",
        fontWeight: "$semiBold",
        "@md": {
          fontSize: "2.5rem",
          lineHeight: "2.75rem"
        }
      },
      h4: {
        fontSize: "$h4",
        lineHeight: "$h4",
        fontWeight: "$semiBold",
        letterSpacing: "0.25px",
        "@md": {
          fontSize: "1.75rem",
          lineHeight: "2rem"
        }
      },
      h5: {
        fontSize: "$h5",
        lineHeight: "$h5",
        fontWeight: "$semiBold",
        "@md": {
          fontSize: "1.5rem",
          lineHeight: "1.75rem"
        }
      },
      h6: {
        fontSize: "$h6",
        lineHeight: "$h6",
        fontWeight: "$semiBold",
        letterSpacing: "0.15px",
        "@md": {
          fontSize: "1.25rem",
          lineHeight: "1.5rem"
        }
      },
      sub1: {
        fontSize: "$md",
        lineHeight: "$h5",
        fontWeight: "$medium",
        letterSpacing: "0.15px"
      },
      sub2: {
        fontSize: "$sm",
        lineHeight: "$sm",
        fontWeight: "$medium",
        letterSpacing: "0.1px"
      },
      body1: {
        fontSize: "$md",
        lineHeight: "$h6",
        fontWeight: "$medium",
        letterSpacing: "0.1px"
      },
      body2: {
        fontSize: "0.875rem",
        lineHeight: "1.25rem",
        fontWeight: "$medium",
        letterSpacing: "0.25px"
      },
      button: {
        fontSize: "1rem",
        lineHeight: "1.5rem",
        fontWeight: "$semiBold",
        letterSpacing: "0.5px"
      },
      caption: {
        fontSize: "0.75rem",
        lineHeight: "1rem",
        letterSpacing: "0.4px",
        fontWeight: "$regular"
      },
      overline: {
        fontSize: "0.625rem",
        lineHeight: "1rem",
        letterSpacing: "1.5px",
        fontWeight: "$medium"
      },
      tiny: {
        fontSize: "$tiny",
        lineHeight: "$tiny"
      },
      xs: {
        fontSize: "$xs",
        lineHeight: "$xs"
      },
      sm: {
        fontSize: "$sm",
        lineHeight: "$sm"
      },
      md: {
        fontSize: "$md",
        lineHeight: "$md"
      },
      lg: {
        fontSize: "$lg",
        lineHeight: "$md",
        fontWeight: "$semiBold",
        letterSpacing: "0.15px"
      }
    };
    Text = styled("p", {
      fontFamily: "$sans",
      fontWeight: "$regular",
      margin: 0,
      color: "$on_surface_high",
      variants: {
        variant: textVariants,
        color: {
          white: {
            color: "$on_surface_high"
          }
        },
        inline: {
          true: {
            display: "inline"
          }
        }
      },
      defaultVariants: {
        variant: "md"
      }
    });
  }
});

// src/Text/index.tsx
var init_Text2 = __esm({
  "src/Text/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Text();
  }
});

// src/IconButton/IconButton.tsx
var IconButton;
var init_IconButton = __esm({
  "src/IconButton/IconButton.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    init_styles();
    IconButton = styled("button", {
      ...flexCenter,
      alignItems: "center",
      outline: "none",
      border: "none",
      padding: "$2",
      r: "$0",
      cursor: "pointer",
      backgroundColor: "transparent",
      color: "$on_surface_high",
      "&:not([disabled]):focus-visible": {
        boxShadow: "0 0 0 3px $colors$primary_default"
      },
      "&:not([disabled]):focus": {
        outline: "none"
      },
      "@media (hover: hover)": {
        "&:not([disabled]):hover": {
          backgroundColor: "$on_surface_low"
        }
      },
      "&[disabled]": {
        opacity: 0.5,
        cursor: "not-allowed",
        backgroundColor: "$secondary_dim",
        color: "$on_primary_high"
      },
      "&:focus": {
        outline: "none"
      },
      variants: {
        active: {
          true: {
            "&:not([disabled]):hover": {
              backgroundColor: "$on_surface_low"
            }
          }
        }
      }
    });
  }
});

// src/IconButton/index.tsx
var init_IconButton2 = __esm({
  "src/IconButton/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_IconButton();
  }
});

// src/Avatar/getAvatarBg.ts
var getInitials, getAvatarBg, colorsList;
var init_getAvatarBg = __esm({
  "src/Avatar/getAvatarBg.ts"() {
    "use strict";
    init_cjs_shims();
    getInitials = (name) => {
      if (!name) {
        return void 0;
      } else {
        return name.trim().replace(/[^a-zA-Z0-9]/g, "").match(/(^\S\S?|\b\S)?/g)?.join("")?.match(/(^\S|\S$)?/g)?.join("").toUpperCase();
      }
    };
    getAvatarBg = (name) => {
      const initials = getInitials(name);
      const indexFactor = 20;
      const colorIndex = (initials?.codePointAt(0) || 0) % indexFactor + 1;
      return { initials: initials || "", color: colorsList[colorIndex - 1] };
    };
    colorsList = [
      "#616161",
      "#F44336",
      "#3F51B5",
      "#4CAF50",
      "#FFA000",
      "#795548",
      "#E91E63",
      "#2F80FF",
      "#8BC34A",
      "#F57C00",
      "#4E342E",
      "#9C27B0",
      "#00BCD4",
      "#C0CA33",
      "#F4511E",
      "#673AB7",
      "#009688",
      "#FBC02D",
      "#BF360C",
      "#455A64"
    ];
  }
});

// src/Avatar/Avatar.tsx
var import_react7, import_react_icons, getAvatarShape, StyledAvatar, Avatar;
var init_Avatar = __esm({
  "src/Avatar/Avatar.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react7 = __toESM(require("react"));
    import_react_icons = require("@100mslive/react-icons");
    init_Theme();
    init_getAvatarBg();
    init_styles();
    getAvatarShape = (radii) => ({
      borderRadius: radii
    });
    StyledAvatar = styled("div", {
      ...flexCenter,
      color: "$colors$on_primary_high",
      fontFamily: "$sans",
      aspectRatio: 1,
      fontWeight: 600,
      fontSize: "$space$9",
      variants: {
        shape: {
          circle: getAvatarShape("$round"),
          square: getAvatarShape("$1")
        },
        size: {
          small: {
            height: "$16 !important",
            fontSize: "$space$6"
          },
          medium: {
            height: "$18 !important",
            fontSize: "$space$10"
          },
          large: {
            height: "$20 !important",
            fontSize: "$space$12"
          }
        }
      },
      defaultVariants: {
        shape: "circle"
      }
    });
    Avatar = ({ name, css: css2, ...props }) => {
      const info = getAvatarBg(name);
      let { color } = info;
      if (!name) {
        color = "#7E47EB";
      }
      return /* @__PURE__ */ import_react7.default.createElement(StyledAvatar, { css: { bg: color, ...css2 }, ...props }, info.initials || /* @__PURE__ */ import_react7.default.createElement(import_react_icons.PersonIcon, { height: 40, width: 40 }));
    };
  }
});

// src/Avatar/index.ts
var init_Avatar2 = __esm({
  "src/Avatar/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Avatar();
  }
});

// src/Divider/Divider.tsx
var getVerticalSpace, getHorizontalSpace, VerticalDivider, HorizontalDivider;
var init_Divider = __esm({
  "src/Divider/Divider.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    getVerticalSpace = (space) => ({
      marginLeft: space,
      marginRight: space
    });
    getHorizontalSpace = (space) => ({
      marginTop: space,
      marginBottom: space
    });
    VerticalDivider = styled("span", {
      height: "25px",
      width: "1px",
      backgroundColor: "$border_bright",
      variants: {
        space: {
          1: getVerticalSpace("$1"),
          2: getVerticalSpace("$2"),
          3: getVerticalSpace("$3"),
          4: getVerticalSpace("$4")
        }
      },
      defaultVariants: {
        space: 1
      }
    });
    HorizontalDivider = styled("span", {
      height: "1px",
      width: "100%",
      display: "block",
      backgroundColor: "$border_bright",
      variants: {
        space: {
          1: getHorizontalSpace("$1"),
          2: getHorizontalSpace("$2"),
          3: getHorizontalSpace("$3"),
          4: getHorizontalSpace("$4")
        }
      },
      defaultVariants: {
        space: 1
      }
    });
  }
});

// src/Divider/index.ts
var init_Divider2 = __esm({
  "src/Divider/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Divider();
  }
});

// src/Switch/Switch.tsx
var import_react8, BaseSwitch, SwitchRoot, SwitchThumb, Switch;
var init_Switch = __esm({
  "src/Switch/Switch.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react8 = __toESM(require("react"));
    BaseSwitch = __toESM(require("@radix-ui/react-switch"));
    init_Theme();
    SwitchRoot = styled(BaseSwitch.Root, {
      all: "unset",
      width: "30px",
      height: "14px",
      border: "solid $space$px $secondary_default",
      borderRadius: "$3",
      p: "$2",
      position: "relative",
      cursor: "pointer",
      '&[data-state="checked"]': {
        backgroundColor: "$primary_default",
        border: "solid $space$px $primary_default"
      },
      "&:focus": {
        outline: "none"
      },
      "&[disabled]": {
        opacity: 0.5,
        cursor: "not-allowed"
      }
    });
    SwitchThumb = styled(BaseSwitch.Thumb, {
      display: "block",
      top: "3px",
      position: "absolute",
      width: "$md",
      height: "$md",
      backgroundColor: "$secondary_default",
      borderRadius: "$round",
      transition: "right 500ms ease-in",
      left: "$2",
      '&[data-state="checked"]': {
        left: "unset",
        right: "$2",
        backgroundColor: "$on_primary_high"
      }
    });
    Switch = (props) => /* @__PURE__ */ import_react8.default.createElement(SwitchRoot, { ...props }, /* @__PURE__ */ import_react8.default.createElement(SwitchThumb, null));
    Switch.displayName = "Switch";
  }
});

// src/Switch/index.ts
var init_Switch2 = __esm({
  "src/Switch/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Switch();
  }
});

// src/utils/animations.ts
var slideDown, slideUp, translateAcross, dialogOpen, dialogClose, slideUpAndFade, slideRightAndFade, sheetSlideIn, sheetSlideOut, sheetFadeIn, sheetFadeOut, slideDownAndFade, slideLeftAndFade, slideLeftAndFadeOut, popoverAnimation, toastAnimation;
var init_animations = __esm({
  "src/utils/animations.ts"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    slideDown = (controller) => keyframes({
      from: { height: 0 },
      to: { height: `var(${controller})` }
    });
    slideUp = (controller) => keyframes({
      from: { height: `var(${controller})` },
      to: { height: 0 }
    });
    translateAcross = ({ xFrom = "0", yFrom = "0", zFrom = "0", xTo = "0", yTo = "0", zTo = "0" }) => keyframes({
      from: { transform: `translate3d(${xFrom}, ${yFrom}, ${zFrom})` },
      to: { transform: `translate3d(${xTo}, ${yTo}, ${zTo}` }
    });
    dialogOpen = keyframes({
      "0%": { opacity: 0, transform: "translate(-50%, -48%) scale(.90)" },
      "100%": { opacity: 1, transform: "translate(-50%, -50%) scale(1)" }
    });
    dialogClose = keyframes({
      "0%": { opacity: 1, transform: "translate(-50%, -50%) scale(1)" },
      "100%": { opacity: 0, transform: "translate(-50%, -48%) scale(.90)" }
    });
    slideUpAndFade = (start = "2px") => keyframes({
      "0%": { opacity: 0, transform: `translateY(${start})` },
      "100%": { opacity: 1, transform: "translateY(0)" }
    });
    slideRightAndFade = (start = "-2px") => keyframes({
      "0%": { opacity: 0, transform: `translateX(${start})` },
      "100%": { opacity: 1, transform: "translateX(0)" }
    });
    sheetSlideIn = keyframes({
      from: { transform: "$$transformValue" },
      to: { transform: "translate3d(0,0,0)" }
    });
    sheetSlideOut = keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "$$transformValue" }
    });
    sheetFadeIn = keyframes({
      from: { opacity: "0" },
      to: { opacity: "1" }
    });
    sheetFadeOut = keyframes({
      from: { opacity: "1" },
      to: { opacity: "0" }
    });
    slideDownAndFade = (start = "-2px") => keyframes({
      "0%": { opacity: 0, transform: `translateY(${start})` },
      "100%": { opacity: 1, transform: "translateY(0)" }
    });
    slideLeftAndFade = (start = "2px") => keyframes({
      "0%": { opacity: 0, transform: `translateX(${start})` },
      "100%": { opacity: 1, transform: "translateX(0)" }
    });
    slideLeftAndFadeOut = (end = "-100%") => keyframes({
      "0%": { opacity: 1, transform: `translateX(0)` },
      "100%": { opacity: 0, transform: `translateX(${end})` }
    });
    popoverAnimation = {
      "@media (prefers-reduced-motion: no-preference)": {
        animationDuration: "400ms",
        animationTimingFunction: "cubic-bezier(0.16, 1, 0.3, 1)",
        willChange: "transform, opacity",
        '&[data-state="open"]': {
          '&[data-side="top"]': { animationName: slideDownAndFade() },
          '&[data-side="right"]': { animationName: slideLeftAndFade() },
          '&[data-side="bottom"]': { animationName: slideUpAndFade() },
          '&[data-side="left"]': { animationName: slideRightAndFade() }
        }
      }
    };
    toastAnimation = {
      "@media (prefers-reduced-motion: no-preference)": {
        animationDuration: "500ms",
        animationTimingFunction: "cubic-bezier(0.16, 1, 0.3, 1)",
        willChange: "transform, opacity",
        animationName: slideLeftAndFadeOut(),
        '&[data-state="open"]': {
          animationName: slideRightAndFade("-100%")
        },
        '&[data-swipe="move"]': {
          transform: "translateX(var(--radix-toast-swipe-move-x))"
        },
        '&[data-swipe="cancel"]': {
          transform: "translateX(0)",
          transition: "transform 200ms ease-out"
        },
        '&[data-swipe="end"]': {
          animation: `${slideLeftAndFadeOut()} 100ms ease-out forwards`
        }
      }
    };
  }
});

// src/utils/index.ts
var init_utils = __esm({
  "src/utils/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_animations();
    init_styles();
  }
});

// src/Tooltip/Tooltip.tsx
var import_react9, BaseTooltip, TooltipBox, TooltipTrigger, TooltipRoot, Tooltip;
var init_Tooltip = __esm({
  "src/Tooltip/Tooltip.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react9 = __toESM(require("react"));
    BaseTooltip = __toESM(require("@radix-ui/react-tooltip"));
    init_Theme();
    init_utils();
    TooltipBox = styled(BaseTooltip.Content, {
      fontFamily: "$sans",
      borderRadius: "$2",
      padding: "$2 $4",
      fontSize: "$xs",
      zIndex: 11,
      color: "$on_surface_high",
      backgroundColor: "$surface_bright",
      "@media (prefers-reduced-motion: no-preference)": {
        animationDuration: "400ms",
        animationTimingFunction: "cubic-bezier(0.16, 1, 0.3, 1)",
        willChange: "transform, opacity",
        '&[data-state="delayed-open"]': {
          '&[data-side="top"]': { animationName: slideDownAndFade() },
          '&[data-side="right"]': { animationName: slideLeftAndFade() },
          '&[data-side="bottom"]': { animationName: slideUpAndFade() },
          '&[data-side="left"]': { animationName: slideRightAndFade() }
        }
      },
      variants: {
        outlined: {
          true: {
            backgroundColor: "$background_dim",
            border: "solid $space$px $border_bright"
          }
        }
      }
    });
    TooltipTrigger = styled(BaseTooltip.Trigger, {
      fontFamily: "$sans"
    });
    TooltipRoot = BaseTooltip.Root;
    Tooltip = ({
      children,
      title,
      triggerCss,
      boxCss,
      outlined = true,
      side = "bottom",
      align = "center",
      disabled = false,
      delayDuration = 200
    }) => {
      const [open, setOpen] = (0, import_react9.useState)(false);
      return /* @__PURE__ */ import_react9.default.createElement(BaseTooltip.Provider, null, /* @__PURE__ */ import_react9.default.createElement(TooltipRoot, { delayDuration, open: open && !disabled, onOpenChange: setOpen }, /* @__PURE__ */ import_react9.default.createElement(TooltipTrigger, { css: { ...triggerCss }, asChild: true }, children), /* @__PURE__ */ import_react9.default.createElement(TooltipBox, { sideOffset: 10, side, align, outlined, css: { ...boxCss } }, title)));
    };
  }
});

// src/Tooltip/index.ts
var init_Tooltip2 = __esm({
  "src/Tooltip/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Tooltip();
  }
});

// src/Select/Select.tsx
var import_react10, import_react_icons2, Root3, SelectRoot, Arrow, DefaultDownIcon, Select;
var init_Select = __esm({
  "src/Select/Select.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react10 = __toESM(require("react"));
    import_react_icons2 = require("@100mslive/react-icons");
    init_Theme();
    Root3 = styled("div", {
      color: "$on_primary_high",
      display: "inline-flex",
      position: "relative",
      outline: "none",
      overflow: "hidden",
      borderRadius: "$1",
      backgroundColor: "$surface_default",
      maxWidth: "100%"
    });
    SelectRoot = styled("select", {
      h: "$16",
      fontSize: "$md",
      fontWeight: "500",
      lineHeight: "inherit",
      textTransform: "none",
      appearance: "none",
      color: "$on_secondary_high",
      padding: "5px",
      paddingLeft: "12px",
      paddingRight: "30px",
      border: "none",
      borderRadius: "8px",
      backgroundColor: "$secondary_default",
      "&:not([disabled]):focus-visible": {
        boxShadow: "0 0 0 3px $colors$primary_default"
      },
      "&[disabled]": {
        opacity: 0.5,
        cursor: "not-allowed"
      }
    });
    Arrow = styled("span", {
      color: "$on_secondary_high",
      width: "30px",
      height: "100%",
      position: "absolute",
      right: 0,
      pointerEvents: "none",
      display: "flex",
      alignItems: "center",
      transition: "border .2s ease 0s"
    });
    DefaultDownIcon = ({ ...props }) => /* @__PURE__ */ import_react10.default.createElement(Arrow, { ...props }, /* @__PURE__ */ import_react10.default.createElement(import_react_icons2.ChevronDownIcon, null));
    Select = {
      Root: Root3,
      DownIcon: Arrow,
      DefaultDownIcon,
      Select: SelectRoot
    };
  }
});

// src/Select/index.ts
var init_Select2 = __esm({
  "src/Select/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Select();
  }
});

// src/Slider/Slider.tsx
var import_react11, BaseSlider, Root5, Track2, Range2, Thumb3, Slider;
var init_Slider = __esm({
  "src/Slider/Slider.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react11 = __toESM(require("react"));
    BaseSlider = __toESM(require("@radix-ui/react-slider"));
    init_Theme();
    init_Tooltip2();
    Root5 = styled(BaseSlider.Root, {
      position: "relative",
      display: "flex",
      alignItems: "center",
      userSelect: "none",
      touchAction: "none",
      width: "100%",
      '&[data-orientation="horizontal"]': {
        height: 20
      }
    });
    Track2 = styled(BaseSlider.Track, {
      backgroundColor: "$surface_bright",
      position: "relative",
      flexGrow: 1,
      borderRadius: "$round",
      cursor: "pointer",
      '&[data-orientation="horizontal"]': { height: 3 }
    });
    Range2 = styled(BaseSlider.Range, {
      position: "absolute",
      backgroundColor: "$primary_default",
      borderRadius: "$round",
      height: "100%"
    });
    Thumb3 = styled(BaseSlider.Thumb, {
      all: "unset",
      display: "block",
      width: "$8",
      height: "$8",
      backgroundColor: "$primary_default",
      cursor: "pointer",
      boxShadow: `0 2px 10px $colors$surface_default`,
      borderRadius: 10,
      "&:hover": { backgroundColor: "$primary_default" },
      "&:focus": { boxShadow: "none" }
    });
    Slider = ({
      showTooltip = true,
      thumbStyles,
      ...props
    }) => /* @__PURE__ */ import_react11.default.createElement(Root5, { ...props }, /* @__PURE__ */ import_react11.default.createElement(Track2, null, /* @__PURE__ */ import_react11.default.createElement(Range2, null)), showTooltip ? /* @__PURE__ */ import_react11.default.createElement(Tooltip, { title: String(props.value?.[0]) }, /* @__PURE__ */ import_react11.default.createElement(Thumb3, { css: thumbStyles })) : /* @__PURE__ */ import_react11.default.createElement(Thumb3, { css: thumbStyles }));
  }
});

// src/Slider/index.ts
var init_Slider2 = __esm({
  "src/Slider/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Slider();
  }
});

// src/Modal/DialogContent.tsx
var import_react12, DialogPrimitive, import_react_icons3, DialogClose, StyledDialogTrigger, CustomDialogOverlay, StyledDialogPortal, CustomDialogContent, DialogTitle, DialogDescription, DialogDefaultCloseIcon;
var init_DialogContent = __esm({
  "src/Modal/DialogContent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react12 = __toESM(require("react"));
    DialogPrimitive = __toESM(require("@radix-ui/react-dialog"));
    import_react_icons3 = require("@100mslive/react-icons");
    init_IconButton2();
    init_Theme();
    init_animations();
    DialogClose = styled(DialogPrimitive.Close, {
      backgroundColor: "transparent",
      padding: "0",
      margin: "0",
      border: "none",
      backgroundImage: "none"
    });
    StyledDialogTrigger = styled(DialogPrimitive.Trigger, {
      appearance: "none !important"
      // Needed for safari it shows white overlay
    });
    CustomDialogOverlay = styled(DialogPrimitive.Overlay, {
      backgroundColor: "rgba(0, 0, 0, 0.5);",
      position: "absolute",
      inset: 0
    });
    StyledDialogPortal = styled(DialogPrimitive.Portal, {});
    CustomDialogContent = styled(DialogPrimitive.Content, {
      color: "$on_surface_medium",
      backgroundColor: "$surface_dim",
      borderRadius: "8px",
      position: "absolute",
      top: "50%",
      left: "50%",
      maxHeight: "95%",
      overflowY: "auto",
      border: "$space$px solid $border_bright",
      boxShadow: "0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)",
      transform: "translate(-50%, -50%)",
      zIndex: 999,
      padding: "$12",
      "@allowMotion": {
        '&[data-state="open"]': {
          animation: `${dialogOpen} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
        },
        '&[data-state="closed"]': {
          animation: `${dialogClose} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
        }
      },
      "&:focus": { outline: "none" }
    });
    DialogTitle = styled(DialogPrimitive.Title, {
      margin: 0
    });
    DialogDescription = styled(DialogPrimitive.Description, {});
    DialogDefaultCloseIcon = (props) => /* @__PURE__ */ import_react12.default.createElement(DialogClose, { asChild: true }, /* @__PURE__ */ import_react12.default.createElement(IconButton, { ...props }, /* @__PURE__ */ import_react12.default.createElement(import_react_icons3.CrossIcon, null)));
  }
});

// src/context/DialogContext.tsx
function DialogContainerProvider({
  children,
  dialogContainerSelector
}) {
  return /* @__PURE__ */ import_react13.default.createElement(DialogContainerContext.Provider, { value: dialogContainerSelector }, children);
}
var import_react13, DialogContainerContext;
var init_DialogContext = __esm({
  "src/context/DialogContext.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react13 = __toESM(require("react"));
    DialogContainerContext = (0, import_react13.createContext)("");
  }
});

// src/hooks/useDialogContainerSelector.tsx
function useDialogContainerSelector() {
  const dialogContainerSelector = (0, import_react14.useContext)(DialogContainerContext);
  return dialogContainerSelector;
}
var import_react14;
var init_useDialogContainerSelector = __esm({
  "src/hooks/useDialogContainerSelector.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react14 = require("react");
    init_DialogContext();
  }
});

// src/Modal/Dialog.tsx
var import_react15, import_react_dialog, import_react16, StyledDialog, DialogRoot, CustomDialogPortal, Dialog;
var init_Dialog = __esm({
  "src/Modal/Dialog.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react15 = __toESM(require("react"));
    import_react_dialog = require("@radix-ui/react-dialog");
    import_react16 = require("@stitches/react");
    init_DialogContent();
    init_useDialogContainerSelector();
    StyledDialog = (0, import_react16.styled)(import_react_dialog.Root, {});
    DialogRoot = (props) => {
      (0, import_react15.useEffect)(() => {
        return () => {
          if (document) setTimeout(() => document.body.style.pointerEvents = "auto", 0);
        };
      }, []);
      return /* @__PURE__ */ import_react15.default.createElement(StyledDialog, { ...props });
    };
    CustomDialogPortal = ({ children, container }) => {
      const dialogContainerSelector = useDialogContainerSelector();
      const containerRef = (0, import_react15.useRef)(null);
      if (container) {
        containerRef.current = container;
      } else if (dialogContainerSelector && !containerRef.current) {
        containerRef.current = document.querySelector(dialogContainerSelector);
      } else if (!containerRef.current) {
        containerRef.current = document.body;
      }
      return /* @__PURE__ */ import_react15.default.createElement(StyledDialogPortal, { container: containerRef.current }, /* @__PURE__ */ import_react15.default.createElement(import_react15.default.Fragment, null, children));
    };
    Dialog = {
      Root: DialogRoot,
      Trigger: StyledDialogTrigger,
      Overlay: CustomDialogOverlay,
      Content: CustomDialogContent,
      Title: DialogTitle,
      Description: DialogDescription,
      Close: DialogClose,
      DefaultClose: DialogDefaultCloseIcon,
      Portal: CustomDialogPortal
    };
  }
});

// src/Modal/index.ts
var init_Modal = __esm({
  "src/Modal/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Dialog();
  }
});

// src/Input/Input.tsx
var import_react17, import_react_icons4, Input, PasswordRoot, PasswordShowIcon, PasswordCopyIcon, PasswordIcons, ReactInput, PasswordInput;
var init_Input = __esm({
  "src/Input/Input.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react17 = __toESM(require("react"));
    import_react_icons4 = require("@100mslive/react-icons");
    init_Layout();
    init_Theme();
    Input = styled("input", {
      fontFamily: "$sans",
      lineHeight: "inherit",
      backgroundColor: "$surface_default",
      borderRadius: "8px",
      outline: "none",
      border: "1px solid $border_default",
      padding: "0.5rem 0.75rem",
      minHeight: "30px",
      color: "$on_surface_high",
      fontSize: "$md",
      "&:focus": {
        boxShadow: "0 0 0 1px $colors$primary_default",
        border: "1px solid transparent"
      },
      "&::placeholder": {
        color: "$on_surface_medium"
      },
      variants: {
        error: {
          true: {
            "&:focus": {
              boxShadow: "0 0 0 3px $colors$alert_error_default"
            }
          }
        }
      }
    });
    PasswordRoot = styled("div", {
      w: "100%",
      position: "relative",
      display: "flex"
    });
    PasswordShowIcon = ({
      showPassword,
      css: css2,
      ...props
    }) => {
      return /* @__PURE__ */ import_react17.default.createElement(Flex, { css: { ...css2 }, ...props }, showPassword ? /* @__PURE__ */ import_react17.default.createElement(import_react_icons4.EyeOpenIcon, null) : /* @__PURE__ */ import_react17.default.createElement(import_react_icons4.EyeCloseIcon, null));
    };
    PasswordCopyIcon = ({ css: css2, ...props }) => {
      return /* @__PURE__ */ import_react17.default.createElement(Flex, { css: { ...css2 }, ...props }, /* @__PURE__ */ import_react17.default.createElement(import_react_icons4.CopyIcon, null));
    };
    PasswordIcons = import_react17.default.forwardRef(
      ({ css: css2, ...props }, ref) => {
        return /* @__PURE__ */ import_react17.default.createElement(
          Flex,
          {
            css: {
              position: "absolute",
              top: 0,
              height: "100%",
              zIndex: 10,
              right: "$4",
              bg: "$surface_bright",
              alignItems: "center",
              ...css2
            },
            ref,
            ...props
          },
          props.children
        );
      }
    );
    ReactInput = import_react17.default.forwardRef(({ showPassword = false, css: css2, ...props }, ref) => {
      return /* @__PURE__ */ import_react17.default.createElement(
        Input,
        {
          css: { flexGrow: 1, width: "100%", ...css2 },
          type: showPassword ? "text" : "password",
          ...props,
          ref
        }
      );
    });
    PasswordInput = {
      Root: PasswordRoot,
      Icons: PasswordIcons,
      Input: ReactInput,
      ShowIcon: PasswordShowIcon,
      CopyIcon: PasswordCopyIcon
    };
  }
});

// src/Input/index.tsx
var init_Input2 = __esm({
  "src/Input/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Input();
  }
});

// src/VideoTile/StyledVideoTile.tsx
var Root7, Container, Overlay2, Info, AttributeBox, AudioIndicator, FullScreenButton, AvatarContainer, StyledVideoTile;
var init_StyledVideoTile = __esm({
  "src/VideoTile/StyledVideoTile.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Layout();
    init_Theme();
    init_utils();
    Root7 = styled("div", {
      padding: "0.75rem"
      // show videotile context menu on hover
      // [`&:hover .tile-menu`]: {
      //   display: 'inline-block',
      // },
    });
    Container = styled("div", {
      width: "100%",
      height: "100%",
      position: "relative",
      overflow: "hidden",
      borderRadius: "$2",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      background: "$background_default",
      variants: {
        transparentBg: {
          true: {
            background: "transparent"
          }
        },
        noRadius: {
          true: {
            borderRadius: 0
          }
        }
      }
    });
    Overlay2 = styled("div", {
      position: "absolute",
      width: "100%",
      height: "100%"
    });
    Info = styled("div", {
      color: "$on_primary_high",
      position: "absolute",
      bottom: "5px",
      left: "50%",
      fontSize: "$sm",
      transform: "translateX(-50%)",
      textAlign: "center",
      width: "80%",
      overflow: "hidden",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      fontFamily: "$sans"
    });
    AttributeBox = styled("div", {
      position: "absolute",
      top: "$4",
      color: "$on_secondary_high",
      bg: "$secondary_dim",
      borderRadius: "$round",
      width: "$14",
      height: "$14",
      mb: "5px",
      ...flexCenter,
      variants: {
        size: {
          small: {
            width: "$10",
            height: "$10",
            "& > svg": {
              width: "$8",
              height: "$8"
            }
          },
          medium: {
            width: "$13",
            height: "$13"
          }
        },
        position: {
          left: { left: "$4" },
          right: { right: "$4" }
        }
      },
      defaultVariants: {
        size: "medium",
        position: "left"
      }
    });
    AudioIndicator = styled(AttributeBox, { defaultVariants: { position: "right" } });
    FullScreenButton = styled("button", {
      height: "$14",
      p: "$2 $4",
      color: "$on_surface_high",
      borderRadius: "$1",
      border: "none",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      position: "absolute",
      top: "$2",
      right: "$2",
      zIndex: 5,
      "&:not([disabled]):focus": {
        outline: "none",
        boxShadow: "0 0 0 3px $colors$primary_bright"
      }
    });
    AvatarContainer = styled(Box, {
      ...flexCenter,
      flexDirection: "column",
      position: "absolute",
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)",
      width: "40%",
      height: "40%",
      "& > div": {
        maxHeight: "$20",
        height: "100%"
      }
    });
    StyledVideoTile = {
      Root: Root7,
      Container,
      Overlay: Overlay2,
      Info,
      AvatarContainer,
      AttributeBox,
      AudioIndicator,
      FullScreenButton
    };
  }
});

// src/VideoTile/index.tsx
var init_VideoTile = __esm({
  "src/VideoTile/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_StyledVideoTile();
  }
});

// src/VideoList/videoListUtils.tsx
var getLeft;
var init_videoListUtils = __esm({
  "src/VideoList/videoListUtils.tsx"() {
    "use strict";
    init_cjs_shims();
    getLeft = (index, currentPageIndex) => {
      if (index === currentPageIndex) {
        return 0;
      }
      if (index + 1 === currentPageIndex) {
        return "-100%";
      }
      if (index - 1 === currentPageIndex) {
        return "100%";
      }
      if (index < currentPageIndex) {
        return "-200%";
      }
      return "200%";
    };
  }
});

// src/VideoList/StyledVideoList.tsx
var Root8, Container2, View, StyledVideoList;
var init_StyledVideoList = __esm({
  "src/VideoList/StyledVideoList.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    Root8 = styled("div", {
      height: "100%",
      width: "100%",
      display: "flex",
      flexDirection: "column"
    });
    Container2 = styled("div", {
      height: "100%",
      width: "100%",
      position: "relative",
      display: "flex",
      alignItems: "center",
      overflow: "hidden"
    });
    View = styled("div", {
      height: "100%",
      width: "100%",
      position: "absolute",
      display: "flex",
      placeContent: "center",
      flexWrap: "wrap",
      alignItems: "center"
    });
    StyledVideoList = {
      Root: Root8,
      Container: Container2,
      View
    };
  }
});

// src/VideoList/index.tsx
var init_VideoList = __esm({
  "src/VideoList/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_videoListUtils();
    init_StyledVideoList();
  }
});

// src/Pagination/StyledPagination.tsx
var Root9, Chevron, Dots, Dot, StyledPagination;
var init_StyledPagination = __esm({
  "src/Pagination/StyledPagination.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    Root9 = styled("div", {
      height: "2rem",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      width: "100%",
      "& > * + *": {
        marginRight: "0",
        marginLeft: "0.5rem"
      }
    });
    Chevron = styled("button", {
      color: "$on_surface_high",
      border: "none",
      "&:focus": {
        outline: "none"
      },
      "&[disabled]": {
        color: "$on_surface_low",
        cursor: "not-allowed"
      },
      backgroundColor: "transparent",
      display: "flex"
    });
    Dots = styled("div", {
      display: "flex",
      alignItems: "center",
      "& > * + *": {
        marginRight: "0",
        marginLeft: "0.5rem"
      }
    });
    Dot = styled("button", {
      "&:focus": {
        outline: "none"
      },
      borderRadius: "9999px",
      width: "0.5rem",
      height: "0.5rem",
      backgroundColor: "$on_surface_low",
      padding: "0px",
      border: "none",
      cursor: "pointer",
      variants: {
        active: {
          true: {
            backgroundColor: "$on_surface_high"
          }
        }
      }
    });
    StyledPagination = {
      Root: Root9,
      Chevron,
      Dots,
      Dot
    };
  }
});

// src/Pagination/index.tsx
var init_Pagination = __esm({
  "src/Pagination/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_StyledPagination();
  }
});

// src/Dropdown/Dropdown.tsx
var import_react_dropdown_menu, DropdownRoot, DropdownTrigger, DropdownTriggerItem, DropdownItem, DropdownItemSeparator, DropdownContent, DropdownLabel, DropdownGroup, DropdownSubMenu, DropdownSubMenuContent, DropdownCheckboxItem, DropdownItemIndicator, Dropdown;
var init_Dropdown = __esm({
  "src/Dropdown/Dropdown.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react_dropdown_menu = require("@radix-ui/react-dropdown-menu");
    init_Theme();
    DropdownRoot = styled(import_react_dropdown_menu.Root, {});
    DropdownTrigger = styled(import_react_dropdown_menu.Trigger, {
      cursor: "pointer",
      appearance: "none !important",
      '&[data-state="open"]': {
        backgroundColor: "$surface_bright"
      },
      "&:focus": {
        outline: "none"
      },
      "&:focus-visible": {
        boxShadow: "0 0 0 3px $colors$primary_default"
      }
    });
    DropdownTriggerItem = styled(import_react_dropdown_menu.SubTrigger, {
      w: "100%",
      color: "$on_surface_high",
      p: "$8",
      display: "flex",
      alignItems: "center",
      "&:hover": {
        cursor: "pointer",
        bg: "$surface_brighter"
      },
      "&:focus-visible": {
        bg: "$surface_brighter",
        outline: "none"
      }
    });
    DropdownItem = styled(import_react_dropdown_menu.Item, {
      color: "$on_surface_high",
      p: "$8",
      display: "flex",
      alignItems: "center",
      outline: "none",
      backgroundColor: "$surface_dim",
      "&:hover": {
        cursor: "pointer",
        bg: "$surface_bright"
      },
      "&:focus-visible": {
        bg: "$surface_bright"
      }
    });
    DropdownItemSeparator = styled(import_react_dropdown_menu.Separator, {
      h: 1,
      backgroundColor: "$border_bright",
      m: "$4 $8"
    });
    DropdownContent = styled(import_react_dropdown_menu.Content, {
      w: "$80",
      maxHeight: "$64",
      r: "$1",
      py: "$4",
      backgroundColor: "$surface_dim",
      overflowY: "auto",
      boxShadow: "0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)",
      zIndex: 20,
      fontFamily: "$sans"
    });
    DropdownLabel = styled(import_react_dropdown_menu.Label, {
      display: "flex",
      alignItems: "center",
      h: "$12",
      w: "100%",
      p: "$8 $4"
    });
    DropdownGroup = styled(import_react_dropdown_menu.Group, {});
    DropdownSubMenu = styled(import_react_dropdown_menu.Sub, {});
    DropdownSubMenuContent = styled(import_react_dropdown_menu.SubContent, {
      w: "$80",
      maxHeight: "$64",
      r: "$1",
      py: "$4",
      backgroundColor: "$surface_bright",
      overflowY: "auto",
      boxShadow: "0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)",
      zIndex: 20
    });
    DropdownCheckboxItem = styled(import_react_dropdown_menu.CheckboxItem, {
      color: "$on_surface_high",
      p: "$8",
      display: "flex",
      alignItems: "center",
      outline: "none",
      "&:hover": {
        cursor: "pointer",
        bg: "$surface_brighter"
      },
      "&:focus-visible": {
        bg: "$surface_brighter"
      },
      gap: "$2"
    });
    DropdownItemIndicator = styled(import_react_dropdown_menu.ItemIndicator, {
      w: "$10",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center"
    });
    Dropdown = {
      Root: DropdownRoot,
      Trigger: DropdownTrigger,
      TriggerItem: DropdownTriggerItem,
      Content: DropdownContent,
      Portal: import_react_dropdown_menu.Portal,
      SubMenu: DropdownSubMenu,
      SubMenuContent: DropdownSubMenuContent,
      Item: DropdownItem,
      Label: DropdownLabel,
      Group: DropdownGroup,
      ItemSeparator: DropdownItemSeparator,
      CheckboxItem: DropdownCheckboxItem,
      ItemIndicator: DropdownItemIndicator
    };
  }
});

// src/Dropdown/index.tsx
var init_Dropdown2 = __esm({
  "src/Dropdown/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Dropdown();
  }
});

// src/Video/Video.tsx
var import_react18, import_react_sdk2, StyledVideo, Video;
var init_Video = __esm({
  "src/Video/Video.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react18 = __toESM(require("react"));
    import_react_sdk2 = require("@100mslive/react-sdk");
    init_Theme();
    StyledVideo = styled("video", {
      width: "100%",
      height: "100%",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      borderRadius: "$2",
      objectFit: "cover",
      background: "$background_default",
      variants: {
        mirror: {
          true: {
            transform: "scaleX(-1)"
          }
        },
        screenShare: {
          true: {
            objectFit: "contain"
          }
        },
        degraded: {
          // send the video behind when it's degraded so avatar can show on top of it. Video will be stuck frame in this case.
          // not hiding by using display none, because it will lead it to be detached as it will no longer be in view.
          true: {
            zIndex: -100
          }
        },
        noRadius: {
          true: {
            borderRadius: 0
          }
        }
      },
      defaultVariants: {
        mirror: false
      }
    });
    Video = ({ trackId, attach, ...props }) => {
      const { videoRef } = (0, import_react_sdk2.useVideo)({ trackId, attach });
      return /* @__PURE__ */ import_react18.default.createElement(StyledVideo, { ref: videoRef, ...props });
    };
  }
});

// src/Video/index.tsx
var init_Video2 = __esm({
  "src/Video/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Video();
  }
});

// src/TileMenu/StyledMenuTile.tsx
var Popover, Root12, StyledTrigger, StyledContent, styledItem, StyledItemButton, StyledVolumeItem, Flex2, RemoveMenuItem, StyledMenuTile;
var init_StyledMenuTile = __esm({
  "src/TileMenu/StyledMenuTile.tsx"() {
    "use strict";
    init_cjs_shims();
    Popover = __toESM(require("@radix-ui/react-popover"));
    init_Theme();
    init_animations();
    init_styles();
    Root12 = Popover.Root;
    StyledTrigger = styled(Popover.Trigger, {
      position: "absolute",
      bottom: "$2",
      right: "$2",
      zIndex: 10,
      width: "$13",
      height: "$13",
      color: "$on_surface_high",
      borderRadius: "$2",
      backgroundColor: "$surface_bright",
      cursor: "pointer",
      border: "none",
      ...flexCenter,
      "&:not([disabled]):focus": {
        outline: "none",
        boxShadow: "0 0 0 3px $colors$primary_bright"
      }
    });
    StyledContent = styled(Popover.Content, {
      fontFamily: "$sans",
      backgroundColor: "$surface_dim",
      padding: "$5 0",
      display: "flex",
      flexDirection: "column",
      borderRadius: "$space$6",
      zIndex: 11,
      width: "$60",
      ...popoverAnimation
    });
    styledItem = {
      fontSize: "$sm",
      color: "$on_surface_high",
      display: "flex",
      alignItems: "center",
      padding: "$4 $6",
      width: "100%",
      backgroundColor: "$menuBg"
    };
    StyledItemButton = styled("button", {
      ...styledItem,
      height: "$14",
      border: "none",
      "&:hover": {
        backgroundColor: "$surface_brighter"
      },
      cursor: "pointer",
      // TODO: default focus applied cause issues with this style
      "&:focus": {
        outline: "none"
        // backgroundColor: '$grey3',
      },
      "& > * + *": {
        marginRight: "0",
        marginLeft: "$4"
      }
    });
    StyledVolumeItem = styled("div", {
      // TODO: maybe keep this as base comp and extend button variant
      ...styledItem,
      alignItems: "start",
      flexDirection: "column",
      marginBottom: "0"
    });
    Flex2 = styled("div", {
      display: "flex",
      "& > * + *": {
        marginRight: "0",
        marginLeft: "$4"
      }
    });
    RemoveMenuItem = styled(StyledItemButton, {
      color: "$alert_error_default",
      borderTop: "1px solid $border_bright"
    });
    StyledMenuTile = {
      Root: Root12,
      Trigger: StyledTrigger,
      Content: StyledContent,
      ItemButton: StyledItemButton,
      VolumeItem: StyledVolumeItem,
      RemoveItem: RemoveMenuItem
    };
  }
});

// src/TileMenu/index.tsx
var init_TileMenu = __esm({
  "src/TileMenu/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_StyledMenuTile();
  }
});

// src/AudioLevel/useBorderAudioLevel.tsx
function useBorderAudioLevel(audioTrackId) {
  const { theme: theme2 } = useTheme();
  const color = theme2.colors.primary_default.value;
  const getStyle = (0, import_react19.useCallback)(
    (level) => {
      const style = {
        transition: "outline 0.4s ease-in-out"
      };
      style["outline"] = level ? `${sigmoid(level) * 4}px solid ${color}` : "0px solid transparent";
      return style;
    },
    [color]
  );
  const ref = (0, import_react19.useRef)(null);
  (0, import_react_sdk3.useAudioLevelStyles)({
    trackId: audioTrackId,
    getStyle,
    ref
  });
  return ref;
}
var import_react19, import_react_sdk3, sigmoid;
var init_useBorderAudioLevel = __esm({
  "src/AudioLevel/useBorderAudioLevel.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react19 = require("react");
    import_react_sdk3 = require("@100mslive/react-sdk");
    init_Theme();
    sigmoid = (z) => {
      return 1 / (1 + Math.exp(-z));
    };
  }
});

// src/AudioLevel/audio-level.png
var audio_level_default;
var init_audio_level = __esm({
  "src/AudioLevel/audio-level.png"() {
    audio_level_default = "./audio-level-MKS7B2I3.png";
  }
});

// src/AudioLevel/AudioLevel.tsx
var import_react20, import_react_sdk4, positionValues, barAnimation, AudioBar, AudioLevel;
var init_AudioLevel = __esm({
  "src/AudioLevel/AudioLevel.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react20 = __toESM(require("react"));
    import_react_sdk4 = require("@100mslive/react-sdk");
    init_Layout();
    init_Theme();
    init_audio_level();
    positionValues = new Array(101).fill(0).reduce((acc, _, index) => {
      acc[index] = Math.round(index / 100 * 4) / 4;
      return acc;
    }, {});
    barAnimation = keyframes({
      from: {
        maskSize: "4em .8em",
        "-webkit-mask-position-y": ".1em",
        maskPosition: "initial .1em"
      },
      "50%": {
        maskSize: "4em 1em",
        "-webkit-mask-position-y": 0,
        maskPosition: "initial 0"
      },
      to: {
        maskSize: "4em .8em",
        "-webkit-mask-position-y": ".1em",
        maskPosition: "initial 0.1em"
      }
    });
    AudioBar = () => {
      return /* @__PURE__ */ import_react20.default.createElement(
        Box,
        {
          css: {
            width: ".25em",
            height: "1em",
            maskImage: `url(${audio_level_default})`,
            "-webkit-mask-repeat": "no-repeat",
            backgroundColor: "$on_primary_high",
            maskSize: "4em 1em"
          }
        }
      );
    };
    AudioLevel = ({ trackId, size }) => {
      const ref = (0, import_react20.useRef)(null);
      const vanillaStore = (0, import_react_sdk4.useHMSVanillaStore)();
      (0, import_react20.useEffect)(() => {
        const unsubscribe = vanillaStore.subscribe((audioLevel) => {
          if (ref.current) {
            let index = 0;
            for (const child of ref.current.children) {
              const positionX = `-${positionValues[audioLevel] * (index === 1 ? 2.5 : 1.25)}em`;
              child.style["-webkit-mask-position-x"] = positionX;
              child.style["mask-position"] = `${positionX} 0`;
              child.style["animation"] = positionValues[audioLevel] > 0 ? `${barAnimation} 0.6s steps(3,jump-none) 0s infinite` : "none";
              index++;
            }
          }
        }, (0, import_react_sdk4.selectTrackAudioByID)(trackId));
        return unsubscribe;
      }, [vanillaStore, trackId]);
      return /* @__PURE__ */ import_react20.default.createElement(
        Flex,
        {
          ref,
          css: {
            fontSize: size === "small" ? "0.75rem" : "1rem",
            gap: size === "small" ? "$1" : "$2"
          }
        },
        /* @__PURE__ */ import_react20.default.createElement(AudioBar, null),
        /* @__PURE__ */ import_react20.default.createElement(AudioBar, null),
        /* @__PURE__ */ import_react20.default.createElement(AudioBar, null)
      );
    };
  }
});

// src/AudioLevel/index.ts
var init_AudioLevel2 = __esm({
  "src/AudioLevel/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_useBorderAudioLevel();
    init_AudioLevel();
  }
});

// src/Popover/index.tsx
var import_react_popover, StyledContent2, StyledArrow, StyledTrigger2, Popover2;
var init_Popover = __esm({
  "src/Popover/index.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react_popover = require("@radix-ui/react-popover");
    init_Theme();
    init_animations();
    StyledContent2 = styled(import_react_popover.Content, {
      padding: "$6",
      borderRadius: "$2",
      backgroundColor: "$background_default",
      boxShadow: "$sm",
      zIndex: 12,
      ...popoverAnimation
    });
    StyledArrow = styled(import_react_popover.Arrow, {
      ...popoverAnimation
    });
    StyledTrigger2 = styled(import_react_popover.Trigger, {
      "&:hover": {
        cursor: "pointer"
      },
      "&:focus-visible": {
        boxShadow: "0 0 0 3px $colors$primary_default"
      }
    });
    Popover2 = {
      Root: import_react_popover.Popover,
      Content: StyledContent2,
      Trigger: StyledTrigger2,
      Portal: import_react_popover.Portal,
      Arrow: StyledArrow,
      Close: import_react_popover.Close
    };
  }
});

// src/Stats/formatBytes.ts
var formatBytes;
var init_formatBytes = __esm({
  "src/Stats/formatBytes.ts"() {
    "use strict";
    init_cjs_shims();
    formatBytes = (bytes, unit = "B", decimals = 2) => {
      if (bytes === 0) {
        return `0 ${unit}`;
      }
      if (!bytes) {
        return "-";
      }
      const k = 1024;
      const dm = decimals < 0 ? 0 : decimals;
      const sizes = ["", "K", "M", "G", "T", "P", "E", "Z", "Y"].map((size) => size + unit);
      let i = Math.floor(Math.log(bytes) / Math.log(k));
      i === 0 && i++;
      return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
    };
  }
});

// src/Stats/StyledStats.tsx
var Root14, Table, Row, Label2, Value, Gap, Stats;
var init_StyledStats = __esm({
  "src/Stats/StyledStats.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    Root14 = styled("div", {
      backgroundColor: "rgba(0,0,0,0.75)",
      position: "absolute",
      top: "$3",
      left: "$3",
      zIndex: 7,
      borderRadius: "$2",
      padding: "$2",
      fontSize: "$xs",
      overflowY: "auto",
      maxHeight: "75%",
      maxWidth: "85%"
    });
    Table = styled("table", {});
    Row = styled("tr", {
      width: "100%",
      "& > * + *": {
        px: "$4"
      },
      whiteSpace: "nowrap",
      textAlign: "left"
    });
    Label2 = styled("td", {
      color: "$on_primary_high",
      fontWeight: "$regular"
    });
    Value = styled("td", {
      color: "$on_primary_high"
    });
    Gap = styled("tr", {
      height: "$4"
    });
    Stats = {
      Root: Root14,
      Row,
      Label: Label2,
      Value,
      Table,
      Gap
    };
  }
});

// src/Stats/useQoE.ts
var import_react21, import_react_use, import_react_sdk5, EXPECTED_RESOLUTION, clip, useQoE;
var init_useQoE = __esm({
  "src/Stats/useQoE.ts"() {
    "use strict";
    init_cjs_shims();
    import_react21 = require("react");
    import_react_use = require("react-use");
    import_react_sdk5 = require("@100mslive/react-sdk");
    EXPECTED_RESOLUTION = 1280 * 720;
    clip = (value, min_value, max_value) => {
      return Math.max(Math.min(value, max_value), min_value);
    };
    useQoE = ({ videoTrackID, audioTrackID, isLocal = false }) => {
      const audioTrackStats = (0, import_react_sdk5.useHMSStatsStore)(import_react_sdk5.selectHMSStats.trackStatsByID(audioTrackID));
      const videoTrackStats = (0, import_react_sdk5.useHMSStatsStore)(import_react_sdk5.selectHMSStats.trackStatsByID(videoTrackID));
      const prevVideoTrackStats = (0, import_react_use.usePrevious)(videoTrackStats);
      const prevAudioTrackStats = (0, import_react_use.usePrevious)(audioTrackStats);
      const prevJitterBufferDelayMs = (0, import_react21.useRef)(0);
      if (isLocal || videoTrackID && !videoTrackStats || audioTrackID && !audioTrackStats) {
        return;
      }
      const resolutionNorm = (videoTrackStats?.frameWidth || 0) * (videoTrackStats?.frameHeight || 0) / EXPECTED_RESOLUTION;
      const framesDecodedInLastSec = videoTrackStats?.framesDecoded && prevVideoTrackStats?.framesDecoded ? videoTrackStats.framesDecoded - prevVideoTrackStats.framesDecoded : 0;
      let freezeDurationNorm = 1 - ((videoTrackStats?.totalFreezesDuration || 0) - (prevVideoTrackStats?.totalFreezesDuration || 0));
      freezeDurationNorm = freezeDurationNorm < 0 ? 0.5 : freezeDurationNorm;
      freezeDurationNorm = framesDecodedInLastSec === 0 ? 0 : freezeDurationNorm;
      const fpsNorm = framesDecodedInLastSec / 30;
      const prevJBDelay = prevVideoTrackStats?.jitterBufferDelay || 0;
      const prevJBEmittedCount = prevVideoTrackStats?.jitterBufferEmittedCount || 0;
      const currentJBDelay = (videoTrackStats?.jitterBufferDelay || 0) - prevJBDelay;
      const currentJBEmittedCount = (videoTrackStats?.jitterBufferEmittedCount || 0) - prevJBEmittedCount;
      const jitterBufferDelayMs = currentJBEmittedCount > 0 ? currentJBDelay * 1e3 / currentJBEmittedCount : prevJitterBufferDelayMs.current;
      prevJitterBufferDelayMs.current = jitterBufferDelayMs;
      const delayNorm = 1 - Math.min(1, jitterBufferDelayMs / 2e3);
      const prevConcealedSamples = (prevAudioTrackStats?.concealedSamples || 0) - (prevAudioTrackStats?.silentConcealedSamples || 0);
      const currentConcealedSamples = (audioTrackStats?.concealedSamples || 0) - (audioTrackStats?.silentConcealedSamples || 0) - prevConcealedSamples;
      const audioConcealedNorm = 1 - currentConcealedSamples / 48e3;
      return (5 * clip(freezeDurationNorm, 0, 1) ** 3 * clip(resolutionNorm, 0, 1) ** 0.3 * clip(fpsNorm, 0, 1) ** 0.2 * clip(delayNorm, 0, 1) ** 0.5 * clip(audioConcealedNorm, 0, 1) ** 2).toFixed(2);
    };
  }
});

// src/Stats/Stats.tsx
function VideoTileStats({ videoTrackID, audioTrackID, peerID, isLocal = false }) {
  const audioSelector = isLocal ? import_react_sdk6.selectHMSStats.localAudioTrackStatsByID : import_react_sdk6.selectHMSStats.trackStatsByID;
  const audioTrackStats = (0, import_react_sdk6.useHMSStatsStore)(audioSelector(audioTrackID));
  const localVideoTrackStats = (0, import_react_sdk6.useHMSStatsStore)(import_react_sdk6.selectHMSStats.localVideoTrackStatsByID(videoTrackID));
  const remoteVideoTrackStats = (0, import_react_sdk6.useHMSStatsStore)(import_react_sdk6.selectHMSStats.trackStatsByID(videoTrackID));
  const videoTrackStats = isLocal ? localVideoTrackStats?.[0] : remoteVideoTrackStats;
  const downlinkScore = (0, import_react_sdk6.useHMSStore)((0, import_react_sdk6.selectConnectionQualityByPeerID)(peerID))?.downlinkQuality;
  const availableOutgoingBitrate = (0, import_react_sdk6.useHMSStatsStore)(import_react_sdk6.selectHMSStats.availablePublishBitrate);
  const qoe = useQoE({ videoTrackID, audioTrackID, isLocal });
  if (!(audioTrackStats || videoTrackStats)) {
    return null;
  }
  return /* @__PURE__ */ import_react22.default.createElement(Stats.Root, null, /* @__PURE__ */ import_react22.default.createElement("table", null, /* @__PURE__ */ import_react22.default.createElement("tbody", null, isLocal ? /* @__PURE__ */ import_react22.default.createElement(import_react22.Fragment, null, /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullishAndNot0(availableOutgoingBitrate),
      label: "AOBR",
      tooltip: "Available Outgoing Bitrate",
      value: formatBytes(availableOutgoingBitrate, "b/s")
    }
  ), localVideoTrackStats?.map((stat) => {
    if (!stat) {
      return null;
    }
    const layer = stat.rid ? import_react_sdk6.simulcastMapping[stat.rid] : "";
    return /* @__PURE__ */ import_react22.default.createElement(import_react22.Fragment, { key: `${stat.id}${stat.rid}` }, layer && /* @__PURE__ */ import_react22.default.createElement(StatsRow, { label: layer.toUpperCase(), value: "" }), /* @__PURE__ */ import_react22.default.createElement(
      StatsRow,
      {
        show: isNotNullishAndNot0(stat.frameWidth),
        label: "Width",
        value: stat.frameWidth?.toString()
      }
    ), /* @__PURE__ */ import_react22.default.createElement(
      StatsRow,
      {
        show: isNotNullishAndNot0(stat.frameHeight),
        label: "Height",
        value: stat.frameHeight?.toString()
      }
    ), /* @__PURE__ */ import_react22.default.createElement(
      StatsRow,
      {
        show: isNotNullishAndNot0(stat.framesPerSecond),
        label: "FPS",
        value: `${stat.framesPerSecond} ${isNotNullishAndNot0(stat.framesDropped) ? `(${stat.framesDropped} dropped)` : ""}`
      }
    ), /* @__PURE__ */ import_react22.default.createElement(
      StatsRow,
      {
        show: isNotNullish(stat.bitrate),
        label: "Bitrate(V)",
        value: formatBytes(stat.bitrate, "b/s")
      }
    ), /* @__PURE__ */ import_react22.default.createElement(Stats.Gap, null));
  })) : /* @__PURE__ */ import_react22.default.createElement(import_react22.Fragment, null, /* @__PURE__ */ import_react22.default.createElement(StatsRow, { show: isNotNullish(qoe), label: "QoE", value: qoe }), /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullishAndNot0(videoTrackStats?.frameWidth),
      label: "Width",
      value: videoTrackStats?.frameWidth?.toString()
    }
  ), /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullishAndNot0(videoTrackStats?.frameHeight),
      label: "Height",
      value: videoTrackStats?.frameHeight?.toString()
    }
  ), /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullishAndNot0(videoTrackStats?.framesPerSecond),
      label: "FPS",
      value: `${videoTrackStats?.framesPerSecond} ${isNotNullishAndNot0(videoTrackStats?.framesDropped) ? `(${videoTrackStats?.framesDropped} dropped)` : ""}`
    }
  ), /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullish(videoTrackStats?.totalPausesDuration),
      label: "Pauses Duration",
      value: videoTrackStats?.totalPausesDuration
    }
  ), /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullish(videoTrackStats?.totalFreezesDuration),
      label: "Freezes Duration",
      value: videoTrackStats?.totalFreezesDuration
    }
  ), /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullish(videoTrackStats?.bitrate),
      label: "Bitrate(V)",
      value: formatBytes(videoTrackStats?.bitrate, "b/s")
    }
  )), /* @__PURE__ */ import_react22.default.createElement(
    StatsRow,
    {
      show: isNotNullish(audioTrackStats?.bitrate),
      label: "Bitrate(A)",
      value: formatBytes(audioTrackStats?.bitrate, "b/s")
    }
  ), /* @__PURE__ */ import_react22.default.createElement(StatsRow, { show: isNotNullish(downlinkScore), label: "CQS", value: downlinkScore }), /* @__PURE__ */ import_react22.default.createElement(StatsRow, { show: isNotNullish(videoTrackStats?.codec), label: "Codec(V)", value: videoTrackStats?.codec }), /* @__PURE__ */ import_react22.default.createElement(StatsRow, { show: isNotNullish(audioTrackStats?.codec), label: "Codec(A)", value: audioTrackStats?.codec }), /* @__PURE__ */ import_react22.default.createElement(PacketLostAndJitter, { audioTrackStats, videoTrackStats }))));
}
function isNotNullishAndNot0(value) {
  return isNotNullish(value) && value !== 0;
}
function isNotNullish(value) {
  return value !== void 0 && value !== null;
}
var import_react22, import_react_sdk6, PacketLostAndJitter, TrackPacketsLostRow, RawStatsRow, StatsRow;
var init_Stats = __esm({
  "src/Stats/Stats.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react22 = __toESM(require("react"));
    import_react_sdk6 = require("@100mslive/react-sdk");
    init_Tooltip2();
    init_formatBytes();
    init_StyledStats();
    init_useQoE();
    PacketLostAndJitter = ({
      audioTrackStats,
      videoTrackStats
    }) => {
      const isLocalPeer = audioTrackStats?.type.includes("outbound") || videoTrackStats?.type.includes("outbound");
      const audioStats = isLocalPeer ? audioTrackStats?.remote : audioTrackStats;
      const videoStats = isLocalPeer ? videoTrackStats?.remote : videoTrackStats;
      return /* @__PURE__ */ import_react22.default.createElement(import_react22.default.Fragment, null, /* @__PURE__ */ import_react22.default.createElement(TrackPacketsLostRow, { label: "Packet Loss(V)", stats: videoStats }), /* @__PURE__ */ import_react22.default.createElement(TrackPacketsLostRow, { label: "Packet Loss(A)", stats: audioStats }), /* @__PURE__ */ import_react22.default.createElement(StatsRow, { show: isNotNullish(videoStats?.jitter), label: "Jitter(V)", value: videoStats?.jitter?.toFixed(4) }), /* @__PURE__ */ import_react22.default.createElement(StatsRow, { show: isNotNullish(audioStats?.jitter), label: "Jitter(A)", value: audioStats?.jitter?.toFixed(4) }));
    };
    TrackPacketsLostRow = ({
      stats,
      label
    }) => {
      const packetsLostRate = `${stats?.packetsLostRate ? stats.packetsLostRate.toFixed(2) : 0}/s`;
      return /* @__PURE__ */ import_react22.default.createElement(
        StatsRow,
        {
          show: isNotNullishAndNot0(stats?.packetsLost),
          label,
          value: `${stats?.packetsLost}(${packetsLostRate})`
        }
      );
    };
    RawStatsRow = ({
      label = "",
      value = "",
      tooltip = "",
      show = true
    }) => {
      const statsLabel = /* @__PURE__ */ import_react22.default.createElement(Stats.Label, null, label);
      return /* @__PURE__ */ import_react22.default.createElement(import_react22.default.Fragment, null, show ? /* @__PURE__ */ import_react22.default.createElement(Stats.Row, null, tooltip ? /* @__PURE__ */ import_react22.default.createElement(Tooltip, { side: "top", title: tooltip }, statsLabel) : statsLabel, value === "" ? /* @__PURE__ */ import_react22.default.createElement(Stats.Value, null) : /* @__PURE__ */ import_react22.default.createElement(Stats.Value, null, value)) : null);
    };
    StatsRow = import_react22.default.memo(RawStatsRow);
  }
});

// src/Stats/index.tsx
var init_Stats2 = __esm({
  "src/Stats/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Stats();
    init_formatBytes();
  }
});

// src/Checkbox/Checkbox.tsx
var CheckboxPrimitive, CheckboxRoot, CheckboxIndicator, Checkbox;
var init_Checkbox = __esm({
  "src/Checkbox/Checkbox.tsx"() {
    "use strict";
    init_cjs_shims();
    CheckboxPrimitive = __toESM(require("@radix-ui/react-checkbox"));
    init_Theme();
    CheckboxRoot = styled(CheckboxPrimitive.Root, {
      all: "unset",
      border: "1px solid $primary_default",
      backgroundColor: "$on_primary_high",
      width: "$8",
      height: "$8",
      borderRadius: "$0",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      boxShadow: "none",
      outline: "none",
      cursor: "pointer",
      "&:focus": {
        boxShadow: "none",
        outline: "none"
      },
      '&[data-state="checked"]': {
        backgroundColor: "$primary_default"
      }
    });
    CheckboxIndicator = styled(CheckboxPrimitive.Indicator, {
      color: "$on_primary_high"
    });
    Checkbox = {
      Root: CheckboxRoot,
      Indicator: CheckboxIndicator
    };
  }
});

// src/Checkbox/index.tsx
var init_Checkbox2 = __esm({
  "src/Checkbox/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Checkbox();
  }
});

// src/Label/Label.tsx
var LabelPrimitive, Label3;
var init_Label = __esm({
  "src/Label/Label.tsx"() {
    "use strict";
    init_cjs_shims();
    LabelPrimitive = __toESM(require("@radix-ui/react-label"));
    init_Theme();
    Label3 = styled(LabelPrimitive.Root, {
      fontFamily: "$sans",
      fontSize: "$md",
      color: "$on_primary_high"
    });
  }
});

// src/Label/index.ts
var init_Label2 = __esm({
  "src/Label/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Label();
  }
});

// src/RadioGroup/RadioGroup.tsx
var RadioGroupPrimitive, RadioGroupRoot, RadioGroupItem, RadioGroupIndicator, RadioGroup;
var init_RadioGroup = __esm({
  "src/RadioGroup/RadioGroup.tsx"() {
    "use strict";
    init_cjs_shims();
    RadioGroupPrimitive = __toESM(require("@radix-ui/react-radio-group"));
    init_Theme();
    RadioGroupRoot = styled(RadioGroupPrimitive.Root, {
      display: "flex",
      alignItems: "center"
    });
    RadioGroupItem = styled(RadioGroupPrimitive.Item, {
      bg: "$on_primary_high",
      width: "$8",
      height: "$8",
      border: "1px solid $primary_default",
      cursor: "pointer",
      borderRadius: "$round",
      "&:focus": {
        boxShadow: "none",
        outline: "none"
      },
      '&[data-state="checked"]': {
        borderWidth: "$space$2",
        p: "$1"
      }
    });
    RadioGroupIndicator = styled(RadioGroupPrimitive.Indicator, {
      bg: "$primary_default"
    });
    RadioGroup = {
      Root: RadioGroupRoot,
      Item: RadioGroupItem,
      Indicator: RadioGroupIndicator
    };
  }
});

// src/RadioGroup/index.tsx
var init_RadioGroup2 = __esm({
  "src/RadioGroup/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_RadioGroup();
  }
});

// src/Toast/Toast.tsx
var import_react23, ToastPrimitives, import_react_icons5, getToastVariant, ToastRoot, ToastTitle, ToastDescription, ToastClose, ToastAction, ToastViewport, DefaultClose, HMSToast, Toast;
var init_Toast = __esm({
  "src/Toast/Toast.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react23 = __toESM(require("react"));
    ToastPrimitives = __toESM(require("@radix-ui/react-toast"));
    import_react_icons5 = require("@100mslive/react-icons");
    init_IconButton2();
    init_Layout();
    init_Text2();
    init_Theme();
    init_utils();
    getToastVariant = (base) => {
      return {
        borderLeftColor: base,
        borderLeft: 0,
        "&:before": {
          position: "absolute",
          top: "-1px",
          left: "-$4",
          width: "$8",
          borderLeft: `solid $space$px ${base}`,
          borderTop: `solid $space$px ${base}`,
          borderBottom: `solid $space$px ${base}`,
          borderTopLeftRadius: "$3",
          borderBottomLeftRadius: "$3",
          bg: base,
          content: " ",
          height: "100%",
          zIndex: 10
        },
        "@sm": {
          "&:before": {
            content: "none"
          },
          border: `solid $space$px ${base}`
        }
      };
    };
    ToastRoot = styled(ToastPrimitives.Root, {
      r: "$3",
      bg: "$surface_default",
      p: "$10",
      display: "flex",
      flexDirection: "column",
      position: "relative",
      fontFamily: "$sans",
      border: "solid $space$px $border_bright",
      overflow: "hidden",
      ...toastAnimation,
      "@sm": {
        p: "$8 $11"
      },
      variants: {
        variant: {
          standard: getToastVariant("$secondary_default"),
          warning: getToastVariant("$alert_warning"),
          error: getToastVariant("$alert_error_default"),
          success: getToastVariant("$alert_success")
        }
      },
      defaultVariants: {
        variant: "standard"
      }
    });
    ToastTitle = styled(ToastPrimitives.Title, {
      fontSize: "$md",
      color: "$on_surface_high",
      fontWeight: "$semiBold",
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between"
    });
    ToastDescription = styled(ToastPrimitives.Description, {
      color: "$on_surface_medium"
    });
    ToastClose = styled(ToastPrimitives.Close, {});
    ToastAction = styled(ToastPrimitives.Action, {
      cursor: "pointer",
      background: "none",
      border: "none"
    });
    ToastViewport = styled(ToastPrimitives.Viewport, {
      position: "fixed",
      bottom: 0,
      left: 0,
      display: "flex",
      flexDirection: "column",
      padding: "$8",
      gap: 10,
      width: 390,
      "@sm": {
        width: "100%",
        padding: "$6"
      },
      maxWidth: "100vw",
      margin: 0,
      listStyle: "none",
      zIndex: 1e3
    });
    DefaultClose = ({ css: css2 }) => {
      return /* @__PURE__ */ import_react23.default.createElement(ToastClose, { css: css2, asChild: true }, /* @__PURE__ */ import_react23.default.createElement(IconButton, null, /* @__PURE__ */ import_react23.default.createElement(import_react_icons5.CrossIcon, null)));
    };
    HMSToast = ({
      title,
      description,
      isClosable = true,
      icon,
      action,
      inlineAction = false,
      ...props
    }) => {
      return /* @__PURE__ */ import_react23.default.createElement(import_react23.default.Fragment, null, /* @__PURE__ */ import_react23.default.createElement(ToastRoot, { ...props }, /* @__PURE__ */ import_react23.default.createElement(ToastTitle, null, /* @__PURE__ */ import_react23.default.createElement(Flex, { align: "center", css: { gap: "$4", flex: "1 1 0", minWidth: 0 } }, icon ? /* @__PURE__ */ import_react23.default.createElement(Box, { css: { w: "$10", h: "$10", alignSelf: "start", mt: "$2" } }, icon) : null, /* @__PURE__ */ import_react23.default.createElement(Text, { variant: "sub1", css: { c: "inherit", wordBreak: "break-word" } }, title)), isClosable ? /* @__PURE__ */ import_react23.default.createElement(DefaultClose, null) : null, !isClosable && inlineAction && action ? /* @__PURE__ */ import_react23.default.createElement(ToastAction, { altText: `${title}Action` }, action) : null), description ? /* @__PURE__ */ import_react23.default.createElement(ToastDescription, null, /* @__PURE__ */ import_react23.default.createElement(Text, { variant: "body1", css: { fontWeight: "$regular", c: "$on_surface_medium" } }, description)) : null, !inlineAction && action ? /* @__PURE__ */ import_react23.default.createElement(ToastAction, { altText: `${title}Action`, css: { mt: "$10" } }, action) : null));
    };
    Toast = {
      Provider: ToastPrimitives.Provider,
      Root: ToastRoot,
      Title: ToastTitle,
      Description: ToastDescription,
      Close: DefaultClose,
      Action: ToastAction,
      Viewport: ToastViewport,
      HMSToast
    };
  }
});

// src/Toast/index.tsx
var init_Toast2 = __esm({
  "src/Toast/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Toast();
  }
});

// src/Accordion/Accordion.tsx
var import_react24, BaseAccordion, import_react_icons6, StyledAccordion, StyledItem, StyledHeader, StyledTrigger3, StyledContent3, StyledChevron, AccordionRoot, AccordionItem, AccordionHeader, AccordionContent;
var init_Accordion = __esm({
  "src/Accordion/Accordion.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react24 = __toESM(require("react"));
    BaseAccordion = __toESM(require("@radix-ui/react-accordion"));
    import_react_icons6 = require("@100mslive/react-icons");
    init_Layout();
    init_Theme();
    init_utils();
    StyledAccordion = styled(BaseAccordion.Root, {});
    StyledItem = styled(BaseAccordion.Item, {
      marginTop: "$px",
      display: "block",
      "&:first-child": {
        marginTop: 0,
        borderTopLeftRadius: "$0",
        borderTopRightRadius: "$0"
      },
      "&:last-child": {
        borderBottomLeftRadius: "$4",
        borderBottomRightRadius: "$4"
      }
    });
    StyledHeader = styled(BaseAccordion.Header, {
      all: "unset",
      display: "flex",
      fontFamily: "$sans"
    });
    StyledTrigger3 = styled(BaseAccordion.Trigger, {
      all: "unset",
      fontFamily: "$sans",
      flex: 1,
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      fontSize: "$md",
      lineHeight: "$md",
      color: "$on_surface_high"
    });
    StyledContent3 = styled(BaseAccordion.Content, {
      display: "contents",
      fontSize: "$md",
      fontFamily: "$sans",
      color: "$on_surface_medium",
      '&[data-state="open"]': {
        animation: `${slideDown("--radix-accordion-content-height")} 300ms cubic-bezier(0.87, 0, 0.13, 1) forwards`
      },
      '&[data-state="closed"]': {
        animation: `${slideUp("--radix-accordion-content-height")} 300ms cubic-bezier(0.87, 0, 0.13, 1) forwards`
      }
    });
    StyledChevron = styled(import_react_icons6.ChevronUpIcon, {
      color: "$on_primary_high",
      transition: "transform 300ms cubic-bezier(0.87, 0, 0.13, 1)",
      "[data-state=closed] &": { transform: "rotate(180deg)" }
    });
    AccordionRoot = StyledAccordion;
    AccordionItem = StyledItem;
    AccordionHeader = import_react24.default.forwardRef(({ children, iconStyles, css: css2, chevronID, ...props }, forwardedRef) => /* @__PURE__ */ import_react24.default.createElement(StyledHeader, { css: css2 }, /* @__PURE__ */ import_react24.default.createElement(StyledTrigger3, { ...props, ref: forwardedRef }, children, /* @__PURE__ */ import_react24.default.createElement(StyledChevron, { "data-testid": chevronID, "aria-hidden": true, css: iconStyles }))));
    AccordionContent = import_react24.default.forwardRef(
      ({ children, contentStyles, ...props }, forwardedRef) => /* @__PURE__ */ import_react24.default.createElement(StyledContent3, { ...props, ref: forwardedRef }, /* @__PURE__ */ import_react24.default.createElement(Box, { css: contentStyles }, children))
    );
  }
});

// src/Accordion/index.ts
var Accordion;
var init_Accordion2 = __esm({
  "src/Accordion/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Accordion();
    Accordion = {
      Root: AccordionRoot,
      Item: AccordionItem,
      Content: AccordionContent,
      Header: AccordionHeader
    };
  }
});

// src/Fieldset/Fieldset.tsx
var StyledFieldset, Fieldset;
var init_Fieldset = __esm({
  "src/Fieldset/Fieldset.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    StyledFieldset = styled("fieldset", {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      border: "none",
      backgroundColor: "transparent"
    });
    Fieldset = StyledFieldset;
  }
});

// src/Fieldset/index.tsx
var init_Fieldset2 = __esm({
  "src/Fieldset/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Fieldset();
  }
});

// src/Footer/Footer.tsx
var Root20, Left, Center, Right, Footer;
var init_Footer = __esm({
  "src/Footer/Footer.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Layout();
    init_Theme();
    Root20 = styled(Flex, {
      justifyContent: "space-between",
      alignItems: "center",
      py: "$4",
      position: "relative",
      height: "100%",
      "@md": { flexWrap: "wrap", gap: "$4" }
    });
    Left = styled(Flex, {
      alignItems: "center",
      position: "absolute",
      left: "$10",
      gap: "$8",
      "@md": {
        position: "unset",
        justifyContent: "center",
        w: "100%"
      }
    });
    Center = styled(Flex, {
      w: "100%",
      justifyContent: "center",
      alignItems: "center",
      gap: "$8"
    });
    Right = styled(Flex, {
      alignItems: "center",
      position: "absolute",
      right: "$10",
      gap: "$8",
      "@md": {
        display: "none"
      }
    });
    Footer = {
      Root: Root20,
      Left,
      Center,
      Right
    };
  }
});

// src/Footer/index.tsx
var init_Footer2 = __esm({
  "src/Footer/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Footer();
  }
});

// src/ReactSelect/ReactSelect.tsx
var SelectPrimitive, StyledRoot, StyledTrigger4, StyledContent4, StyledViewport, StyledItem2, StyledLabel, StyledSeparator, StyledItemIndicator, scrollButtonStyles, StyledScrollUpButton, StyledScrollDownButton, Select2;
var init_ReactSelect = __esm({
  "src/ReactSelect/ReactSelect.tsx"() {
    "use strict";
    init_cjs_shims();
    SelectPrimitive = __toESM(require("@radix-ui/react-select"));
    init_Theme();
    StyledRoot = styled(SelectPrimitive.Root, {});
    StyledTrigger4 = styled(SelectPrimitive.SelectTrigger, {
      all: "unset",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: "$2",
      padding: "$8",
      lineHeight: "$px",
      gap: "$8",
      backgroundColor: "$secondary_default",
      color: "$on_primary_high",
      fontSize: "$8",
      cursor: "pointer",
      r: "$1"
    });
    StyledContent4 = styled(SelectPrimitive.Content, {
      overflow: "hidden",
      backgroundColor: "$surface_bright",
      r: "$1",
      h: "$80"
    });
    StyledViewport = styled(SelectPrimitive.Viewport, {
      padding: "$3"
    });
    StyledItem2 = styled(SelectPrimitive.Item, {
      all: "unset",
      fontSize: "$7",
      r: "$1",
      display: "flex",
      p: "$4 $8",
      w: "$52",
      position: "relative",
      userSelect: "none",
      cursor: "pointer"
    });
    StyledLabel = styled(SelectPrimitive.Label, {
      p: "$4 $8",
      lineHeight: "$10",
      color: "$on_primary_high"
    });
    StyledSeparator = styled(SelectPrimitive.Separator, {
      height: "$px",
      backgroundColor: "$on_primary_high",
      margin: "$4",
      opacity: 0.4
    });
    StyledItemIndicator = styled(SelectPrimitive.ItemIndicator, {
      position: "absolute",
      right: "$8",
      width: "$8",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      color: "$on_primary_high"
    });
    scrollButtonStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      p: "$4",
      backgroundColor: "$surface_bright",
      color: "$on_primary_high",
      cursor: "default"
    };
    StyledScrollUpButton = styled(SelectPrimitive.ScrollUpButton, scrollButtonStyles);
    StyledScrollDownButton = styled(SelectPrimitive.ScrollDownButton, scrollButtonStyles);
    Select2 = {
      Root: StyledRoot,
      Trigger: StyledTrigger4,
      Content: StyledContent4,
      Viewport: StyledViewport,
      Item: StyledItem2,
      Label: StyledLabel,
      Separator: StyledSeparator,
      ItemIndicator: StyledItemIndicator,
      ScrollUpButton: StyledScrollUpButton,
      ScrollDownButton: StyledScrollDownButton,
      Value: SelectPrimitive.Value,
      Icon: SelectPrimitive.Icon,
      ItemText: SelectPrimitive.ItemText,
      Group: SelectPrimitive.Group
    };
  }
});

// src/ReactSelect/index.ts
var ReactSelect_exports = {};
__export(ReactSelect_exports, {
  Select: () => Select2
});
var init_ReactSelect2 = __esm({
  "src/ReactSelect/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_ReactSelect();
  }
});

// src/Tabs/Tabs.tsx
var TabsPrimitive, StyledTabsRoot, StyledList, StyledTrigger5, StyledContent5, Tabs;
var init_Tabs = __esm({
  "src/Tabs/Tabs.tsx"() {
    "use strict";
    init_cjs_shims();
    TabsPrimitive = __toESM(require("@radix-ui/react-tabs"));
    init_Theme();
    StyledTabsRoot = styled(TabsPrimitive.Root, {
      display: "flex"
    });
    StyledList = styled(TabsPrimitive.List, {
      flexShrink: 0,
      display: "flex"
    });
    StyledTrigger5 = styled(TabsPrimitive.Trigger, {
      all: "unset",
      fontFamily: "$sans",
      p: "$8",
      display: "flex",
      alignItems: "center",
      fontSize: "$sm",
      lineHeight: "$sm",
      color: "$on_surface_high",
      userSelect: "none",
      cursor: "pointer",
      '&[data-state="active"]': {
        bg: "$surface_brighter",
        r: "$1"
      }
    });
    StyledContent5 = styled(TabsPrimitive.Content, {
      flex: "1 1 0",
      padding: "$10",
      outline: "none"
    });
    Tabs = {
      Root: StyledTabsRoot,
      List: StyledList,
      Content: StyledContent5,
      Trigger: StyledTrigger5
    };
  }
});

// src/Tabs/index.tsx
var init_Tabs2 = __esm({
  "src/Tabs/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Tabs();
  }
});

// src/QRCode/QRCode.tsx
var import_react25, import_qrcode, QRCode;
var init_QRCode = __esm({
  "src/QRCode/QRCode.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react25 = __toESM(require("react"));
    import_qrcode = require("qrcode.react");
    QRCode = (props) => {
      return /* @__PURE__ */ import_react25.default.createElement(import_qrcode.QRCodeSVG, { style: { width: "100%", height: "100%" }, ...props });
    };
  }
});

// src/QRCode/index.tsx
var init_QRCode2 = __esm({
  "src/QRCode/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_QRCode();
  }
});

// src/Link/Link.tsx
var import_react26, icons, LinkComponent, Link;
var init_Link = __esm({
  "src/Link/Link.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react26 = __toESM(require("react"));
    icons = __toESM(require("@100mslive/react-icons"));
    init_Layout();
    init_Text2();
    init_Theme();
    LinkComponent = styled("a", {
      textDecoration: "none",
      display: "flex",
      alignItems: "center",
      gap: "$5",
      variants: {
        color: {
          highEmp: {
            color: "$on_surface_high",
            "&:hover": {
              color: "$on_surface_medium"
            }
          },
          primary: {
            color: "$primary_default",
            "&:hover": {
              color: "$primary_bright"
            }
          }
        }
      }
    });
    Link = ({ iconSide = "left", icon, color = "primary", children, ...rest }) => {
      const Icon4 = icon ? icons[icon] : import_react26.default.Fragment;
      const renderedIcon = icon ? /* @__PURE__ */ import_react26.default.createElement(Flex, { as: "span" }, /* @__PURE__ */ import_react26.default.createElement(Icon4, { height: 13.33, width: 13.33 }), " ") : null;
      return /* @__PURE__ */ import_react26.default.createElement(LinkComponent, { ...rest, color }, iconSide === "left" && renderedIcon, /* @__PURE__ */ import_react26.default.createElement(Text, { as: "span", variant: "body2", css: { color: "inherit" } }, children), iconSide === "right" && renderedIcon);
    };
  }
});

// src/Link/index.tsx
var init_Link2 = __esm({
  "src/Link/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Link();
  }
});

// src/Collapsible/Collapsible.tsx
var import_react_collapsible, CollapsibleRoot, CollapsibleTrigger, CollapsibleContent, Collapsible;
var init_Collapsible = __esm({
  "src/Collapsible/Collapsible.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react_collapsible = require("@radix-ui/react-collapsible");
    init_Theme();
    init_utils();
    CollapsibleRoot = styled(import_react_collapsible.Root, {});
    CollapsibleTrigger = styled(import_react_collapsible.Trigger, {
      cursor: "pointer",
      appearance: "none !important",
      "&:focus": {
        outline: "none"
      },
      "&:focus-visible": {
        boxShadow: "0 0 0 3px $colors$primary_default"
      }
    });
    CollapsibleContent = styled(import_react_collapsible.Content, {
      w: "$80",
      r: "$1",
      overflowY: "auto",
      '&[data-state="open"]': {
        animation: `${slideDown("--radix-collapsible-content-height")} 300ms cubic-bezier(0.87, 0, 0.13, 1) forwards`
      },
      '&[data-state="closed"]': {
        animation: `${slideUp("--radix-collapsible-content-height")} 300ms cubic-bezier(0.87, 0, 0.13, 1) forwards`
      }
    });
    Collapsible = {
      Root: CollapsibleRoot,
      Trigger: CollapsibleTrigger,
      Content: CollapsibleContent
    };
  }
});

// src/Collapsible/index.tsx
var init_Collapsible2 = __esm({
  "src/Collapsible/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Collapsible();
  }
});

// src/Prebuilt/components/Settings/SwitchWithLabel.tsx
var import_react27, SwitchWithLabel, SwitchWithLabel_default;
var init_SwitchWithLabel = __esm({
  "src/Prebuilt/components/Settings/SwitchWithLabel.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react27 = __toESM(require("react"));
    init_Label2();
    init_Layout();
    init_Switch2();
    SwitchWithLabel = ({
      label,
      icon,
      id,
      onChange,
      checked,
      hide = false
    }) => {
      return /* @__PURE__ */ import_react27.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            my: "$2",
            py: "$8",
            w: "100%",
            borderBottom: "1px solid $border_default",
            display: hide ? "none" : "flex"
          }
        },
        /* @__PURE__ */ import_react27.default.createElement(
          Label3,
          {
            htmlFor: id,
            css: {
              fontSize: "$md",
              fontWeight: "$semiBold",
              color: checked ? "$on_surface_high" : "$on_surface_low",
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              gap: "$8",
              flex: "1 1 0"
            }
          },
          icon,
          label
        ),
        /* @__PURE__ */ import_react27.default.createElement(Switch, { id, checked, onCheckedChange: onChange })
      );
    };
    SwitchWithLabel_default = SwitchWithLabel;
  }
});

// src/Prebuilt/components/hooks/useUserPreferences.jsx
var import_react28, import_react_use2, UserPreferencesKeys, defaultPreviewPreference, useUserPreferences;
var init_useUserPreferences = __esm({
  "src/Prebuilt/components/hooks/useUserPreferences.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react28 = require("react");
    import_react_use2 = require("react-use");
    UserPreferencesKeys = {
      PREVIEW: "preview",
      NOTIFICATIONS: "notifications",
      UI_SETTINGS: "uiSettings",
      RTMP_URLS: "rtmpUrls",
      USER_ID: "userId"
    };
    defaultPreviewPreference = {
      name: "",
      isAudioMuted: false,
      isVideoMuted: false
    };
    useUserPreferences = (key, defaultPreference) => {
      const [localStorageValue, setStorageValue] = (0, import_react_use2.useLocalStorage)(key, defaultPreference);
      const [preference, setPreference] = (0, import_react28.useState)(localStorageValue || defaultPreference);
      const changePreference = (value) => {
        setPreference(value);
        setStorageValue(value);
      };
      return [preference, changePreference];
    };
  }
});

// src/Prebuilt/components/AppData/useUISettings.js
var import_react29, import_react_sdk7, useUISettings, useSetUiSettings, useAuthToken, useUrlToEmbed, usePDFConfig, useResetPDFConfig, useResetEmbedConfig, usePinnedTrack, useSubscribedNotifications, useIsNotificationDisabled, useSetSubscribedNotifications, useIsCaptionEnabled, useSetIsCaptionEnabled, useSubscribeChatSelector, useSetSubscribedChatSelector, useSetAppDataByKey, useSetAppData, useShowPolls, usePollViewState, useIsNoiseCancellationEnabled, useSetNoiseCancellation;
var init_useUISettings = __esm({
  "src/Prebuilt/components/AppData/useUISettings.js"() {
    "use strict";
    init_cjs_shims();
    import_react29 = require("react");
    import_react_sdk7 = require("@100mslive/react-sdk");
    init_useUserPreferences();
    init_constants();
    useUISettings = (uiSettingKey) => {
      const uiSettings = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppDataByPath)(APP_DATA.uiSettings, uiSettingKey));
      return uiSettings;
    };
    useSetUiSettings = (uiSettingKey) => {
      const value = useUISettings(uiSettingKey);
      const setValue = useSetAppData({
        key1: APP_DATA.uiSettings,
        key2: uiSettingKey
      });
      return [value, setValue];
    };
    useAuthToken = () => {
      return (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppData)(APP_DATA.authToken));
    };
    useUrlToEmbed = () => {
      return (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppData)(APP_DATA.embedConfig))?.url;
    };
    usePDFConfig = () => {
      return (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppData)(APP_DATA.pdfConfig));
    };
    useResetPDFConfig = () => {
      const [, setPDFConfig] = useSetAppDataByKey(APP_DATA.pdfConfig);
      return (0, import_react29.useCallback)(() => setPDFConfig(), [setPDFConfig]);
    };
    useResetEmbedConfig = () => {
      const [, setEmbedConfig] = useSetAppDataByKey(APP_DATA.embedConfig);
      return () => setEmbedConfig();
    };
    usePinnedTrack = () => {
      const pinnedTrackId = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppData)(APP_DATA.pinnedTrackId));
      const spotlightPeerId = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectSessionStore)("spotlight" /* SPOTLIGHT */));
      const spotlightVideoTrackId = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectVideoTrackByPeerID)(spotlightPeerId))?.id;
      const spotlightAudioTrackId = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAudioTrackByPeerID)(spotlightPeerId))?.id;
      return (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectTrackByID)(pinnedTrackId || spotlightVideoTrackId || spotlightAudioTrackId));
    };
    useSubscribedNotifications = (notificationKey) => {
      const notificationPreference = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppDataByPath)(APP_DATA.subscribedNotifications, notificationKey));
      return notificationPreference;
    };
    useIsNotificationDisabled = () => {
      const notificationPreference = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppDataByPath)(APP_DATA.disableNotifications));
      return notificationPreference;
    };
    useSetSubscribedNotifications = (notificationKey) => {
      const value = useSubscribedNotifications(notificationKey);
      const setValue = useSetAppData({
        key1: APP_DATA.subscribedNotifications,
        key2: notificationKey
      });
      return [value, setValue];
    };
    useIsCaptionEnabled = () => {
      const isCaptionEnabled = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppDataByPath)(APP_DATA.caption));
      return isCaptionEnabled;
    };
    useSetIsCaptionEnabled = () => {
      const [value, setValue] = useSetAppDataByKey(APP_DATA.caption);
      return [value, setValue];
    };
    useSubscribeChatSelector = (chatSelectorKey) => {
      const chatSelectorPreference = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppDataByPath)(APP_DATA.chatSelector, chatSelectorKey));
      return chatSelectorPreference;
    };
    useSetSubscribedChatSelector = (chatSelectorKey) => {
      const value = useSubscribeChatSelector(chatSelectorKey);
      const setValue = useSetAppData({
        key1: APP_DATA.chatSelector,
        key2: chatSelectorKey
      });
      return [value, setValue];
    };
    useSetAppDataByKey = (appDataKey) => {
      const value = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppData)(appDataKey));
      const actions = (0, import_react_sdk7.useHMSActions)();
      const setValue = (0, import_react29.useCallback)(
        (value2) => {
          actions.setAppData(appDataKey, value2);
        },
        [actions, appDataKey]
      );
      return [value, setValue];
    };
    useSetAppData = ({ key1, key2 }) => {
      const actions = (0, import_react_sdk7.useHMSActions)();
      const store = (0, import_react_sdk7.useHMSVanillaStore)();
      const [, setPreferences] = useUserPreferences(UserPreferencesKeys.UI_SETTINGS);
      const setValue = (0, import_react29.useCallback)(
        (value) => {
          if (!key1) {
            return;
          }
          actions.setAppData(
            key1,
            key2 ? {
              [key2]: value
            } : value,
            true
          );
          const appData = store.getState((0, import_react_sdk7.selectAppData)());
          setPreferences({
            ...appData.uiSettings,
            [UI_SETTINGS.isAudioOnly]: void 0,
            subscribedNotifications: appData.subscribedNotifications
          });
        },
        [actions, key1, key2, store, setPreferences]
      );
      return setValue;
    };
    useShowPolls = () => {
      const permissions = (0, import_react_sdk7.useHMSStore)(import_react_sdk7.selectPermissions);
      const polls = (0, import_react_sdk7.useHMSStore)(import_react_sdk7.selectPolls);
      const showPolls = (0, import_react29.useMemo)(() => {
        return permissions?.pollWrite || permissions?.pollRead && polls?.length > 0;
      }, [permissions?.pollRead, permissions?.pollWrite, polls?.length]);
      return { showPolls };
    };
    usePollViewState = () => {
      const [pollState, setPollState] = useSetAppDataByKey(APP_DATA.pollState);
      const setPollView = (0, import_react29.useCallback)(
        (view) => {
          setPollState({
            [POLL_STATE.pollInView]: pollState?.pollInView,
            [POLL_STATE.view]: view
          });
        },
        [pollState?.pollInView, setPollState]
      );
      return {
        setPollState,
        setPollView,
        pollInView: pollState?.pollInView,
        view: pollState?.view
      };
    };
    useIsNoiseCancellationEnabled = () => {
      const isNoiseCancellationEnabled = (0, import_react_sdk7.useHMSStore)((0, import_react_sdk7.selectAppDataByPath)(APP_DATA.noiseCancellation));
      return isNoiseCancellationEnabled;
    };
    useSetNoiseCancellation = () => {
      const [isNoiseCancellationEnabled, setNoiseCancellationEnabled] = useSetAppDataByKey(APP_DATA.noiseCancellation);
      return [isNoiseCancellationEnabled, setNoiseCancellationEnabled];
    };
  }
});

// src/Prebuilt/components/Settings/common.ts
var settingOverflow, settingContent;
var init_common = __esm({
  "src/Prebuilt/components/Settings/common.ts"() {
    "use strict";
    init_cjs_shims();
    init_src();
    settingOverflow = css({
      flex: "1 1 0",
      pr: "$12",
      mr: "-$12",
      overflowY: "auto"
    });
    settingContent = css({
      display: "flex",
      flexDirection: "column",
      "&[hidden]": {
        display: "none"
      }
    });
  }
});

// src/Prebuilt/components/Settings/LayoutSettings.tsx
var import_react30, import_react_sdk8, import_react_icons7, LayoutMode, LayoutModeIconMapping, LayoutSettings;
var init_LayoutSettings = __esm({
  "src/Prebuilt/components/Settings/LayoutSettings.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react30 = __toESM(require("react"));
    import_react_sdk8 = require("@100mslive/react-sdk");
    import_react_icons7 = require("@100mslive/react-icons");
    init_src();
    init_SwitchWithLabel();
    init_useUISettings();
    init_common();
    init_constants();
    LayoutMode = {
      SIDEBAR: "Sidebar",
      GALLERY: "Gallery",
      SPOTLIGHT: "Spotlight"
    };
    LayoutModeIconMapping = {
      [LayoutMode.GALLERY]: /* @__PURE__ */ import_react30.default.createElement(import_react_icons7.GalleryIcon, null),
      [LayoutMode.SIDEBAR]: /* @__PURE__ */ import_react30.default.createElement(import_react_icons7.SidebarIcon, null),
      [LayoutMode.SPOTLIGHT]: /* @__PURE__ */ import_react30.default.createElement(import_react_icons7.PersonRectangleIcon, null)
    };
    LayoutSettings = () => {
      const hmsActions = (0, import_react_sdk8.useHMSActions)();
      const isLocalVideoEnabled = (0, import_react_sdk8.useHMSStore)(import_react_sdk8.selectIsLocalVideoEnabled);
      const isLocalScreenShared = (0, import_react_sdk8.useHMSStore)(import_react_sdk8.selectIsLocalScreenShared);
      const [{ isAudioOnly, maxTileCount, mirrorLocalVideo }, setUISettings] = useSetUiSettings();
      const toggleIsAudioOnly = (0, import_react30.useCallback)(
        async (isAudioOnlyModeOn) => {
          if (isAudioOnlyModeOn) {
            isLocalVideoEnabled && await hmsActions.setLocalVideoEnabled(false);
            isLocalScreenShared && await hmsActions.setScreenShareEnabled(false);
          }
          setUISettings({ [UI_SETTINGS.isAudioOnly]: isAudioOnlyModeOn });
        },
        [hmsActions, isLocalVideoEnabled, isLocalScreenShared, setUISettings]
      );
      return /* @__PURE__ */ import_react30.default.createElement(Box, { className: settingOverflow() }, /* @__PURE__ */ import_react30.default.createElement(Flex, { align: "center", css: { w: "100%", my: "$2", py: "$8", "@md": { display: "none" } } }, /* @__PURE__ */ import_react30.default.createElement(Text, { variant: "md", css: { fontWeight: "$semiBold" } }, "Tiles In View(", maxTileCount, ")"), /* @__PURE__ */ import_react30.default.createElement(Flex, { justify: "end", css: { flex: "1 1 0" } }, /* @__PURE__ */ import_react30.default.createElement(
        Slider,
        {
          step: 1,
          value: [maxTileCount],
          min: 1,
          max: 49,
          onValueChange: (e) => {
            setUISettings({ [UI_SETTINGS.maxTileCount]: e[0] });
          },
          css: { w: "70%" }
        }
      ))), /* @__PURE__ */ import_react30.default.createElement(SwitchWithLabel_default, { label: "Audio Only Mode", id: "audioOnlyMode", checked: isAudioOnly, onChange: toggleIsAudioOnly }), /* @__PURE__ */ import_react30.default.createElement(
        SwitchWithLabel_default,
        {
          label: "Mirror Local Video",
          id: "mirrorMode",
          checked: mirrorLocalVideo,
          onChange: (value) => {
            setUISettings({
              [UI_SETTINGS.mirrorLocalVideo]: value
            });
          }
        }
      ));
    };
  }
});

// src/Prebuilt/provider/roomLayoutProvider/constants/index.ts
var import_join_form, defaultLayout;
var init_constants2 = __esm({
  "src/Prebuilt/provider/roomLayoutProvider/constants/index.ts"() {
    "use strict";
    init_cjs_shims();
    import_join_form = require("@100mslive/types-prebuilt/elements/join_form");
    defaultLayout = {
      id: "",
      role_id: "",
      template_id: "",
      app_id: "",
      typography: {
        font_family: "Inter"
      },
      themes: [],
      options: {},
      screens: {
        preview: {
          default: {
            elements: {
              preview_header: {
                title: "Get Started",
                sub_title: "Setup your audio and video before joining"
              },
              join_form: {
                join_btn_type: import_join_form.JoinForm_JoinBtnType.JOIN_BTN_TYPE_JOIN_ONLY,
                join_btn_label: "Join Now",
                go_live_btn_label: "Go Live"
              }
            }
          }
        },
        conferencing: {
          default: {
            elements: {
              chat: {
                public_chat_enabled: true,
                private_chat_enabled: true,
                chat_title: "Chat",
                allow_pinning_messages: true,
                message_placeholder: "Send a message...",
                roles_whitelist: [],
                real_time_controls: {
                  can_disable_chat: true,
                  can_block_user: true,
                  can_hide_message: true
                }
              },
              participant_list: {},
              video_tile_layout: {
                grid: {
                  enable_local_tile_inset: true,
                  prominent_roles: [],
                  enable_spotlighting_peer: true
                }
              },
              emoji_reactions: {}
            }
          }
        },
        leave: {}
      }
    };
  }
});

// src/Prebuilt/provider/roomLayoutProvider/hooks/useFetchRoomLayout.ts
var import_react31, fetchWithRetry, useFetchRoomLayout;
var init_useFetchRoomLayout = __esm({
  "src/Prebuilt/provider/roomLayoutProvider/hooks/useFetchRoomLayout.ts"() {
    "use strict";
    init_cjs_shims();
    import_react31 = require("react");
    init_constants2();
    fetchWithRetry = async (url = "", options = {}) => {
      const MAX_RETRIES = 4;
      let error = Error("something went wrong");
      for (let i = 0; i < MAX_RETRIES; i++) {
        try {
          return await fetch(url, options);
        } catch (err) {
          error = err;
        }
      }
      console.error("Fetch failed after max retries", { url, options });
      throw error;
    };
    useFetchRoomLayout = ({
      endpoint = "",
      authToken = ""
    }) => {
      const [layout, setLayout] = (0, import_react31.useState)(void 0);
      const layoutResp = (0, import_react31.useRef)();
      const originalLayout = (0, import_react31.useRef)();
      const isFetchInProgress = (0, import_react31.useRef)(false);
      const setOriginalLayout = (0, import_react31.useCallback)(() => setLayout(originalLayout.current), []);
      const updateRoomLayoutForRole = (0, import_react31.useCallback)((role) => {
        if (!layoutResp.current) {
          return;
        }
        const [layout2] = (layoutResp.current?.data || []).filter((layout3) => layout3.role === role);
        if (layout2) {
          setLayout(layout2);
        }
      }, []);
      (0, import_react31.useEffect)(() => {
        (async () => {
          if (isFetchInProgress.current || !authToken) {
            return;
          }
          isFetchInProgress.current = true;
          try {
            const resp = await fetchWithRetry(endpoint || "https://api.100ms.live/v2/layouts/ui", {
              headers: {
                Authorization: `Bearer ${authToken}`
              }
            });
            layoutResp.current = await resp.json();
          } catch (e) {
            console.error("[Room Layout API]: Failed to fetch / process room layout. Resorting to default layout.", e);
            layoutResp.current = {
              data: [defaultLayout]
            };
          }
          let layoutForRole = layoutResp.current?.data?.[0];
          if (!layoutForRole) {
            console.error(
              "[Room Layout API]: Unable to figure out room layout from API response. Resorting to default layout."
            );
            layoutForRole = defaultLayout;
          }
          const layout2 = layoutForRole;
          if (!originalLayout.current) {
            originalLayout.current = layout2;
          }
          setLayout(layout2);
          isFetchInProgress.current = false;
        })();
      }, [authToken, endpoint]);
      return { layout, updateRoomLayoutForRole, setOriginalLayout };
    };
  }
});

// src/Prebuilt/provider/roomLayoutProvider/index.tsx
function customizer(objValue, srcValue) {
  if ((0, import_lodash2.isArray)(objValue) || (0, import_lodash2.isArray)(srcValue)) {
    return srcValue;
  }
  return void 0;
}
var import_react32, import_lodash2, RoomLayoutContext, RoomLayoutProvider, useRoomLayout, useUpdateRoomLayout, useSetOriginalLayout;
var init_roomLayoutProvider = __esm({
  "src/Prebuilt/provider/roomLayoutProvider/index.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react32 = __toESM(require("react"));
    import_lodash2 = require("lodash");
    init_useUISettings();
    init_useFetchRoomLayout();
    RoomLayoutContext = import_react32.default.createContext(void 0);
    RoomLayoutProvider = ({
      children,
      roomLayoutEndpoint,
      overrideLayout
    }) => {
      const authToken = useAuthToken();
      const { layout, updateRoomLayoutForRole, setOriginalLayout } = useFetchRoomLayout({
        authToken,
        endpoint: roomLayoutEndpoint
      });
      const mergedLayout = authToken && layout ? (0, import_lodash2.mergeWith)(layout, overrideLayout, customizer) : layout;
      return /* @__PURE__ */ import_react32.default.createElement(RoomLayoutContext.Provider, { value: { layout: mergedLayout, updateRoomLayoutForRole, setOriginalLayout } }, children);
    };
    useRoomLayout = () => import_react32.default.useContext(RoomLayoutContext)?.layout;
    useUpdateRoomLayout = () => import_react32.default.useContext(RoomLayoutContext)?.updateRoomLayoutForRole;
    useSetOriginalLayout = () => import_react32.default.useContext(RoomLayoutContext)?.setOriginalLayout;
  }
});

// src/Prebuilt/common/utils.js
var getMetadata, isScreenshareSupported, getFormattedCount, formatTime, compareArrays, checkCorrectAnswer, isValidTextInput, calculateAvatarAndAttribBoxSize, isMobileUserAgent, getPeerResponses, getIndexToShow;
var init_utils2 = __esm({
  "src/Prebuilt/common/utils.js"() {
    "use strict";
    init_cjs_shims();
    getMetadata = (metadataString) => {
      try {
        return !metadataString ? {} : JSON.parse(metadataString);
      } catch (error) {
        return {};
      }
    };
    isScreenshareSupported = () => {
      return typeof navigator.mediaDevices.getDisplayMedia !== "undefined";
    };
    getFormattedCount = (num) => {
      const formatter = new Intl.NumberFormat("en", { notation: "compact", maximumFractionDigits: 2 });
      const formattedNum = formatter.format(num);
      return formattedNum;
    };
    formatTime = (timeInSeconds) => {
      timeInSeconds = Math.floor(timeInSeconds / 1e3);
      const hours = Math.floor(timeInSeconds / 3600);
      const minutes = Math.floor(timeInSeconds % 3600 / 60);
      const seconds = timeInSeconds % 60;
      const hour = hours !== 0 ? `${hours < 10 ? "0" : ""}${hours}:` : "";
      return `${hour}${minutes < 10 ? "0" : ""}${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
    };
    compareArrays = (a, b) => {
      if (a.length !== b.length) return false;
      else {
        for (var i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
    };
    checkCorrectAnswer = (answer, localPeerResponse, type) => {
      if (type === "single-choice" /* SINGLE_CHOICE */) {
        return answer?.option === localPeerResponse?.option;
      } else if (type === "multiple-choice" /* MULTIPLE_CHOICE */) {
        return answer?.options && localPeerResponse?.options && compareArrays(answer?.options, localPeerResponse?.options);
      }
    };
    isValidTextInput = (text, minLength = 1, maxLength = 1024) => {
      return text && text.length >= minLength && text.length <= maxLength;
    };
    calculateAvatarAndAttribBoxSize = (calculatedWidth, calculatedHeight) => {
      if (!calculatedWidth || !calculatedHeight) {
        return [void 0, void 0];
      }
      let avatarSize = "large";
      if (calculatedWidth <= 150 || calculatedHeight <= 150) {
        avatarSize = "small";
      } else if (calculatedWidth <= 300 || calculatedHeight <= 300) {
        avatarSize = "medium";
      }
      let attribBoxSize = "medium";
      if (calculatedWidth <= 180 || calculatedHeight <= 180) {
        attribBoxSize = "small";
      }
      return [avatarSize, attribBoxSize];
    };
    isMobileUserAgent = /Mobi|Android|iPhone/i.test(navigator.userAgent);
    getPeerResponses = (questions, peerid, userid) => {
      return questions.map(
        (question) => question.responses?.filter(
          (response) => response && (response.peer?.peerid === peerid || response.peer?.userid === userid) && !response.skipped
        )
      );
    };
    getIndexToShow = (responses) => {
      let lastAttemptedIndex = 0;
      Object.keys(responses).forEach((key) => {
        const keyNum = parseInt(key);
        if (keyNum > lastAttemptedIndex && responses[key]) {
          lastAttemptedIndex = keyNum;
        }
      });
      return lastAttemptedIndex + 1;
    };
  }
});

// src/Prebuilt/provider/roomLayoutProvider/hooks/useRoomLayoutScreen.ts
function useRoomLayoutScreen({
  screen
}) {
  const roomLayout = useRoomLayout();
  const screenProps = roomLayout?.screens?.[screen];
  return screenProps;
}
function useRoomLayoutPreviewScreen() {
  const screenProps = useRoomLayoutScreen({ screen: "preview" });
  const isPreviewScreenEnabled = !!screenProps && !screenProps?.skip_preview_screen;
  let elements;
  let screenType;
  if (isPreviewScreenEnabled) {
    screenType = Object.keys(screenProps).filter((key) => key !== "skip_preview_screen")[0];
    elements = screenProps[screenType]?.elements;
  }
  return {
    isPreviewScreenEnabled,
    elements,
    screenType
  };
}
function useRoomLayoutConferencingScreen() {
  const screenProps = useRoomLayoutScreen({ screen: "conferencing" }) || {};
  const screenType = Object.keys(screenProps)[0];
  const elements = screenProps[screenType]?.elements;
  const hideSections = screenProps[screenType]?.hideSections || [];
  return {
    hideSections,
    elements,
    screenType
  };
}
function useRoomLayoutLeaveScreen() {
  const screenProps = useRoomLayoutScreen({ screen: "leave" });
  const isLeaveScreenEnabled = !!screenProps;
  return {
    isLeaveScreenEnabled,
    feedback: screenProps?.default?.elements?.feedback
  };
}
function useRoomLayoutHeader() {
  const { elements } = useRoomLayoutConferencingScreen();
  const { isRecordingOn } = (0, import_react_sdk9.useRecordingStreaming)();
  const peerCount = (0, import_react_sdk9.useHMSStore)(import_react_sdk9.selectPeerCount);
  const sessionStartedAt = (0, import_react_sdk9.useHMSStore)(import_react_sdk9.selectRoomStartTime);
  const hlsState = (0, import_react_sdk9.useHMSStore)(import_react_sdk9.selectHLSState);
  const details = (0, import_react33.useMemo)(() => {
    const details2 = [];
    if (hlsState?.variants[0]?.["startedAt"]) {
      details2.push(`${getFormattedCount(peerCount)} watching`);
      details2.push(hlsState.variants[0]["startedAt"]);
    } else if (sessionStartedAt) {
      details2.push(sessionStartedAt);
    }
    if (isRecordingOn) {
      details2.push("Recording");
    }
    return details2;
  }, [hlsState?.variants, isRecordingOn, peerCount, sessionStartedAt]);
  return {
    title: elements.header?.title || "",
    description: elements.header?.description || "",
    details
  };
}
var import_react33, import_react_sdk9;
var init_useRoomLayoutScreen = __esm({
  "src/Prebuilt/provider/roomLayoutProvider/hooks/useRoomLayoutScreen.ts"() {
    "use strict";
    init_cjs_shims();
    import_react33 = require("react");
    import_react_sdk9 = require("@100mslive/react-sdk");
    init_roomLayoutProvider();
    init_utils2();
  }
});

// src/Prebuilt/components/AppData/useSidepane.js
var import_react34, import_ts_pattern, import_react_sdk10, useIsSidepaneTypeOpen, useSidepaneState, useSidepaneToggle, usePollViewToggle, useSidepaneReset;
var init_useSidepane = __esm({
  "src/Prebuilt/components/AppData/useSidepane.js"() {
    "use strict";
    init_cjs_shims();
    import_react34 = require("react");
    import_ts_pattern = require("ts-pattern");
    import_react_sdk10 = require("@100mslive/react-sdk");
    init_useUISettings();
    init_constants();
    useIsSidepaneTypeOpen = (sidepaneType) => {
      if (!sidepaneType) {
        throw Error("Pass one of the side pane options");
      }
      return (0, import_react_sdk10.useHMSStore)((0, import_react_sdk10.selectAppData)(APP_DATA.sidePane)) === sidepaneType;
    };
    useSidepaneState = () => {
      const sidePane = (0, import_react_sdk10.useHMSStore)((0, import_react_sdk10.selectAppData)(APP_DATA.sidePane));
      return sidePane;
    };
    useSidepaneToggle = (sidepaneType) => {
      const hmsActions = (0, import_react_sdk10.useHMSActions)();
      const vanillaStore = (0, import_react_sdk10.useHMSVanillaStore)();
      const toggleSidepane = (0, import_react34.useCallback)(() => {
        const isOpen = vanillaStore.getState((0, import_react_sdk10.selectAppData)(APP_DATA.sidePane)) === sidepaneType;
        hmsActions.setAppData(APP_DATA.sidePane, !isOpen ? sidepaneType : "");
      }, [vanillaStore, hmsActions, sidepaneType]);
      return toggleSidepane;
    };
    usePollViewToggle = () => {
      const hmsActions = (0, import_react_sdk10.useHMSActions)();
      const { view, setPollState } = usePollViewState();
      const isOpen = useSidepaneState() === SIDE_PANE_OPTIONS.POLLS;
      const togglePollView = (0, import_react34.useCallback)(
        (id) => {
          (0, import_ts_pattern.match)({ id, isOpen, view }).with(
            {
              id: import_ts_pattern.P.string
            },
            () => {
              setPollState({
                [POLL_STATE.pollInView]: id,
                [POLL_STATE.view]: POLL_VIEWS.VOTE
              });
              hmsActions.setAppData(APP_DATA.sidePane, SIDE_PANE_OPTIONS.POLLS);
            }
          ).with(
            {
              isOpen: true,
              view: import_ts_pattern.P.when((view2) => !!view2)
            },
            () => {
              setPollState({
                [POLL_STATE.pollInView]: void 0,
                [POLL_STATE.view]: null
              });
              hmsActions.setAppData(APP_DATA.sidePane, "");
            }
          ).otherwise(() => {
            setPollState({
              [POLL_STATE.pollInView]: void 0,
              [POLL_STATE.view]: POLL_VIEWS.CREATE_POLL_QUIZ
            });
            hmsActions.setAppData(APP_DATA.sidePane, SIDE_PANE_OPTIONS.POLLS);
          });
        },
        [hmsActions, view, setPollState, isOpen]
      );
      return togglePollView;
    };
    useSidepaneReset = () => {
      const hmsActions = (0, import_react_sdk10.useHMSActions)();
      const resetSidepane = (0, import_react34.useCallback)(() => {
        hmsActions.setAppData(APP_DATA.sidePane, "");
        hmsActions.setAppData(APP_DATA.pollInView, "");
      }, [hmsActions]);
      return resetSidepane;
    };
  }
});

// src/Prebuilt/components/MoreSettings/constants.ts
var trackSourceOptions, trackTypeOptions, DEFAULT_TILES_IN_VIEW;
var init_constants3 = __esm({
  "src/Prebuilt/components/MoreSettings/constants.ts"() {
    "use strict";
    init_cjs_shims();
    trackSourceOptions = [
      { label: "All Track Sources", value: "" },
      { label: "regular", value: "regular" },
      { label: "screen", value: "screen" },
      { label: "audioplaylist", value: "audioplaylist" },
      { label: "videoplaylist", value: "videoplaylist" }
    ];
    trackTypeOptions = [
      { label: "All Track Types", value: "" },
      { label: "audio", value: "audio" },
      { label: "video", value: "video" }
    ];
    DEFAULT_TILES_IN_VIEW = { MWEB: 4, DESKTOP: 9 };
  }
});

// src/Prebuilt/components/AppData/AppData.tsx
var import_react35, import_react_use3, import_react_sdk11, initialAppData, AppData, ResetStreamingStart;
var init_AppData = __esm({
  "src/Prebuilt/components/AppData/AppData.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react35 = __toESM(require("react"));
    import_react_use3 = require("react-use");
    import_react_sdk11 = require("@100mslive/react-sdk");
    init_Theme();
    init_LayoutSettings();
    init_useRoomLayoutScreen();
    init_useUserPreferences();
    init_useSidepane();
    init_useUISettings();
    init_constants();
    init_constants3();
    initialAppData = {
      [APP_DATA.uiSettings]: {
        [UI_SETTINGS.isAudioOnly]: false,
        [UI_SETTINGS.maxTileCount]: 9,
        [UI_SETTINGS.showStatsOnTiles]: false,
        [UI_SETTINGS.enableAmbientMusic]: false,
        [UI_SETTINGS.uiViewMode]: UI_MODE_GRID,
        [UI_SETTINGS.mirrorLocalVideo]: true,
        [UI_SETTINGS.layoutMode]: LayoutMode.GALLERY
      },
      [APP_DATA.subscribedNotifications]: {
        PEER_JOINED: false,
        PEER_LEFT: false,
        NEW_MESSAGE: true,
        ERROR: true,
        METADATA_UPDATED: true
      },
      [APP_DATA.chatOpen]: false,
      [APP_DATA.chatSelector]: {
        [CHAT_SELECTOR.ROLE]: "",
        [CHAT_SELECTOR.PEER]: {}
      },
      [APP_DATA.chatDraft]: "",
      [APP_DATA.sidePane]: "",
      [APP_DATA.sheet]: "",
      [APP_DATA.hlsStarted]: false,
      [APP_DATA.rtmpStarted]: false,
      [APP_DATA.recordingStarted]: false,
      [APP_DATA.dropdownList]: [],
      [APP_DATA.authToken]: "",
      [APP_DATA.minimiseInset]: false,
      [APP_DATA.activeScreensharePeerId]: "",
      [APP_DATA.disableNotifications]: false,
      [APP_DATA.loadingEffects]: false,
      [APP_DATA.background]: "none",
      [APP_DATA.pollState]: {
        [POLL_STATE.pollInView]: "",
        [POLL_STATE.view]: ""
      },
      // by default on because of on demand now, for beam disabled
      [APP_DATA.caption]: false,
      [APP_DATA.noiseCancellation]: false
    };
    AppData = import_react35.default.memo(() => {
      const hmsActions = (0, import_react_sdk11.useHMSActions)();
      const [preferences = {}] = useUserPreferences(UserPreferencesKeys.UI_SETTINGS);
      const appData = (0, import_react_sdk11.useHMSStore)(import_react_sdk11.selectFullAppData);
      const { elements } = useRoomLayoutConferencingScreen();
      const toggleVB = useSidepaneToggle(SIDE_PANE_OPTIONS.VB);
      const { isLocalVideoEnabled } = (0, import_react_sdk11.useAVToggle)();
      const sidepaneOpenedRef = (0, import_react35.useRef)(false);
      const [, setNoiseCancellationEnabled] = useSetNoiseCancellation();
      const isMobile = (0, import_react_use3.useMedia)(config.media.md);
      (0, import_react35.useEffect)(() => {
        if (elements?.noise_cancellation?.enabled_by_default) {
          setNoiseCancellationEnabled(true);
        }
      }, [elements?.noise_cancellation?.enabled_by_default, setNoiseCancellationEnabled]);
      const defaultMediaURL = (0, import_react35.useMemo)(() => {
        const media = elements?.virtual_background?.background_media || [];
        for (let i = 0; i < media.length; i++) {
          if (media[i].default && media[i].url) {
            return media[i].url;
          }
        }
        return "";
      }, [elements?.virtual_background?.background_media]);
      (0, import_react35.useEffect)(() => {
        hmsActions.initAppData({
          ...initialAppData,
          ...appData
        });
        hmsActions.setFrameworkInfo({
          type: "react-web",
          isPrebuilt: true,
          version: import_react35.default.version
        });
      }, [hmsActions]);
      (0, import_react35.useEffect)(() => {
        const uiSettings = preferences || {};
        const updatedSettings = {
          ...uiSettings,
          [UI_SETTINGS.isAudioOnly]: void 0,
          [UI_SETTINGS.uiViewMode]: uiSettings.uiViewMode || UI_MODE_GRID
        };
        hmsActions.setAppData(APP_DATA.uiSettings, updatedSettings, true);
      }, [hmsActions, preferences]);
      (0, import_react35.useEffect)(() => {
        hmsActions.setAppData(
          APP_DATA.uiSettings,
          {
            [UI_SETTINGS.maxTileCount]: isMobile ? DEFAULT_TILES_IN_VIEW.MWEB : Number(elements?.video_tile_layout?.grid?.tiles_in_view) || DEFAULT_TILES_IN_VIEW.DESKTOP
          },
          true
        );
      }, [hmsActions, isMobile, elements?.video_tile_layout?.grid?.tiles_in_view]);
      (0, import_react35.useEffect)(() => {
        if (!preferences.subscribedNotifications) {
          return;
        }
        hmsActions.setAppData(APP_DATA.subscribedNotifications, preferences.subscribedNotifications, true);
      }, [preferences.subscribedNotifications, hmsActions]);
      (0, import_react35.useEffect)(() => {
        if (defaultMediaURL && !sidepaneOpenedRef.current && isLocalVideoEnabled) {
          hmsActions.setAppData(APP_DATA.background, defaultMediaURL);
          sidepaneOpenedRef.current = true;
          toggleVB();
        }
      }, [hmsActions, toggleVB, isLocalVideoEnabled, defaultMediaURL]);
      return /* @__PURE__ */ import_react35.default.createElement(ResetStreamingStart, null);
    });
    ResetStreamingStart = () => {
      const { isHLSRunning, isRTMPRunning, isBrowserRecordingOn } = (0, import_react_sdk11.useRecordingStreaming)();
      const hlsError = (0, import_react_sdk11.useHMSStore)(import_react_sdk11.selectHLSState).error;
      const rtmpError = (0, import_react_sdk11.useHMSStore)(import_react_sdk11.selectRTMPState).error;
      const roomState = (0, import_react_sdk11.useHMSStore)(import_react_sdk11.selectRoomState);
      const [hlsStarted, setHLSStarted] = useSetAppDataByKey(APP_DATA.hlsStarted);
      const [recordingStarted, setRecordingStarted] = useSetAppDataByKey(APP_DATA.recordingStarted);
      const [rtmpStarted, setRTMPStarted] = useSetAppDataByKey(APP_DATA.rtmpStarted);
      const toggleStreaming = useSidepaneToggle(SIDE_PANE_OPTIONS.STREAMING);
      const isStreamingOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.STREAMING);
      (0, import_react35.useEffect)(() => {
        if (isBrowserRecordingOn && recordingStarted) {
          setRecordingStarted(false);
        }
      }, [isBrowserRecordingOn, recordingStarted, setRecordingStarted]);
      (0, import_react35.useEffect)(() => {
        if (roomState === import_react_sdk11.HMSRoomState.Disconnected) {
          setHLSStarted(false);
          setRecordingStarted(false);
          setRTMPStarted(false);
        }
      }, [roomState, setHLSStarted, setRTMPStarted, setRecordingStarted]);
      (0, import_react35.useEffect)(() => {
        if (isHLSRunning || hlsError) {
          if (hlsStarted) {
            setHLSStarted(false);
            if (isStreamingOpen) {
              toggleStreaming();
            }
          }
        }
      }, [isHLSRunning, hlsStarted, setHLSStarted, hlsError, isStreamingOpen, toggleStreaming]);
      (0, import_react35.useEffect)(() => {
        if (isRTMPRunning || rtmpError || isBrowserRecordingOn) {
          if (rtmpStarted) {
            setRTMPStarted(false);
            if (isStreamingOpen) {
              toggleStreaming();
            }
          }
        }
      }, [isRTMPRunning, setRTMPStarted, rtmpStarted, rtmpError, isBrowserRecordingOn, isStreamingOpen, toggleStreaming]);
      return null;
    };
  }
});

// src/Prebuilt/AppContext.tsx
var import_react36, HMSPrebuiltContext, useHMSPrebuiltContext;
var init_AppContext = __esm({
  "src/Prebuilt/AppContext.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react36 = __toESM(require("react"));
    init_constants();
    HMSPrebuiltContext = import_react36.default.createContext({
      roomCode: "",
      userName: "",
      userId: "",
      containerSelector: DEFAULT_PORTAL_CONTAINER,
      endpoints: {},
      onLeave: void 0,
      onJoin: void 0
    });
    HMSPrebuiltContext.displayName = "HMSPrebuiltContext";
    useHMSPrebuiltContext = () => {
      const context = (0, import_react36.useContext)(HMSPrebuiltContext);
      if (!context) {
        throw Error("Make sure HMSPrebuiltContext.Provider is present at the top level of your application");
      }
      return context;
    };
  }
});

// src/Prebuilt/components/VirtualBackground/VBHandler.tsx
var import_hmsvbplugin, import_react_sdk12, VBPlugin, VBHandler;
var init_VBHandler = __esm({
  "src/Prebuilt/components/VirtualBackground/VBHandler.tsx"() {
    "use strict";
    init_cjs_shims();
    import_hmsvbplugin = require("@100mslive/hms-virtual-background/hmsvbplugin");
    import_react_sdk12 = require("@100mslive/react-sdk");
    init_constants();
    VBPlugin = class {
      hmsPlugin;
      effectsPlugin;
      initialisePlugin = async (effectsSDKKey, onInit) => {
        if (this.getVBObject()) {
          return;
        }
        if (effectsSDKKey) {
          try {
            const effects = await import("@100mslive/hms-virtual-background/hmseffectsplugin");
            this.effectsPlugin = new effects.HMSEffectsPlugin(effectsSDKKey, onInit);
          } catch (error) {
            console.error("Failed to initialise HMSEffectsPlugin:", error, "Using HMSVBPlugin");
            this.hmsPlugin = new import_hmsvbplugin.HMSVBPlugin(import_hmsvbplugin.HMSVirtualBackgroundTypes.NONE, import_hmsvbplugin.HMSVirtualBackgroundTypes.NONE);
          }
        } else {
          this.hmsPlugin = new import_hmsvbplugin.HMSVBPlugin(import_hmsvbplugin.HMSVirtualBackgroundTypes.NONE, import_hmsvbplugin.HMSVirtualBackgroundTypes.NONE);
        }
      };
      getBackground = () => {
        if (this.effectsPlugin) {
          return this.effectsPlugin?.getBackground();
        } else {
          const background = this.hmsPlugin?.getBackground();
          return background?.src || background;
        }
      };
      getBlurAmount = () => {
        if (this.effectsPlugin) {
          return this.effectsPlugin.getBlurAmount();
        } else {
          return this.hmsPlugin?.getBackground() === import_hmsvbplugin.HMSVirtualBackgroundTypes.BLUR ? 1 : 0;
        }
      };
      getVBObject = () => {
        return this.effectsPlugin || this.hmsPlugin;
      };
      getName = () => {
        return this.effectsPlugin ? this.effectsPlugin?.getName() : this.hmsPlugin?.getName();
      };
      setBlur = async (blurPower) => {
        if (this.effectsPlugin) {
          this.effectsPlugin?.setBlur(blurPower);
        } else {
          await this.hmsPlugin?.setBackground(import_hmsvbplugin.HMSVirtualBackgroundTypes.BLUR, import_hmsvbplugin.HMSVirtualBackgroundTypes.BLUR);
        }
      };
      setBackground = async (mediaURL) => {
        if (this.effectsPlugin) {
          this.effectsPlugin?.setBackground(mediaURL);
        } else {
          const img = document.createElement("img");
          let retries = 0;
          const MAX_RETRIES = 3;
          img.alt = "VB";
          img.src = mediaURL;
          try {
            await this.hmsPlugin?.setBackground(img, import_hmsvbplugin.HMSVirtualBackgroundTypes.IMAGE);
          } catch (e) {
            console.error(e);
            if (retries++ < MAX_RETRIES) {
              await this.hmsPlugin?.setBackground(img, import_hmsvbplugin.HMSVirtualBackgroundTypes.IMAGE);
            }
          }
        }
      };
      setPreset = async (preset) => {
        if (this.effectsPlugin) {
          await this.effectsPlugin.setPreset(preset);
        }
      };
      getPreset = () => {
        return this.effectsPlugin?.getPreset() || "";
      };
      removeEffects = async () => {
        if (this.effectsPlugin) {
          this.effectsPlugin?.removeEffects();
        } else {
          await this.hmsPlugin?.setBackground(import_hmsvbplugin.HMSVirtualBackgroundTypes.NONE, import_hmsvbplugin.HMSVirtualBackgroundTypes.NONE);
        }
      };
      reset = () => {
        this.effectsPlugin = void 0;
        this.hmsPlugin = void 0;
      };
      isEffectsSupported = () => {
        if (!isSafari) {
          return true;
        }
        const browserVersion = import_react_sdk12.parsedUserAgent?.getBrowser()?.version || "16";
        if (browserVersion && parseInt(browserVersion.split(".")[0]) < 17) {
          return false;
        }
        return true;
      };
    };
    VBHandler = new VBPlugin();
  }
});

// src/Prebuilt/components/PIP/pipUtils.js
function setPIPCanvasColors() {
  if (!CANVAS_FILL_COLOR) {
    CANVAS_FILL_COLOR = window.getComputedStyle(document.documentElement).getPropertyValue("--hms-ui-colors-surface_bright");
  }
  if (!CANVAS_STROKE_COLOR) {
    CANVAS_STROKE_COLOR = window.getComputedStyle(document.documentElement).getPropertyValue("--hms-ui-colors-border_bright");
  }
}
function resetPIPCanvasColors() {
  CANVAS_FILL_COLOR = "";
  CANVAS_STROKE_COLOR = "";
}
function drawVideoElementsOnCanvas(videoElements, canvas) {
  let videoTiles = videoElements.filter((videoElement) => videoElement.srcObject !== null);
  const ctx = canvas.getContext("2d");
  setPIPCanvasColors();
  ctx.fillStyle = CANVAS_FILL_COLOR;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  if (videoTiles.length === 0) {
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    return;
  }
  fillGridTiles(videoTiles.slice(0, 4), ctx, canvas);
}
function dummyChangeInCanvas(canvas) {
  const ctx = canvas.getContext("2d");
  setPIPCanvasColors();
  ctx.fillStyle = CANVAS_FILL_COLOR;
  ctx.fillRect(0, 0, canvas.width, canvas.height);
}
function fillGridTiles(videoElements, ctx, canvas) {
  const offset = 8;
  canvas.width = 480;
  canvas.height = 320;
  ctx.fillStyle = CANVAS_FILL_COLOR;
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  if (videoElements.length > 0) {
    ctx.strokeStyle = CANVAS_STROKE_COLOR;
    ctx.lineWidth = offset / 2;
    ctx.strokeRect(0, 0, canvas.width, canvas.height);
  }
  if (videoElements.length === 1) {
    const video = videoElements[0];
    const { width, height } = getRenderDimensions(video, canvas.width - offset, canvas.height - offset);
    const xOffset = (canvas.width - width) / 2;
    const yOffset = (canvas.height - height) / 2;
    ctx.drawImage(video, xOffset, yOffset, width, height);
  }
  if (videoElements.length === 2) {
    videoElements.forEach((video, index) => {
      const { width, height } = getRenderDimensions(
        video,
        canvas.width / 2 - offset,
        // This will be the max available width for each tile
        canvas.height - offset
      );
      const xOffset = (canvas.width / 2 - width) / 2 + canvas.width / 2 * index;
      const yOffset = (canvas.height - height) / 2;
      ctx.drawImage(video, xOffset, yOffset, width, height);
    });
    const path = new Path2D();
    path.moveTo(canvas.width / 2, 0);
    path.lineTo(canvas.width / 2, canvas.height);
    ctx.stroke(path);
  }
  if (videoElements.length === 3) {
    videoElements.forEach((video, index) => {
      const { width, height } = getRenderDimensions(video, canvas.width / 2 - offset, canvas.height / 2 - offset);
      const xOffset = index < 2 ? (canvas.width / 2 - width) / 2 + canvas.width / 2 * index : canvas.width / 2 - width / 2;
      const yOffset = (index < 2 ? 0 : canvas.height / 2) + (canvas.height / 2 - height) / 2;
      ctx.drawImage(video, xOffset, yOffset, width, height);
    });
    const path = new Path2D();
    path.moveTo(canvas.width / 2, 0);
    path.lineTo(canvas.width / 2, canvas.height / 2);
    ctx.stroke(path);
    path.moveTo(0, canvas.height / 2);
    path.lineTo(canvas.width, canvas.height / 2);
    ctx.stroke(path);
  }
  if (videoElements.length === 4) {
    videoElements.forEach((video, index) => {
      const { width, height } = getRenderDimensions(video, canvas.width / 2 - offset, canvas.height / 2 - offset);
      const xOffset = (canvas.width / 2 - width) / 2 + canvas.width / 2 * (index % 2);
      const yOffset = (index < 2 ? 0 : canvas.height / 2) + (canvas.height / 2 - height) / 2;
      ctx.drawImage(video, xOffset, yOffset, width, height);
    });
    const path = new Path2D();
    path.moveTo(canvas.width / 2, 0);
    path.lineTo(canvas.width / 2, canvas.height);
    ctx.stroke(path);
    path.moveTo(0, canvas.height / 2);
    path.lineTo(canvas.width, canvas.height / 2);
    ctx.stroke(path);
  }
}
function getRenderDimensions(video, width, height) {
  let finalWidth = video.videoWidth / video.videoHeight * height;
  let finalHeight = height;
  if (finalWidth > width) {
    finalWidth = width;
    finalHeight = video.videoHeight / video.videoWidth * width;
  }
  return { width: finalWidth, height: finalHeight };
}
var CANVAS_FILL_COLOR, CANVAS_STROKE_COLOR;
var init_pipUtils = __esm({
  "src/Prebuilt/components/PIP/pipUtils.js"() {
    "use strict";
    init_cjs_shims();
  }
});

// src/Prebuilt/components/PIP/PIPManager.ts
var workerTimers, MAX_NUMBER_OF_TILES_IN_PIP, DEFAULT_FPS, DEFAULT_CANVAS_WIDTH, DEFAULT_CANVAS_HEIGHT, LEAVE_EVENT_NAME, PipManager, PictureInPicture;
var init_PIPManager = __esm({
  "src/Prebuilt/components/PIP/PIPManager.ts"() {
    "use strict";
    init_cjs_shims();
    workerTimers = __toESM(require("worker-timers"));
    init_pipUtils();
    init_constants();
    MAX_NUMBER_OF_TILES_IN_PIP = 4;
    DEFAULT_FPS = 30;
    DEFAULT_CANVAS_WIDTH = 480;
    DEFAULT_CANVAS_HEIGHT = 320;
    LEAVE_EVENT_NAME = "leavepictureinpicture";
    PipManager = class {
      listeners = /* @__PURE__ */ new Set();
      canvas = null;
      pipVideo = null;
      hmsActions = null;
      timeoutRef = 0;
      videoElements = [];
      onStateChange = null;
      tracksToShow = [];
      state = "stopped" /* stopped */;
      constructor() {
        this.reset();
      }
      listenToStateChange(cb) {
        this.listeners.add(cb);
      }
      /**
       * @private
       */
      reset() {
        console.debug("resetting PIP state");
        resetPIPCanvasColors();
        this.canvas = null;
        this.pipVideo = null;
        this.timeoutRef = 0;
        this.hmsActions = null;
        this.videoElements = [];
        this.tracksToShow = [];
        this.onStateChange = null;
        this.state = "stopped" /* stopped */;
      }
      /**
       * check if PIP is supported in this browser env
       */
      isSupported() {
        return !!document.pictureInPictureEnabled && !isIOS && !(isMacOS && isSafari);
      }
      /**
       * check if pip is currently turned on
       */
      isOn() {
        return !!document.pictureInPictureElement;
      }
      /**
       * request browser to start pip and start the render loop updating the pip
       * video element with peer tracks.
       * @param hmsActions
       * @param onStateChangeFn {function(bool):void} callback called to notify change in pip state
       */
      async start(hmsActions, onStateChangeFn) {
        if (!this.isSupported()) {
          throw new Error("pip is not supported on this browser");
        }
        console.debug("starting PIP, current state", this.state);
        if (this.state === "started" /* started */) {
          await this.stop();
        } else if (this.state === "starting" /* starting */) {
          return;
        }
        this.state = "starting" /* starting */;
        try {
          await this.init(hmsActions, onStateChangeFn);
          this.pipVideo?.addEventListener(LEAVE_EVENT_NAME, this.stop);
          this.renderLoop();
          if (!this.isOn()) {
            await this.requestPIP();
          }
          console.debug("pip started");
          this.state = "started" /* started */;
          this.onStateChange?.(true);
          this.callListeners(true);
        } catch (err) {
          console.error("error in request pip", err);
          this.state = "stopped" /* stopped */;
        }
      }
      stop = async () => {
        if (this.state === "stopped" /* stopped */) {
          return;
        }
        this.state = "stopping" /* stopping */;
        this.pipVideo?.removeEventListener(LEAVE_EVENT_NAME, this.stop);
        if (this.timeoutRef) {
          workerTimers.clearTimeout(this.timeoutRef);
          this.timeoutRef = 0;
        }
        if (this.isOn()) {
          this.exitPIP();
        }
        await this.detachOldAttachNewTracks(this.tracksToShow, []);
        this.onStateChange?.(false);
        this.callListeners(false);
        this.reset();
        this.state = "stopped" /* stopped */;
      };
      /**
       * @param peers {Array} All Remote Peers present in call.
       * @param tracksMap {Object} map of track id to track
       * */
      async updatePeersAndTracks(peers, tracksMap) {
        if (!this.canvas) {
          console.log("no canvas to render video to");
          return;
        }
        const newTracksToShowUnordered = this.pickTracksToShow(peers, tracksMap);
        const currentTracksShowing = this.tracksToShow;
        this.tracksToShow = this.orderNewTracksToShow(newTracksToShowUnordered, currentTracksShowing);
        try {
          await this.detachOldAttachNewTracks(currentTracksShowing, this.tracksToShow, tracksMap);
        } catch (error) {
          console.error("error in detaching/attaching tracks", error);
        }
      }
      // ------- Private function --------------
      /**
       * @private {boolean} on - whether pip is on/off
       */
      callListeners = (on) => {
        this.listeners.forEach((listener) => listener?.(on));
      };
      /**
       * @private
       */
      async init(hmsActions, onStateChangeFn) {
        await this.initMediaElements();
        this.hmsActions = hmsActions;
        this.onStateChange = onStateChangeFn;
      }
      async initMediaElements() {
        if (!this.canvas) {
          const { canvas, pipVideo } = this.initializeCanvasAndVideoElement();
          this.canvas = canvas;
          this.pipVideo = pipVideo;
          this.videoElements = this.initializeVideoElements();
          const videoPlayPromise = this.pipVideo.play();
          dummyChangeInCanvas(this.canvas);
          await videoPlayPromise;
        }
      }
      initializeCanvasAndVideoElement() {
        const canvas = document.createElement("canvas");
        canvas.width = DEFAULT_CANVAS_WIDTH;
        canvas.height = DEFAULT_CANVAS_HEIGHT;
        const pipVideo = document.createElement("video");
        pipVideo.width = DEFAULT_CANVAS_WIDTH;
        pipVideo.height = DEFAULT_CANVAS_HEIGHT;
        pipVideo.muted = true;
        pipVideo.srcObject = canvas.captureStream();
        return { canvas, pipVideo };
      }
      initializeVideoElements() {
        const videoElements = [];
        for (let i = 0; i < MAX_NUMBER_OF_TILES_IN_PIP; i++) {
          const videoElement = document.createElement("video");
          videoElement.autoplay = true;
          videoElement.playsInline = true;
          videoElements.push(videoElement);
        }
        return videoElements;
      }
      /**
       * render loop is responsible for rendering the video elements on canvas/pip.
       * in each loop current video elements are stitched and painted on canvas
       */
      renderLoop() {
        const delay = 1e3 / DEFAULT_FPS;
        this.timeoutRef = workerTimers.setTimeout(() => {
          if (this.state === "stopping" /* stopping */ || this.state === "stopped" /* stopped */) {
            return;
          }
          if (this.state === "started" /* started */) {
            drawVideoElementsOnCanvas(this.videoElements, this.canvas);
          }
          this.renderLoop();
        }, delay);
      }
      async requestPIP() {
        try {
          if (this.isOn()) {
            this.exitPIP();
          }
          if (!this.pipVideo) {
            return;
          }
          await this.pipVideo.requestPictureInPicture();
        } catch (error) {
          console.error("error in requestpip", error, "state", this.state);
          throw error;
        }
      }
      exitPIP() {
        document.exitPictureInPicture();
      }
      /**
       * Logic - pick only enabled video tracks
       * @param peers {Array<any>}
       * @param tracksMap {Record<string, any>}
       */
      pickTracksToShow(peers, tracksMap) {
        const tracksToShow = /* @__PURE__ */ new Set();
        for (const peer of peers) {
          if (tracksToShow.size === MAX_NUMBER_OF_TILES_IN_PIP) {
            break;
          } else if (peer.videoTrack && this.showTrack(tracksMap[peer.videoTrack])) {
            tracksToShow.add(peer.videoTrack);
          }
        }
        return Array.from(tracksToShow);
      }
      /**
       * there has to be a smart reordering of new tracks based on currently showing
       * ones to reduce unnecessary displacement. If someone was showing up both
       * earlier and now, it's a better UX to keep their position same instead
       * of letting it change.
       * The returned array is a shuffled version of newTracks with position of
       * tracks present in the old tracks intact.
       * eg. old = [1,5,9,3], new = [3,8,2,9], result = [8,2,9,3]
       * @param oldTracks {Array}
       * @param newTracks {Array}
       * @return {Array}
       */
      orderNewTracksToShow(newTracks, oldTracks) {
        const betterNewTracks = new Array(newTracks.length);
        const leftOvers = [];
        newTracks.forEach((track) => {
          const oldPosition = oldTracks.indexOf(track);
          if (oldPosition !== -1 && oldPosition < newTracks.length) {
            betterNewTracks[oldPosition] = track;
          } else {
            leftOvers.push(track);
          }
        });
        for (let i = 0; i < newTracks.length; i++) {
          if (!betterNewTracks[i]) {
            const newEntry = leftOvers.shift();
            if (newEntry) {
              betterNewTracks[i] = newEntry;
            }
          }
        }
        return Array.from(new Set(betterNewTracks));
      }
      showTrack(track) {
        return track && track.enabled && !track.degraded;
      }
      /**
       * call detach for tracks which no longer need to be shown and attach for
       * new ones which are to be shown now.
       * Note: oldTracks and newTracks are not necessarily of same length
       * @param oldTracks {Array<String>}
       * @param newTracks {Array<String>}
       * @param tracksMap {Record<String, any>}
       */
      // eslint-disable-next-line complexity
      async detachOldAttachNewTracks(oldTracks, newTracks, tracksMap = null) {
        const numTracks = Math.max(oldTracks.length, newTracks.length);
        for (let i = 0; i < numTracks; i++) {
          if (oldTracks[i] === newTracks[i]) {
            continue;
          } else if (oldTracks[i]) {
            if (!tracksMap || tracksMap[oldTracks[i]]) {
              await this.hmsActions?.detachVideo(oldTracks[i], this.videoElements[i]);
            }
            if (this.videoElements[i]) {
              this.videoElements[i].srcObject = null;
            }
          }
          if (newTracks[i]) {
            await this.hmsActions?.attachVideo(newTracks[i], this.videoElements[i]);
          }
        }
      }
    };
    PictureInPicture = new PipManager();
  }
});

// src/Prebuilt/components/Toast/ToastManager.js
var import_uuid, ToastManager;
var init_ToastManager = __esm({
  "src/Prebuilt/components/Toast/ToastManager.js"() {
    "use strict";
    init_cjs_shims();
    import_uuid = require("uuid");
    ToastManager = {
      toasts: /* @__PURE__ */ new Map(),
      listeners: /* @__PURE__ */ new Map(),
      addToast(toast) {
        const id = toast.id ? toast.id : (0, import_uuid.v4)();
        this.toasts.set(id, { ...toast, id });
        this.onChange();
        return id;
      },
      clearAllToast() {
        this.toasts.clear();
        this.onChange();
      },
      removeToast(id) {
        this.toasts.delete(id);
        this.onChange();
      },
      replaceToast(id, toast) {
        if (this.isActive(id)) {
          this.toasts.set(id, { ...this.toasts.get(id), ...toast });
          this.onChange();
          return id;
        } else {
          return this.addToast(toast);
        }
      },
      addListener(cb) {
        this.listeners.set(cb, cb);
      },
      removeListener(cb) {
        this.listeners.delete(cb);
      },
      isActive(id) {
        return this.toasts.has(id);
      },
      onChange() {
        const toasts = Array.from(this.toasts.values());
        this.listeners.forEach((listener) => listener(toasts));
      }
    };
  }
});

// src/Prebuilt/components/hooks/useRedirectToLeave.tsx
var import_react37, useRedirectToLeave;
var init_useRedirectToLeave = __esm({
  "src/Prebuilt/components/hooks/useRedirectToLeave.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react37 = require("react");
    init_AppContext();
    init_PIPManager();
    init_ToastManager();
    useRedirectToLeave = () => {
      const { onLeave } = useHMSPrebuiltContext();
      const redirect = (0, import_react37.useCallback)(
        (timeout = 0) => {
          setTimeout(() => {
            PictureInPicture.stop().catch(() => console.error("stopping pip"));
            ToastManager.clearAllToast();
            onLeave?.();
          }, timeout);
        },
        [onLeave]
      );
      return { redirectToLeave: redirect };
    };
  }
});

// src/Prebuilt/AppStateContext.tsx
var import_react38, import_react_use4, import_ts_pattern2, import_react_sdk13, AppStateContext, useHMSAppStateContext, useAppStateManager;
var init_AppStateContext = __esm({
  "src/Prebuilt/AppStateContext.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react38 = __toESM(require("react"));
    import_react_use4 = require("react-use");
    import_ts_pattern2 = require("ts-pattern");
    import_react_sdk13 = require("@100mslive/react-sdk");
    init_VBHandler();
    init_roomLayoutProvider();
    init_useRedirectToLeave();
    init_useRoomLayoutScreen();
    init_constants();
    AppStateContext = import_react38.default.createContext({
      rejoin: () => {
        console.log("Rejoin");
      }
    });
    AppStateContext.displayName = "AppStateContext";
    useHMSAppStateContext = () => {
      const context = (0, import_react38.useContext)(AppStateContext);
      if (!context) {
        throw Error("Make sure AppStateContext.Provider is present at the top level of your application");
      }
      return context;
    };
    useAppStateManager = () => {
      const roomLayout = useRoomLayout();
      const setOriginalLayout = useSetOriginalLayout();
      const [activeState, setActiveState] = import_react38.default.useState();
      const roomState = (0, import_react_sdk13.useHMSStore)(import_react_sdk13.selectRoomState);
      const prevRoomState = (0, import_react_use4.usePreviousDistinct)(roomState);
      const hmsActions = (0, import_react_sdk13.useHMSActions)();
      const { isLeaveScreenEnabled } = useRoomLayoutLeaveScreen();
      const { isPreviewScreenEnabled } = useRoomLayoutPreviewScreen();
      const { redirectToLeave } = useRedirectToLeave();
      const rejoin = () => {
        setOriginalLayout?.();
        hmsActions.setAppData(APP_DATA.authToken, "");
        setActiveState(isPreviewScreenEnabled ? "preview" /* PREVIEW */ : "meeting" /* MEETING */);
      };
      (0, import_react38.useEffect)(() => {
        if (!roomLayout) {
          return;
        }
        (0, import_ts_pattern2.match)([roomState, prevRoomState]).with([import_react_sdk13.HMSRoomState.Connected, import_ts_pattern2.P.any], () => setActiveState("meeting" /* MEETING */)).with(
          [import_react_sdk13.HMSRoomState.Disconnecting, import_react_sdk13.HMSRoomState.Connected],
          [import_react_sdk13.HMSRoomState.Disconnecting, import_react_sdk13.HMSRoomState.Connecting],
          [import_react_sdk13.HMSRoomState.Disconnecting, import_react_sdk13.HMSRoomState.Reconnecting],
          [import_react_sdk13.HMSRoomState.Disconnected, import_react_sdk13.HMSRoomState.Connected],
          [import_react_sdk13.HMSRoomState.Disconnected, import_react_sdk13.HMSRoomState.Connecting],
          [import_react_sdk13.HMSRoomState.Disconnected, import_react_sdk13.HMSRoomState.Reconnecting],
          () => {
            setActiveState((prevState) => {
              return (0, import_ts_pattern2.match)({ isLeaveScreenEnabled, isPreviewScreenEnabled, prevState }).when(
                ({ isLeaveScreenEnabled: isLeaveScreenEnabled2, prevState: prevState2 }) => isLeaveScreenEnabled2 && prevState2 !== "leave" /* LEAVE */,
                () => "leave" /* LEAVE */
              ).with({ isPreviewScreenEnabled: true }, () => "preview" /* PREVIEW */).otherwise(() => "meeting" /* MEETING */);
            });
            VBHandler.reset();
            redirectToLeave(1e3);
          }
        ).with([import_react_sdk13.HMSRoomState.Disconnected, import_ts_pattern2.P.nullish], () => {
          setActiveState(isPreviewScreenEnabled ? "preview" /* PREVIEW */ : "meeting" /* MEETING */);
        }).otherwise(() => {
        });
      }, [roomLayout, roomState, isLeaveScreenEnabled, isPreviewScreenEnabled, prevRoomState, redirectToLeave]);
      return { activeState, rejoin };
    };
  }
});

// src/Prebuilt/images/transaction_error.svg
var transaction_error_default;
var init_transaction_error = __esm({
  "src/Prebuilt/images/transaction_error.svg"() {
    transaction_error_default = "./transaction_error-BTCA2Z3P.svg";
  }
});

// src/Prebuilt/components/AuthToken.tsx
var import_react39, import_react_use5, import_ts_pattern3, import_uuid2, import_react_sdk14, AuthToken, convertError, AuthToken_default;
var init_AuthToken = __esm({
  "src/Prebuilt/components/AuthToken.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react39 = __toESM(require("react"));
    import_react_use5 = require("react-use");
    import_ts_pattern3 = require("ts-pattern");
    import_uuid2 = require("uuid");
    import_react_sdk14 = require("@100mslive/react-sdk");
    init_Modal();
    init_Text2();
    init_AppContext();
    init_transaction_error();
    init_useUISettings();
    init_useUserPreferences();
    init_constants();
    AuthToken = import_react39.default.memo(({ authTokenByRoomCodeEndpoint, defaultAuthToken, activeState }) => {
      const hmsActions = (0, import_react_sdk14.useHMSActions)();
      const { roomCode, userId } = useHMSPrebuiltContext();
      const [error, setError] = (0, import_react39.useState)({ title: "", body: "" });
      const authToken = defaultAuthToken;
      const [tokenInAppData, setAuthTokenInAppData] = useSetAppDataByKey(APP_DATA.authToken);
      const [savedUserId, setSavedUserId] = (0, import_react_use5.useSessionStorage)(UserPreferencesKeys.USER_ID);
      const progressRef = (0, import_react39.useRef)(null);
      (0, import_react39.useEffect)(() => {
        if (authToken) {
          setAuthTokenInAppData(authToken);
          return;
        }
        if (tokenInAppData || progressRef.current || activeState === "leave" /* LEAVE */) {
          return;
        }
        if (!roomCode) {
          console.error("room code not provided");
          return;
        }
        let userIdForAuthToken = userId || savedUserId;
        if (!userIdForAuthToken) {
          userIdForAuthToken = (0, import_uuid2.v4)();
          setSavedUserId(userIdForAuthToken);
        }
        progressRef.current = true;
        hmsActions.getAuthTokenByRoomCode({ roomCode, userId: userIdForAuthToken }, { endpoint: authTokenByRoomCodeEndpoint }).then((token) => setAuthTokenInAppData(token)).catch((error2) => setError(convertError(error2))).finally(() => {
          progressRef.current = false;
        });
      }, [
        hmsActions,
        authToken,
        authTokenByRoomCodeEndpoint,
        setAuthTokenInAppData,
        roomCode,
        userId,
        savedUserId,
        tokenInAppData,
        setSavedUserId,
        activeState
      ]);
      if (error.title) {
        return /* @__PURE__ */ import_react39.default.createElement(Dialog.Root, { open: true }, /* @__PURE__ */ import_react39.default.createElement(
          Dialog.Content,
          {
            css: {
              maxWidth: "$100",
              boxSizing: "border-box",
              p: "$10 $12",
              display: "flex",
              flexDirection: "column",
              alignItems: "center"
            }
          },
          /* @__PURE__ */ import_react39.default.createElement("img", { src: transaction_error_default, height: 80, width: 80, alt: "Token Error" }),
          /* @__PURE__ */ import_react39.default.createElement(Text, { variant: "h4", css: { textAlign: "center", mb: "$4", mt: "$10" } }, error.title),
          /* @__PURE__ */ import_react39.default.createElement(Text, { css: { c: "$on_surface_medium", textAlign: "center" } }, error.body)
        ));
      }
      return null;
    });
    convertError = (error) => {
      console.error("[error]", { error });
      console.warn(
        "If you think this is a mistake on our side, please reach out to us over Discord:",
        "https://discord.com/invite/kGdmszyzq2"
      );
      return (0, import_ts_pattern3.match)([error.action, error.code]).with(["GET_TOKEN", 403], () => ({
        title: "Psst! This room is currently inactive.",
        body: "Please feel free to join another open room for more conversations. Thanks for stopping by!"
      })).with(["GET_TOKEN", 404], () => ({
        title: "Room code does not exist",
        body: "We could not find a room code corresponding to this link."
      })).with(["GET_TOKEN", 2003], () => ({
        title: "Endpoint is not reachable",
        body: `Endpoint is not reachable. ${error.description}.`
      })).otherwise(
        () => (
          // @ts-ignore
          (0, import_ts_pattern3.match)(error.response?.status).with(404, () => ({
            title: "Room does not exist",
            body: "We could not find a room corresponding to this link."
          })).with(403, () => ({
            title: "Accessing room using this link format is disabled",
            body: "You can re-enable this from the developer section in Dashboard."
          })).otherwise(() => {
            console.error("Token API Error", error);
            return {
              title: "Error fetching token",
              body: "An error occurred while fetching the app token. Please look into logs for more details."
            };
          })
        )
      );
    };
    AuthToken_default = AuthToken;
  }
});

// src/Prebuilt/IconButton.tsx
var IconButton2, IconButton_default;
var init_IconButton3 = __esm({
  "src/Prebuilt/IconButton.tsx"() {
    "use strict";
    init_cjs_shims();
    init_IconButton2();
    init_Theme();
    IconButton2 = styled(IconButton, {
      width: "$14",
      height: "$14",
      border: "1px solid $border_bright",
      bg: "$background_dim",
      r: "$1",
      "&[disabled]": {
        opacity: 0.5,
        cursor: "not-allowed",
        backgroundColor: "$secondary_dim",
        color: "$on_primary_high"
      },
      variants: {
        active: {
          true: {
            color: "$on_surface_high",
            backgroundColor: "transparent"
          }
        }
      }
    });
    IconButton_default = IconButton2;
  }
});

// src/Prebuilt/components/IconButtonWithOptions/IconButtonWithOptions.tsx
var import_react40, import_react_icons8, variants, IconSection, OptionsSection, Icon2, IconButtonWithOptions;
var init_IconButtonWithOptions = __esm({
  "src/Prebuilt/components/IconButtonWithOptions/IconButtonWithOptions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react40 = __toESM(require("react"));
    import_react_icons8 = require("@100mslive/react-icons");
    init_Dropdown2();
    init_Layout();
    init_Theme();
    init_Tooltip2();
    init_IconButton3();
    variants = {
      disabled: {
        true: {
          bg: "$surface_brighter"
        }
      },
      active: {
        false: {
          bg: "$secondary_dim"
        }
      }
    };
    IconSection = styled(IconButton_default, {
      w: "unset",
      h: "$14",
      p: "$4",
      r: "$1",
      bg: "transparent",
      borderTopRightRadius: "0 !important",
      borderColor: "$border_bright",
      borderBottomRightRadius: "0 !important",
      position: "relative",
      "&:not([disabled]):focus-visible": {
        zIndex: 1
      },
      "@md": {
        mx: 0,
        borderTopRightRadius: "$1 !important",
        borderBottomRightRadius: "$1 !important"
      },
      variants: {
        ...variants,
        hideOptions: {
          true: {
            borderTopRightRadius: "$1 !important",
            borderBottomRightRadius: "$1 !important"
          }
        }
      }
    });
    OptionsSection = styled(IconButton_default, {
      w: "unset",
      h: "$14",
      p: "$4 $2",
      r: "$1",
      borderTopLeftRadius: "0 !important",
      borderColor: "$border_bright",
      borderBottomLeftRadius: "0 !important",
      borderLeftWidth: "0 !important",
      position: "relative",
      "&:not([disabled]):focus-visible": {
        zIndex: 1
      },
      "@md": {
        display: "none"
      },
      variants
    });
    Icon2 = styled(Flex, {
      alignItems: "center",
      justifyContent: "center",
      color: "$on_primary_high",
      variants: {
        disabled: {
          true: {
            color: "$on_surface_low"
          }
        },
        active: {
          true: {
            color: "$on_surface_high"
          }
        }
      }
    });
    IconButtonWithOptions = ({
      disabled = false,
      onDisabledClick = () => {
        return;
      },
      testid = "",
      tooltipMessage = "",
      icon,
      children,
      active,
      hideOptions = false,
      onClick = () => {
        return;
      }
    }) => {
      const commonProps = { disabled, active };
      return /* @__PURE__ */ import_react40.default.createElement(Flex, null, /* @__PURE__ */ import_react40.default.createElement(
        IconSection,
        {
          "data-testid": testid,
          ...commonProps,
          onClick,
          hideOptions,
          className: "__cancel-drag-event"
        },
        /* @__PURE__ */ import_react40.default.createElement(Tooltip, { disabled: !tooltipMessage, title: tooltipMessage }, /* @__PURE__ */ import_react40.default.createElement(Icon2, { ...commonProps }, icon))
      ), !hideOptions && children ? /* @__PURE__ */ import_react40.default.createElement(Dropdown.Root, null, /* @__PURE__ */ import_react40.default.createElement(
        Dropdown.Trigger,
        {
          asChild: true,
          onPointerDown: (e) => {
            if (disabled) {
              e.preventDefault();
              onDisabledClick();
            }
          }
        },
        /* @__PURE__ */ import_react40.default.createElement(OptionsSection, { ...commonProps }, /* @__PURE__ */ import_react40.default.createElement(Tooltip, { title: "View Options" }, /* @__PURE__ */ import_react40.default.createElement(Icon2, { ...commonProps }, /* @__PURE__ */ import_react40.default.createElement(import_react_icons8.VerticalMenuIcon, null))))
      ), /* @__PURE__ */ import_react40.default.createElement(
        Dropdown.Content,
        {
          sideOffset: 5,
          alignOffset: -44,
          align: "start",
          side: "top",
          css: {
            w: 344,
            maxWidth: "100%",
            maxHeight: "unset",
            p: 0,
            border: "none",
            bg: "$surface_dim"
          }
        },
        children
      )) : null);
    };
  }
});

// src/Prebuilt/components/MoreSettings/ActionTile.jsx
var import_react41, ActionTileRoot, ActionTileCount, ActionTileTitle, ActionTile;
var init_ActionTile = __esm({
  "src/Prebuilt/components/MoreSettings/ActionTile.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react41 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    init_Theme();
    ActionTileRoot = ({ active, disabled = false, children, onClick, ...props }) => /* @__PURE__ */ import_react41.default.createElement(
      Flex,
      {
        ...props,
        css: {
          flexDirection: "column",
          alignItems: "center",
          p: "$4 $2",
          position: "relative",
          bg: active ? "$surface_bright" : "",
          color: disabled ? "$on_surface_low" : "$on_surface_high",
          gap: "$4",
          r: "$1",
          "&:hover": {
            bg: "$surface_bright"
          }
        },
        onClick: () => {
          if (!disabled) {
            onClick();
          }
        }
      },
      children
    );
    ActionTileCount = styled(Text, {
      position: "absolute",
      top: 0,
      right: 0,
      fontWeight: "$semiBold",
      color: "$on_surface_high",
      p: "$1 $2",
      minWidth: "$9",
      textAlign: "center",
      boxSizing: "border-box",
      bg: "$surface_bright",
      r: "$round",
      letterSpacing: "1.5px",
      fontSize: "$tiny !important",
      lineHeight: "$tiny !important"
    });
    ActionTileTitle = styled(Text, {
      fontWeight: "$semiBold",
      color: "inherit",
      textAlign: "center",
      fontSize: "$xs !important"
    });
    ActionTile = {
      Root: ActionTileRoot,
      Title: ActionTileTitle,
      Count: ActionTileCount
    };
  }
});

// src/Sheet/Sheet.tsx
var import_react42, DialogPrimitive2, SheetRoot, SheetTrigger, StyledOverlay, StyledContent6, SheetContent, SheetClose, SheetTitle, SheetDescription, SheetDefaultCloseIcon, Sheet;
var init_Sheet = __esm({
  "src/Sheet/Sheet.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react42 = __toESM(require("react"));
    DialogPrimitive2 = __toESM(require("@radix-ui/react-dialog"));
    init_Modal();
    init_Theme();
    init_utils();
    SheetRoot = styled(DialogPrimitive2.Root, {
      minHeight: "240px",
      maxWidth: "100%"
    });
    SheetTrigger = styled(DialogPrimitive2.Trigger, {
      appearance: "none !important"
      // Needed for safari it shows white overlay
    });
    StyledOverlay = styled(Dialog.Overlay, {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      '&[data-state="open"]': {
        animation: `${sheetFadeIn} 150ms cubic-bezier(0.22, 1, 0.36, 1)`
      },
      '&[data-state="closed"]': {
        animation: `${sheetFadeOut} 150ms cubic-bezier(0.22, 1, 0.36, 1)`
      }
    });
    StyledContent6 = styled(DialogPrimitive2.Content, {
      color: "$on_surface_medium",
      backgroundColor: "$surface_default",
      borderTopLeftRadius: "$3",
      borderTopRightRadius: "$3",
      boxShadow: "0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)",
      position: "fixed",
      zIndex: 22,
      top: 0,
      right: 0,
      left: 0,
      bottom: 0,
      maxHeight: "96%",
      // Among other things, prevents text alignment inconsistencies when dialog can't be centered in the viewport evenly.
      // Affects animated and non-animated dialogs alike.
      willChange: "transform",
      "&:focus": {
        outline: "none"
      },
      "@allowMotion": {
        '&[data-state="open"]': {
          animation: `${sheetSlideIn} 150ms cubic-bezier(0.22, 1, 0.36, 1)`
        },
        '&[data-state="closed"]': {
          animation: `${sheetSlideOut} 150ms cubic-bezier(0.22, 1, 0.36, 1)`
        }
      },
      "@ls": {
        maxWidth: "50%",
        margin: "0 auto"
      },
      variants: {
        side: {
          top: {
            $$transformValue: "translate3d(0,-100%,0)",
            bottom: "auto"
          },
          right: {
            $$transformValue: "translate3d(100%,0,0)",
            right: 0
          },
          bottom: {
            $$transformValue: "translate3d(0,100%,0)",
            bottom: 0,
            top: "auto"
          },
          left: {
            $$transformValue: "translate3d(-100%,0,0)",
            left: 0
          }
        }
      },
      defaultVariants: {
        side: "bottom"
      }
    });
    SheetContent = import_react42.default.forwardRef(
      ({ children, container, ...props }, forwardedRef) => /* @__PURE__ */ import_react42.default.createElement(Dialog.Portal, { container }, /* @__PURE__ */ import_react42.default.createElement(StyledOverlay, null), /* @__PURE__ */ import_react42.default.createElement(StyledContent6, { ...props, ref: forwardedRef }, children))
    );
    SheetClose = Dialog.Close;
    SheetTitle = styled(DialogPrimitive2.Title, {
      margin: 0
    });
    SheetDescription = Dialog.Description;
    SheetDefaultCloseIcon = Dialog.DefaultClose;
    Sheet = {
      Root: SheetRoot,
      Trigger: SheetTrigger,
      Content: SheetContent,
      Description: SheetDescription,
      Title: SheetTitle,
      Close: SheetClose,
      DefaultClose: SheetDefaultCloseIcon
    };
  }
});

// src/Sheet/index.ts
var init_Sheet2 = __esm({
  "src/Sheet/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Sheet();
  }
});

// src/Prebuilt/primitives/DropdownTrigger.jsx
var import_react43, import_react_icons9, DialogDropdownTrigger;
var init_DropdownTrigger = __esm({
  "src/Prebuilt/primitives/DropdownTrigger.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react43 = __toESM(require("react"));
    import_react_icons9 = require("@100mslive/react-icons");
    init_src();
    DialogDropdownTrigger = import_react43.default.forwardRef(({ title, css: css2, open, icon, titleCSS = {} }, ref) => {
      return /* @__PURE__ */ import_react43.default.createElement(
        Dropdown.Trigger,
        {
          asChild: true,
          "data-testid": `${title}_selector`,
          css: {
            border: "1px solid $border_bright",
            bg: "$surface_bright",
            r: "$1",
            p: "$6 $9",
            zIndex: 10,
            ...css2
          },
          ref
        },
        /* @__PURE__ */ import_react43.default.createElement(
          Flex,
          {
            css: {
              display: "flex",
              justifyContent: "space-between",
              color: "$on_surface_high",
              w: "100%"
            }
          },
          icon,
          /* @__PURE__ */ import_react43.default.createElement(
            Text,
            {
              css: {
                color: "inherit",
                ...textEllipsis("90%"),
                flex: "1 1 0",
                mx: icon ? "$6" : "0",
                ...titleCSS
              }
            },
            title
          ),
          open ? /* @__PURE__ */ import_react43.default.createElement(import_react_icons9.ChevronUpIcon, null) : /* @__PURE__ */ import_react43.default.createElement(import_react_icons9.ChevronDownIcon, null)
        )
      );
    });
  }
});

// src/Prebuilt/components/hooks/useAudioOutputTest.tsx
var import_react44, useAudioOutputTest;
var init_useAudioOutputTest = __esm({
  "src/Prebuilt/components/hooks/useAudioOutputTest.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react44 = require("react");
    useAudioOutputTest = ({ deviceId }) => {
      const audioRef = (0, import_react44.useRef)(null);
      const [playing, setPlaying] = (0, import_react44.useState)(false);
      (0, import_react44.useEffect)(() => {
        if (audioRef.current && deviceId) {
          try {
            if (typeof audioRef.current.setSinkId !== "undefined") {
              audioRef.current.setSinkId(deviceId);
            }
          } catch (error) {
            console.log(error);
          }
        }
      }, [deviceId]);
      return { playing, setPlaying, audioRef };
    };
  }
});

// src/Prebuilt/components/hooks/useDropdownSelection.jsx
var useDropdownSelection;
var init_useDropdownSelection = __esm({
  "src/Prebuilt/components/hooks/useDropdownSelection.jsx"() {
    "use strict";
    init_cjs_shims();
    useDropdownSelection = () => {
      return "$surface_bright";
    };
  }
});

// src/Prebuilt/components/Settings/DeviceSettings.jsx
var import_react45, import_react_use6, import_react_sdk15, import_react_icons10, Settings, DeviceSelector, TestAudio, DeviceSettings_default;
var init_DeviceSettings = __esm({
  "src/Prebuilt/components/Settings/DeviceSettings.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react45 = __toESM(require("react"));
    import_react_use6 = require("react-use");
    import_react_sdk15 = require("@100mslive/react-sdk");
    import_react_icons10 = require("@100mslive/react-icons");
    init_src();
    init_Theme();
    init_DropdownTrigger();
    init_useUISettings();
    init_useAudioOutputTest();
    init_useDropdownSelection();
    init_common();
    init_constants();
    Settings = ({ setHide }) => {
      const { allDevices, selectedDeviceIDs, updateDevice } = (0, import_react_sdk15.useDevices)();
      const { videoInput, audioInput, audioOutput } = allDevices;
      const videoTrackId = (0, import_react_sdk15.useHMSStore)(import_react_sdk15.selectLocalVideoTrackID);
      const isVideoOn = (0, import_react_sdk15.useHMSStore)(import_react_sdk15.selectIsLocalVideoEnabled);
      const shouldShowAudioOutput = "setSinkId" in HTMLMediaElement.prototype;
      const mirrorLocalVideo = useUISettings(UI_SETTINGS.mirrorLocalVideo);
      const trackSelector = (0, import_react_sdk15.selectVideoTrackByID)(videoTrackId);
      const hmsActions = (0, import_react_sdk15.useHMSActions)();
      const track = (0, import_react_sdk15.useHMSStore)(trackSelector);
      const isMobile = (0, import_react_use6.useMedia)(config.media.md);
      (0, import_react45.useEffect)(() => {
        if (isMobile) {
          hmsActions.refreshDevices();
        }
      }, [hmsActions, isMobile]);
      const audioOutputFiltered = audioOutput?.filter((item) => !!item.label) ?? [];
      if (!videoInput?.length && !audioInput?.length && !audioOutputFiltered?.length) {
        setHide(true);
      }
      return /* @__PURE__ */ import_react45.default.createElement(Box, { className: settingOverflow() }, videoInput?.length ? /* @__PURE__ */ import_react45.default.createElement(import_react45.Fragment, null, isVideoOn && /* @__PURE__ */ import_react45.default.createElement(
        StyledVideoTile.Container,
        {
          css: {
            w: "90%",
            px: "$10",
            height: "$48",
            bg: "transparent",
            m: "$10 auto"
          }
        },
        /* @__PURE__ */ import_react45.default.createElement(Video, { trackId: videoTrackId, mirror: track?.facingMode !== "environment" && mirrorLocalVideo })
      ), /* @__PURE__ */ import_react45.default.createElement(
        DeviceSelector,
        {
          title: "Video",
          devices: videoInput,
          icon: /* @__PURE__ */ import_react45.default.createElement(import_react_icons10.VideoOnIcon, null),
          selection: selectedDeviceIDs.videoInput,
          onChange: (deviceId) => updateDevice({
            deviceId,
            deviceType: import_react_sdk15.DeviceType.videoInput
          })
        }
      )) : null, audioInput?.length ? /* @__PURE__ */ import_react45.default.createElement(
        DeviceSelector,
        {
          title: shouldShowAudioOutput ? "Microphone" : "Audio",
          icon: /* @__PURE__ */ import_react45.default.createElement(import_react_icons10.MicOnIcon, null),
          devices: audioInput,
          selection: selectedDeviceIDs.audioInput,
          onChange: (deviceId) => updateDevice({
            deviceId,
            deviceType: import_react_sdk15.DeviceType.audioInput
          })
        }
      ) : null, audioOutputFiltered?.length && shouldShowAudioOutput ? /* @__PURE__ */ import_react45.default.createElement(
        DeviceSelector,
        {
          title: "Speaker",
          icon: /* @__PURE__ */ import_react45.default.createElement(import_react_icons10.SpeakerIcon, null),
          devices: audioOutput,
          selection: selectedDeviceIDs.audioOutput,
          onChange: (deviceId) => updateDevice({
            deviceId,
            deviceType: import_react_sdk15.DeviceType.audioOutput
          })
        },
        /* @__PURE__ */ import_react45.default.createElement(TestAudio, { id: selectedDeviceIDs.audioOutput })
      ) : null);
    };
    DeviceSelector = ({ title, devices, selection, onChange, icon, children = null }) => {
      const [open, setOpen] = (0, import_react45.useState)(false);
      const selectionBg = useDropdownSelection();
      const ref = (0, import_react45.useRef)(null);
      return /* @__PURE__ */ import_react45.default.createElement(Box, { css: { mb: "$10" } }, /* @__PURE__ */ import_react45.default.createElement(Text, { css: { mb: "$4" } }, title), /* @__PURE__ */ import_react45.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            gap: "$4",
            "@md": {
              flexDirection: children ? "column" : "row",
              alignItems: children ? "start" : "center"
            }
          }
        },
        /* @__PURE__ */ import_react45.default.createElement(
          Box,
          {
            css: {
              position: "relative",
              flex: "1 1 0",
              minWidth: 0,
              w: "100%",
              maxWidth: "100%",
              "@md": {
                mb: children ? "$8" : 0
              }
            }
          },
          /* @__PURE__ */ import_react45.default.createElement(Dropdown.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react45.default.createElement(
            DialogDropdownTrigger,
            {
              ref,
              icon,
              title: devices.find(({ deviceId }) => deviceId === selection)?.label || "Select device from list",
              open
            }
          ), /* @__PURE__ */ import_react45.default.createElement(Dropdown.Portal, null, /* @__PURE__ */ import_react45.default.createElement(Dropdown.Content, { align: "start", sideOffset: 8, css: { w: ref.current?.clientWidth, zIndex: 1001 } }, devices.map((device) => {
            return /* @__PURE__ */ import_react45.default.createElement(
              Dropdown.Item,
              {
                key: device.label,
                onSelect: () => onChange(device.deviceId),
                css: {
                  px: "$9",
                  bg: device.deviceId === selection ? selectionBg : void 0
                }
              },
              device.label
            );
          }))))
        ),
        children
      ));
    };
    TestAudio = ({ id }) => {
      const { playing, setPlaying, audioRef } = useAudioOutputTest({ deviceId: id });
      return /* @__PURE__ */ import_react45.default.createElement(import_react45.default.Fragment, null, /* @__PURE__ */ import_react45.default.createElement(
        Button,
        {
          variant: "standard",
          css: {
            flexShrink: 0,
            p: "$6 $9",
            "@md": {
              w: "100%"
            }
          },
          onClick: () => audioRef.current?.play(),
          disabled: playing
        },
        /* @__PURE__ */ import_react45.default.createElement(import_react_icons10.SpeakerIcon, null),
        "\xA0Test",
        " ",
        /* @__PURE__ */ import_react45.default.createElement(Text, { as: "span", css: { display: "none", "@md": { display: "inline" } } }, "\xA0 speaker")
      ), /* @__PURE__ */ import_react45.default.createElement(
        "audio",
        {
          ref: audioRef,
          src: TEST_AUDIO_URL,
          onEnded: () => setPlaying(false),
          onPlay: () => setPlaying(true),
          css: { display: "none" }
        }
      ));
    };
    DeviceSettings_default = Settings;
  }
});

// src/Prebuilt/components/Settings/NotificationSettings.tsx
var import_react46, import_react_icons11, NotificationItem, NotificationSettings;
var init_NotificationSettings = __esm({
  "src/Prebuilt/components/Settings/NotificationSettings.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react46 = __toESM(require("react"));
    import_react_icons11 = require("@100mslive/react-icons");
    init_src();
    init_SwitchWithLabel();
    init_useUISettings();
    init_common();
    init_constants();
    NotificationItem = ({
      type,
      label,
      icon,
      checked
    }) => {
      const [, setSubscribedNotifications] = useSetSubscribedNotifications(type);
      return /* @__PURE__ */ import_react46.default.createElement(
        SwitchWithLabel_default,
        {
          label,
          id: type,
          icon,
          checked,
          onChange: (value) => {
            setSubscribedNotifications(value);
          }
        }
      );
    };
    NotificationSettings = () => {
      const subscribedNotifications = useSubscribedNotifications();
      return /* @__PURE__ */ import_react46.default.createElement(Box, { className: settingOverflow() }, /* @__PURE__ */ import_react46.default.createElement(
        NotificationItem,
        {
          label: "Peer Joined",
          type: SUBSCRIBED_NOTIFICATIONS.PEER_JOINED,
          icon: /* @__PURE__ */ import_react46.default.createElement(import_react_icons11.PeopleAddIcon, null),
          checked: subscribedNotifications.PEER_JOINED
        }
      ), /* @__PURE__ */ import_react46.default.createElement(
        NotificationItem,
        {
          label: "Peer Leave",
          type: SUBSCRIBED_NOTIFICATIONS.PEER_LEFT,
          icon: /* @__PURE__ */ import_react46.default.createElement(import_react_icons11.PeopleRemoveIcon, null),
          checked: subscribedNotifications.PEER_LEFT
        }
      ), /* @__PURE__ */ import_react46.default.createElement(
        NotificationItem,
        {
          label: "Hand Raised",
          type: SUBSCRIBED_NOTIFICATIONS.METADATA_UPDATED,
          icon: /* @__PURE__ */ import_react46.default.createElement(import_react_icons11.HandIcon, null),
          checked: subscribedNotifications.METADATA_UPDATED
        }
      ), /* @__PURE__ */ import_react46.default.createElement(
        NotificationItem,
        {
          label: "Error",
          type: SUBSCRIBED_NOTIFICATIONS.ERROR,
          icon: /* @__PURE__ */ import_react46.default.createElement(import_react_icons11.AlertOctagonIcon, null),
          checked: subscribedNotifications.ERROR
        }
      ));
    };
  }
});

// src/Prebuilt/components/Settings/SettingsModal.jsx
var import_react47, import_react_use7, import_react_icons12, settingsList, SettingsModal, MobileSettingModal, DesktopSettingModal, SettingsContentHeader, SettingsModal_default;
var init_SettingsModal = __esm({
  "src/Prebuilt/components/Settings/SettingsModal.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react47 = __toESM(require("react"));
    import_react_use7 = require("react-use");
    import_react_icons12 = require("@100mslive/react-icons");
    init_Divider2();
    init_IconButton2();
    init_Layout();
    init_Modal();
    init_Sheet2();
    init_Tabs2();
    init_Text2();
    init_Theme();
    init_DeviceSettings();
    init_LayoutSettings();
    init_NotificationSettings();
    init_common();
    settingsList = [
      {
        tabName: "devices",
        title: "Device Settings",
        icon: import_react_icons12.SettingsIcon,
        content: DeviceSettings_default
      },
      {
        tabName: "notifications",
        title: "Notifications",
        icon: import_react_icons12.NotificationsIcon,
        content: NotificationSettings
      },
      {
        tabName: "layout",
        title: "Layout",
        icon: import_react_icons12.GridFourIcon,
        content: LayoutSettings
      }
    ];
    SettingsModal = ({ open, onOpenChange, screenType, children = /* @__PURE__ */ import_react47.default.createElement(import_react47.default.Fragment, null) }) => {
      const mediaQueryLg = config.media.md;
      const isMobile = (0, import_react_use7.useMedia)(mediaQueryLg);
      const [showSetting, setShowSetting] = (0, import_react47.useState)(
        () => settingsList.reduce((obj, { tabName }) => ({ ...obj, [tabName]: true }), {})
      );
      const hideSettingByTabName = (0, import_react47.useCallback)(
        (key) => (hide) => setShowSetting((prev) => ({ ...prev, [key]: !hide })),
        [setShowSetting]
      );
      (0, import_react47.useEffect)(() => {
        if (screenType === "hls_live_streaming") {
          hideSettingByTabName("layout")(true);
        }
      }, [screenType, hideSettingByTabName]);
      const [selection, setSelection] = (0, import_react47.useState)(() => Object.keys(showSetting).find((key) => showSetting[key]) ?? "");
      const resetSelection = (0, import_react47.useCallback)(() => {
        setSelection("");
      }, []);
      (0, import_react47.useEffect)(() => {
        if (isMobile) {
          setSelection("");
        } else {
          const firstNotHiddenTabName = Object.keys(showSetting).find((key) => showSetting[key]) ?? "";
          setSelection(firstNotHiddenTabName);
        }
      }, [isMobile, showSetting]);
      return isMobile ? /* @__PURE__ */ import_react47.default.createElement(
        MobileSettingModal,
        {
          open,
          onOpenChange,
          selection,
          setSelection,
          showSetting,
          hideSettingByTabName,
          resetSelection
        },
        children
      ) : /* @__PURE__ */ import_react47.default.createElement(
        DesktopSettingModal,
        {
          open,
          onOpenChange,
          selection,
          setSelection,
          showSetting,
          hideSettingByTabName,
          resetSelection
        },
        children
      );
    };
    MobileSettingModal = ({
      open,
      onOpenChange,
      selection,
      setSelection,
      showSetting,
      hideSettingByTabName,
      resetSelection,
      children = /* @__PURE__ */ import_react47.default.createElement(import_react47.default.Fragment, null)
    }) => {
      return /* @__PURE__ */ import_react47.default.createElement(Sheet.Root, { open, onOpenChange }, /* @__PURE__ */ import_react47.default.createElement(Sheet.Trigger, { asChild: true }, children), /* @__PURE__ */ import_react47.default.createElement(
        Sheet.Content,
        {
          css: {
            bg: "$surface_dim",
            overflowY: "auto"
          }
        },
        /* @__PURE__ */ import_react47.default.createElement(Sheet.Title, { css: { py: "$10", px: "$8", alignItems: "center" } }, /* @__PURE__ */ import_react47.default.createElement(Flex, { direction: "row", justify: "between", css: { w: "100%" } }, !selection ? /* @__PURE__ */ import_react47.default.createElement(Text, { variant: "h6", css: { display: "flex" } }, "Settings") : /* @__PURE__ */ import_react47.default.createElement(Text, { variant: "h6", css: { display: "flex" } }, /* @__PURE__ */ import_react47.default.createElement(Box, { as: "span", css: { r: "$round", mr: "$2" }, onClick: resetSelection }, /* @__PURE__ */ import_react47.default.createElement(import_react_icons12.ChevronLeftIcon, null)), selection?.charAt(0).toUpperCase() + selection.slice(1)), /* @__PURE__ */ import_react47.default.createElement(Sheet.Close, null, /* @__PURE__ */ import_react47.default.createElement(IconButton, { as: "div", "data-testid": "dialog_cross_icon" }, /* @__PURE__ */ import_react47.default.createElement(import_react_icons12.CrossIcon, null))))),
        /* @__PURE__ */ import_react47.default.createElement(HorizontalDivider, null),
        !selection ? /* @__PURE__ */ import_react47.default.createElement(
          Flex,
          {
            direction: "column",
            css: {
              px: "$8",
              pb: "$8",
              overflowY: "auto"
            }
          },
          settingsList.filter(({ tabName }) => showSetting[tabName]).map(({ icon: Icon4, tabName, title }) => {
            return /* @__PURE__ */ import_react47.default.createElement(
              Box,
              {
                key: tabName,
                value: tabName,
                onClick: () => {
                  setSelection(tabName);
                },
                as: "div",
                css: {
                  all: "unset",
                  fontFamily: "$sans",
                  py: "$10",
                  display: "flex",
                  alignItems: "center",
                  fontSize: "$sm",
                  lineHeight: "$sm",
                  color: "$on_surface_high",
                  userSelect: "none",
                  gap: "$8",
                  cursor: "pointer",
                  "&:hover": {
                    bg: "$surface_brighter",
                    r: "$1",
                    gap: "$8",
                    border: "none"
                  },
                  borderBottom: "1px solid $border_default"
                }
              },
              /* @__PURE__ */ import_react47.default.createElement(Icon4, null),
              title
            );
          })
        ) : /* @__PURE__ */ import_react47.default.createElement(
          Box,
          {
            direction: "column",
            css: { overflowY: "scroll", px: "$8", py: "$10", maxHeight: "70vh", overflowX: "hidden" }
          },
          settingsList.filter(({ tabName }) => showSetting[tabName] && selection === tabName).map(({ content: Content11, title, tabName }) => {
            return /* @__PURE__ */ import_react47.default.createElement(Content11, { key: title, setHide: hideSettingByTabName(tabName) });
          })
        )
      ));
    };
    DesktopSettingModal = ({
      open,
      onOpenChange,
      selection,
      setSelection,
      showSetting,
      hideSettingByTabName,
      resetSelection,
      children = /* @__PURE__ */ import_react47.default.createElement(import_react47.default.Fragment, null)
    }) => {
      return /* @__PURE__ */ import_react47.default.createElement(Dialog.Root, { open, onOpenChange }, /* @__PURE__ */ import_react47.default.createElement(Dialog.Trigger, { asChild: true }, children), /* @__PURE__ */ import_react47.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react47.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react47.default.createElement(
        Dialog.Content,
        {
          css: {
            w: "min(800px, 90%)",
            height: "min(656px, 90%)",
            p: 0,
            r: "$4"
          }
        },
        /* @__PURE__ */ import_react47.default.createElement(
          Tabs.Root,
          {
            value: selection,
            activationMode: "automatic",
            onValueChange: setSelection,
            css: { size: "100%", position: "relative" }
          },
          /* @__PURE__ */ import_react47.default.createElement(
            Tabs.List,
            {
              css: {
                w: "18.625rem",
                flexDirection: "column",
                bg: "$background_default",
                p: "$14 $10",
                borderTopLeftRadius: "$4",
                borderBottomLeftRadius: "$4"
              }
            },
            /* @__PURE__ */ import_react47.default.createElement(Text, { variant: "h5" }, "Settings "),
            /* @__PURE__ */ import_react47.default.createElement(Flex, { direction: "column", css: { mx: 0, overflowY: "auto", pt: "$10" } }, settingsList.filter(({ tabName }) => showSetting[tabName]).map(({ icon: Icon4, tabName, title }) => {
              return /* @__PURE__ */ import_react47.default.createElement(Tabs.Trigger, { key: tabName, value: tabName, css: { gap: "$8" } }, /* @__PURE__ */ import_react47.default.createElement(Icon4, null), title);
            }))
          ),
          selection && /* @__PURE__ */ import_react47.default.createElement(
            Flex,
            {
              direction: "column",
              css: {
                flex: "1 1 0",
                minWidth: 0,
                mr: "$4"
              }
            },
            settingsList.filter(({ tabName }) => showSetting[tabName]).map(({ content: Content11, title, tabName }) => {
              return /* @__PURE__ */ import_react47.default.createElement(Tabs.Content, { key: tabName, value: tabName, className: settingContent() }, /* @__PURE__ */ import_react47.default.createElement(SettingsContentHeader, { onBack: resetSelection, isMobile: false }, title), /* @__PURE__ */ import_react47.default.createElement(Content11, { setHide: hideSettingByTabName(tabName) }));
            })
          )
        ),
        /* @__PURE__ */ import_react47.default.createElement(Dialog.Close, { css: { position: "absolute", right: "$10", top: "$10" } }, /* @__PURE__ */ import_react47.default.createElement(IconButton, { as: "div", "data-testid": "dialog_cross_icon" }, /* @__PURE__ */ import_react47.default.createElement(import_react_icons12.CrossIcon, null)))
      )));
    };
    SettingsContentHeader = ({ children, isMobile, onBack }) => {
      return /* @__PURE__ */ import_react47.default.createElement(Text, { variant: "h6", css: { mb: "$12", display: "flex", alignItems: "center" } }, isMobile && /* @__PURE__ */ import_react47.default.createElement(Box, { as: "span", css: { bg: "$surface_bright", mr: "$4", r: "$round", p: "$2" }, onClick: onBack }, /* @__PURE__ */ import_react47.default.createElement(import_react_icons12.ChevronLeftIcon, null)), children);
    };
    SettingsModal_default = SettingsModal;
  }
});

// src/Prebuilt/components/AudioVideoToggle.tsx
var import_react48, import_hms_noise_cancellation, import_react_sdk16, import_react_icons13, krispPlugin, Options, OptionLabel, useNoiseCancellationWithPlugin, NoiseCancellation, AudioOutputLabel, AudioSettings, AudioVideoToggle;
var init_AudioVideoToggle = __esm({
  "src/Prebuilt/components/AudioVideoToggle.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react48 = __toESM(require("react"));
    import_hms_noise_cancellation = require("@100mslive/hms-noise-cancellation");
    import_react_sdk16 = require("@100mslive/react-sdk");
    import_react_icons13 = require("@100mslive/react-icons");
    init_IconButtonWithOptions();
    init_ActionTile();
    init_SettingsModal();
    init_ToastManager();
    init_AudioLevel2();
    init_Dropdown2();
    init_Layout();
    init_Switch2();
    init_Text2();
    init_Tooltip2();
    init_IconButton3();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_useAudioOutputTest();
    init_constants();
    krispPlugin = new import_hms_noise_cancellation.HMSKrispPlugin();
    Options = ({
      options,
      selectedDeviceId,
      onClick
    }) => {
      return /* @__PURE__ */ import_react48.default.createElement(import_react48.default.Fragment, null, options?.map((option) => /* @__PURE__ */ import_react48.default.createElement(
        Dropdown.Item,
        {
          key: option.label,
          css: {
            backgroundColor: "$surface_dim",
            p: "$4 $8",
            h: "$15",
            fontSize: "$xs",
            justifyContent: "space-between",
            color: selectedDeviceId === option.deviceId ? "$primary_bright" : ""
          },
          onClick: () => {
            onClick(option.deviceId);
          }
        },
        option.label,
        selectedDeviceId === option.deviceId ? /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.CheckIcon, { width: 16, height: 16 }) : null
      )));
    };
    OptionLabel = ({ children, icon }) => {
      return /* @__PURE__ */ import_react48.default.createElement(
        Dropdown.Label,
        {
          css: {
            h: "$16",
            p: "$4 $8",
            color: "$on_surface_medium",
            bg: "transparent",
            fontSize: "$xs",
            gap: "$4",
            alignItems: "center"
          }
        },
        /* @__PURE__ */ import_react48.default.createElement(Flex, { css: { alignItems: "center", justifyContent: "center", "& svg": { size: "$8" } } }, icon),
        " ",
        children
      );
    };
    useNoiseCancellationWithPlugin = () => {
      const actions = (0, import_react_sdk16.useHMSActions)();
      const [inProgress, setInProgress] = (0, import_react48.useState)(false);
      const [, setNoiseCancellationEnabled] = useSetNoiseCancellation();
      const isEnabledForRoom = (0, import_react_sdk16.useHMSStore)(import_react_sdk16.selectRoom)?.isNoiseCancellationEnabled;
      const setNoiseCancellationWithPlugin = (0, import_react48.useCallback)(
        async (enabled) => {
          if (!isEnabledForRoom || inProgress) {
            return;
          }
          if (!krispPlugin.checkSupport().isSupported) {
            throw Error("Krisp plugin is not supported");
          }
          setInProgress(true);
          if (enabled) {
            await actions.addPluginToAudioTrack(krispPlugin);
          } else {
            await actions.removePluginFromAudioTrack(krispPlugin);
          }
          setNoiseCancellationEnabled(enabled);
          setInProgress(false);
        },
        [actions, inProgress, isEnabledForRoom, setNoiseCancellationEnabled]
      );
      return {
        setNoiseCancellationWithPlugin,
        inProgress
      };
    };
    NoiseCancellation = ({
      actionTile,
      iconOnly,
      setOpenOptionsSheet
    }) => {
      const localPeerAudioTrackID = (0, import_react_sdk16.useHMSStore)(import_react_sdk16.selectLocalAudioTrackID);
      const isNoiseCancellationEnabled = useIsNoiseCancellationEnabled();
      const { setNoiseCancellationWithPlugin, inProgress } = useNoiseCancellationWithPlugin();
      const room = (0, import_react_sdk16.useHMSStore)(import_react_sdk16.selectRoom);
      const isKrispPluginAdded = (0, import_react_sdk16.useHMSStore)((0, import_react_sdk16.selectIsLocalAudioPluginPresent)(krispPlugin.getName()));
      if (!krispPlugin.isSupported() || !room.isNoiseCancellationEnabled || !localPeerAudioTrackID) {
        return null;
      }
      if (actionTile) {
        return /* @__PURE__ */ import_react48.default.createElement(
          ActionTile.Root,
          {
            active: isNoiseCancellationEnabled && isKrispPluginAdded,
            disable: inProgress,
            onClick: async () => {
              await setNoiseCancellationWithPlugin(!isNoiseCancellationEnabled);
              setOpenOptionsSheet?.(false);
            }
          },
          /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.AudioLevelIcon, null),
          /* @__PURE__ */ import_react48.default.createElement(ActionTile.Title, null, isNoiseCancellationEnabled ? "Noise Reduced" : "Reduce Noise")
        );
      }
      if (iconOnly) {
        return /* @__PURE__ */ import_react48.default.createElement(Tooltip, { title: isNoiseCancellationEnabled ? "Noise Reduced" : "Reduce Noise" }, /* @__PURE__ */ import_react48.default.createElement(
          IconButton_default,
          {
            onClick: async () => {
              await setNoiseCancellationWithPlugin(!isNoiseCancellationEnabled);
            },
            disabled: inProgress,
            css: {
              bg: isNoiseCancellationEnabled && isKrispPluginAdded ? "$surface_brighter" : "$background_dim",
              borderColor: isNoiseCancellationEnabled && isKrispPluginAdded ? "$border_brighter" : "$border_bright"
            }
          },
          /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.AudioLevelIcon, null)
        ));
      }
      return /* @__PURE__ */ import_react48.default.createElement(import_react48.default.Fragment, null, /* @__PURE__ */ import_react48.default.createElement(Dropdown.ItemSeparator, { css: { mx: 0 } }), /* @__PURE__ */ import_react48.default.createElement(
        Dropdown.Item,
        {
          css: {
            p: "$4 $8",
            h: "$15",
            fontSize: "$xs",
            justifyContent: "space-between"
          },
          onClick: async (e) => {
            e.preventDefault();
            await setNoiseCancellationWithPlugin(!isNoiseCancellationEnabled);
          }
        },
        /* @__PURE__ */ import_react48.default.createElement(Text, { css: { display: "flex", alignItems: "center", gap: "$2", fontSize: "$xs", "& svg": { size: "$8" } } }, /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.AudioLevelIcon, null), "Reduce Noise"),
        /* @__PURE__ */ import_react48.default.createElement(
          Switch,
          {
            id: "noise_cancellation",
            checked: isNoiseCancellationEnabled && isKrispPluginAdded,
            disabled: inProgress,
            onClick: (e) => e.stopPropagation(),
            onCheckedChange: async (value) => {
              await setNoiseCancellationWithPlugin(value);
            }
          }
        )
      ), /* @__PURE__ */ import_react48.default.createElement(Dropdown.ItemSeparator, { css: { mx: 0 } }));
    };
    AudioOutputLabel = ({ deviceId }) => {
      const { playing, setPlaying, audioRef } = useAudioOutputTest({ deviceId });
      return /* @__PURE__ */ import_react48.default.createElement(OptionLabel, { icon: /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.SpeakerIcon, null) }, /* @__PURE__ */ import_react48.default.createElement(Box, { css: { flex: "1 1 0" } }, "Speakers"), /* @__PURE__ */ import_react48.default.createElement(
        Text,
        {
          variant: "xs",
          css: { color: "$primary_bright", "&:hover": { cursor: "pointer" } },
          onClick: async () => {
            if (playing) {
              return;
            }
            await audioRef.current?.play();
          }
        },
        /* @__PURE__ */ import_react48.default.createElement(
          "audio",
          {
            ref: audioRef,
            src: TEST_AUDIO_URL,
            onEnded: () => setPlaying(false),
            onPlay: () => setPlaying(true),
            style: { display: "none" }
          }
        ),
        playing ? "Playing Sound..." : "Play Test Sound"
      ));
    };
    AudioSettings = ({ onClick }) => {
      return /* @__PURE__ */ import_react48.default.createElement(import_react48.default.Fragment, null, /* @__PURE__ */ import_react48.default.createElement(
        Dropdown.Item,
        {
          css: {
            backgroundColor: "$surface_dim",
            p: "$4 $8",
            h: "$15",
            alignItems: "center",
            gap: "$2",
            fontSize: "$xs",
            "& svg": { size: "$8" }
          },
          onClick
        },
        /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.SettingsIcon, null),
        " Audio Settings"
      ));
    };
    AudioVideoToggle = ({ hideOptions = false }) => {
      const { allDevices, selectedDeviceIDs, updateDevice } = (0, import_react_sdk16.useDevices)((error) => {
        ToastManager.addToast({
          title: error.message,
          variant: "error",
          duration: 2e3
        });
      });
      const { videoInput, audioInput, audioOutput } = allDevices;
      const localPeer = (0, import_react_sdk16.useHMSStore)(import_react_sdk16.selectLocalPeer);
      const { isLocalVideoEnabled, isLocalAudioEnabled, toggleAudio, toggleVideo } = (0, import_react_sdk16.useAVToggle)();
      const actions = (0, import_react_sdk16.useHMSActions)();
      const vanillaStore = (0, import_react_sdk16.useHMSVanillaStore)();
      const videoTrackId = (0, import_react_sdk16.useHMSStore)(import_react_sdk16.selectLocalVideoTrackID);
      const localVideoTrack = (0, import_react_sdk16.useHMSStore)((0, import_react_sdk16.selectVideoTrackByID)(videoTrackId));
      const roomState = (0, import_react_sdk16.useHMSStore)(import_react_sdk16.selectRoomState);
      const hasAudioDevices = Number(audioInput?.length) > 0;
      const hasVideoDevices = Number(videoInput?.length) > 0;
      const shouldShowAudioOutput = "setSinkId" in HTMLMediaElement.prototype && Number(audioOutput?.length) > 0;
      const { screenType } = useRoomLayoutConferencingScreen();
      const [showSettings, setShowSettings] = (0, import_react48.useState)(false);
      const isKrispPluginAdded = (0, import_react_sdk16.useHMSStore)((0, import_react_sdk16.selectIsLocalAudioPluginPresent)(krispPlugin.getName()));
      const isNoiseCancellationEnabled = useIsNoiseCancellationEnabled();
      const { setNoiseCancellationWithPlugin, inProgress } = useNoiseCancellationWithPlugin();
      const showMuteIcon = !isLocalAudioEnabled || !toggleAudio;
      (0, import_react48.useEffect)(() => {
        (async () => {
          const isEnabledForRoom = vanillaStore.getState(import_react_sdk16.selectRoom)?.isNoiseCancellationEnabled;
          if (isEnabledForRoom && isNoiseCancellationEnabled && !isKrispPluginAdded && !inProgress && localPeer?.audioTrack) {
            try {
              await setNoiseCancellationWithPlugin(true);
              ToastManager.addToast({
                title: `Noise Reduction Enabled`,
                variant: "standard",
                duration: 2e3,
                icon: /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.AudioLevelIcon, null)
              });
            } catch (error) {
              console.error(error);
            }
          }
        })();
      }, [isNoiseCancellationEnabled, localPeer?.audioTrack, inProgress]);
      if (!toggleAudio && !toggleVideo) {
        return null;
      }
      return /* @__PURE__ */ import_react48.default.createElement(import_react48.Fragment, null, toggleAudio ? /* @__PURE__ */ import_react48.default.createElement(
        IconButtonWithOptions,
        {
          disabled: !toggleAudio,
          hideOptions: hideOptions || !hasAudioDevices,
          onDisabledClick: toggleAudio,
          testid: "audio_toggle_btn",
          tooltipMessage: `Turn ${isLocalAudioEnabled ? "off" : "on"} audio (${isMacOS ? "\u2318" : "ctrl"} + d)`,
          icon: !isLocalAudioEnabled ? /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.MicOffIcon, null) : /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.MicOnIcon, null),
          active: isLocalAudioEnabled,
          onClick: toggleAudio,
          key: "toggleAudio"
        },
        /* @__PURE__ */ import_react48.default.createElement(Dropdown.Group, null, /* @__PURE__ */ import_react48.default.createElement(OptionLabel, { icon: /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.MicOnIcon, null) }, /* @__PURE__ */ import_react48.default.createElement(Box, { css: { flex: "1 1 0" } }, !shouldShowAudioOutput ? "Audio" : "Microphone"), !showMuteIcon && /* @__PURE__ */ import_react48.default.createElement(AudioLevel, { trackId: localPeer?.audioTrack })), /* @__PURE__ */ import_react48.default.createElement(
          Options,
          {
            options: audioInput,
            selectedDeviceId: selectedDeviceIDs.audioInput,
            onClick: (deviceId) => updateDevice({ deviceId, deviceType: import_react_sdk16.DeviceType.audioInput })
          }
        )),
        /* @__PURE__ */ import_react48.default.createElement(Dropdown.ItemSeparator, { css: { mx: 0 } }),
        shouldShowAudioOutput && /* @__PURE__ */ import_react48.default.createElement(import_react48.default.Fragment, null, /* @__PURE__ */ import_react48.default.createElement(AudioOutputLabel, { deviceId: selectedDeviceIDs.audioOutput || "" }), /* @__PURE__ */ import_react48.default.createElement(Dropdown.Group, null, /* @__PURE__ */ import_react48.default.createElement(
          Options,
          {
            options: audioOutput,
            selectedDeviceId: selectedDeviceIDs.audioOutput,
            onClick: (deviceId) => updateDevice({ deviceId, deviceType: import_react_sdk16.DeviceType.audioOutput })
          }
        ))),
        /* @__PURE__ */ import_react48.default.createElement(NoiseCancellation, null),
        /* @__PURE__ */ import_react48.default.createElement(AudioSettings, { onClick: () => setShowSettings(true) })
      ) : null, toggleVideo ? /* @__PURE__ */ import_react48.default.createElement(
        IconButtonWithOptions,
        {
          disabled: !toggleVideo,
          hideOptions: hideOptions || !hasVideoDevices,
          onDisabledClick: toggleVideo,
          tooltipMessage: `Turn ${isLocalVideoEnabled ? "off" : "on"} video (${isMacOS ? "\u2318" : "ctrl"} + e)`,
          testid: "video_toggle_btn",
          icon: !isLocalVideoEnabled ? /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.VideoOffIcon, null) : /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.VideoOnIcon, null),
          key: "toggleVideo",
          active: isLocalVideoEnabled,
          onClick: toggleVideo
        },
        /* @__PURE__ */ import_react48.default.createElement(
          Options,
          {
            options: videoInput,
            selectedDeviceId: selectedDeviceIDs.videoInput,
            onClick: (deviceId) => updateDevice({ deviceId, deviceType: import_react_sdk16.DeviceType.videoInput })
          }
        )
      ) : null, localVideoTrack?.facingMode && roomState === import_react_sdk16.HMSRoomState.Preview && (isIOS || isAndroid) ? /* @__PURE__ */ import_react48.default.createElement(Tooltip, { title: "Switch Camera", key: "switchCamera" }, /* @__PURE__ */ import_react48.default.createElement(
        IconButton_default,
        {
          onClick: async () => {
            try {
              await actions.switchCamera();
            } catch (e) {
              ToastManager.addToast({
                title: `Error while flipping camera ${e.message || ""}`,
                variant: "error"
              });
            }
          }
        },
        /* @__PURE__ */ import_react48.default.createElement(import_react_icons13.CameraFlipIcon, null)
      )) : null, showSettings && /* @__PURE__ */ import_react48.default.createElement(SettingsModal_default, { open: showSettings, onOpenChange: () => setShowSettings(false), screenType }));
    };
  }
});

// src/Prebuilt/components/CaptionIcon.tsx
var import_react49, import_react_sdk17, import_react_icons14, CaptionIcon;
var init_CaptionIcon = __esm({
  "src/Prebuilt/components/CaptionIcon.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react49 = __toESM(require("react"));
    import_react_sdk17 = require("@100mslive/react-sdk");
    import_react_icons14 = require("@100mslive/react-icons");
    init_Tooltip2();
    init_IconButton3();
    init_useUISettings();
    CaptionIcon = () => {
      const isCaptionPresent = (0, import_react_sdk17.useHMSStore)(import_react_sdk17.selectIsTranscriptionEnabled);
      const [isCaption, setIsCaption] = useSetIsCaptionEnabled();
      const onClick = () => {
        setIsCaption(!isCaption);
      };
      if (!isCaptionPresent) {
        return null;
      }
      return /* @__PURE__ */ import_react49.default.createElement(Tooltip, { title: isCaption ? "Hide closed captions" : "Show closed captions" }, /* @__PURE__ */ import_react49.default.createElement(IconButton_default, { "data-testid": "caption_btn", onClick }, isCaption ? /* @__PURE__ */ import_react49.default.createElement(import_react_icons14.ClosedCaptionIcon, { width: "20", height: "20px" }) : /* @__PURE__ */ import_react49.default.createElement(import_react_icons14.OpenCaptionIcon, { width: "20", height: "20px" })));
    };
  }
});

// src/Prebuilt/components/Footer/EmojiCard.jsx
var import_react50, emojiReactionList, EmojiCard, EmojiContainer;
var init_EmojiCard = __esm({
  "src/Prebuilt/components/Footer/EmojiCard.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react50 = __toESM(require("react"));
    init_Layout();
    init_Theme();
    emojiReactionList = [
      [{ emojiId: "+1" }, { emojiId: "-1" }, { emojiId: "wave" }, { emojiId: "clap" }, { emojiId: "fire" }],
      [{ emojiId: "tada" }, { emojiId: "heart_eyes" }, { emojiId: "joy" }, { emojiId: "open_mouth" }, { emojiId: "sob" }]
    ];
    EmojiCard = ({ sendReaction }) => {
      return emojiReactionList.map((emojiLine, index) => /* @__PURE__ */ import_react50.default.createElement(Flex, { key: index, justify: "between", css: { mb: "$8" } }, emojiLine.map((emoji) => /* @__PURE__ */ import_react50.default.createElement(EmojiContainer, { key: emoji.emojiId, onClick: () => sendReaction(emoji.emojiId) }, /* @__PURE__ */ import_react50.default.createElement("em-emoji", { id: emoji.emojiId, size: "100%", set: "apple" })))));
    };
    EmojiContainer = styled("span", {
      position: "relative",
      cursor: "pointer",
      width: "$16",
      height: "$16",
      p: "$4",
      "&:hover": {
        p: "7px",
        bg: "$surface_brighter",
        borderRadius: "$1"
      }
    });
  }
});

// src/Prebuilt/components/hooks/useDropdownList.ts
var import_react51, useDropdownList;
var init_useDropdownList = __esm({
  "src/Prebuilt/components/hooks/useDropdownList.ts"() {
    "use strict";
    init_cjs_shims();
    import_react51 = require("react");
    init_useUISettings();
    init_constants();
    useDropdownList = ({ name, open }) => {
      const [dropdownList = [], setDropdownList] = useSetAppDataByKey(APP_DATA.dropdownList);
      (0, import_react51.useEffect)(() => {
        if (open) {
          if (!dropdownList.includes(name)) {
            setDropdownList([...dropdownList, name]);
          }
        } else {
          const index = dropdownList.indexOf(name);
          if (index >= 0) {
            const newDropdownList = [...dropdownList];
            newDropdownList.splice(index, 1);
            setDropdownList(newDropdownList);
          }
        }
      }, [open, name]);
    };
  }
});

// src/Prebuilt/common/hooks.ts
function getResolution(recordingResolution) {
  if (!recordingResolution) {
    return void 0;
  }
  const resolution = RTMP_RECORD_DEFAULT_RESOLUTION;
  if (recordingResolution.width) {
    resolution.width = recordingResolution.width;
  }
  if (recordingResolution.height) {
    resolution.height = recordingResolution.height;
  }
  return resolution;
}
function useWaitingRoomInfo() {
  const localPeerRole = (0, import_react_sdk18.useHMSStore)(import_react_sdk18.selectLocalPeerRole);
  const { video, audio, screen } = (0, import_react_sdk18.useHMSStore)(import_react_sdk18.selectIsAllowedToPublish);
  const isScreenShareAllowed = isScreenshareSupported();
  const roles = (0, import_react_sdk18.useHMSStore)(import_react_sdk18.selectRolesMap);
  const peersByRoles = (0, import_react_sdk18.useHMSStore)((0, import_react_sdk18.selectPeersByRoles)(localPeerRole?.subscribeParams.subscribeToRoles || []));
  const isNotAllowedToPublish = !(video || audio || screen && isScreenShareAllowed);
  const isScreenOnlyPublishParams = screen && !(video || audio);
  const hasSubscribedRolePublishing = (0, import_react52.useMemo)(() => {
    return peersByRoles.some((peer) => {
      if (peer.roleName && roles[peer.roleName] && !peer.isLocal) {
        return !!roles[peer.roleName].publishParams?.allowed.length;
      }
      return false;
    });
  }, [peersByRoles, roles]);
  return {
    isNotAllowedToPublish,
    isScreenOnlyPublishParams,
    hasSubscribedRolePublishing
  };
}
var import_react52, import_react_use8, import_join_form2, import_react_sdk18, useFilteredRoles, useDefaultChatSelection, useShowStreamingUI, useParticipants, useIsLandscape, useLandscapeHLSStream, useMobileHLSStream, useKeyboardHandler, useRecordingHandler;
var init_hooks = __esm({
  "src/Prebuilt/common/hooks.ts"() {
    "use strict";
    init_cjs_shims();
    import_react52 = require("react");
    import_react_use8 = require("react-use");
    import_join_form2 = require("@100mslive/types-prebuilt/elements/join_form");
    import_react_sdk18 = require("@100mslive/react-sdk");
    init_ToastManager();
    init_Theme();
    init_roomLayoutProvider();
    init_useUISettings();
    init_useRoomLayoutScreen();
    init_utils2();
    init_constants();
    useFilteredRoles = () => {
      const { elements } = useRoomLayoutConferencingScreen();
      return elements?.chat?.roles_whitelist || [];
    };
    useDefaultChatSelection = () => {
      const { elements } = useRoomLayoutConferencingScreen();
      const roles = useFilteredRoles();
      if (elements?.chat?.public_chat_enabled) {
        return CHAT_SELECTOR.EVERYONE;
      }
      if (roles.length > 0) {
        return roles[0];
      }
      return "";
    };
    useShowStreamingUI = () => {
      const layout = useRoomLayout();
      const { join_form } = layout?.screens?.preview?.default?.elements || {};
      return join_form?.join_btn_type === import_join_form2.JoinForm_JoinBtnType.JOIN_BTN_TYPE_JOIN_AND_GO_LIVE;
    };
    useParticipants = (params) => {
      const isConnected = (0, import_react_sdk18.useHMSStore)(import_react_sdk18.selectIsConnectedToRoom);
      const peerCount = (0, import_react_sdk18.useHMSStore)(import_react_sdk18.selectPeerCount);
      const availableRoles = (0, import_react_sdk18.useHMSStore)(import_react_sdk18.selectAvailableRoleNames);
      let participantList = (0, import_react_sdk18.useHMSStore)(isConnected ? import_react_sdk18.selectPeers : import_react_sdk18.selectRemotePeers);
      const rolesWithParticipants = Array.from(new Set(participantList.map((peer) => peer.roleName)));
      const vanillaStore = (0, import_react_sdk18.useHMSVanillaStore)();
      if (params?.metadata?.isHandRaised) {
        participantList = participantList.filter((peer) => {
          return vanillaStore.getState((0, import_react_sdk18.selectPeerMetadata)(peer.id)).isHandRaised;
        });
      }
      if (params?.role && availableRoles.includes(params.role)) {
        participantList = participantList.filter((peer) => peer.roleName === params.role);
      }
      if (params?.search) {
        const search = params.search;
        participantList = participantList.filter((peer) => peer.name.toLowerCase().includes(search));
      }
      return { participants: participantList, isConnected, peerCount, rolesWithParticipants };
    };
    useIsLandscape = () => {
      const isMobile = import_react_sdk18.parsedUserAgent.getDevice().type === "mobile";
      const isLandscape = (0, import_react_use8.useMedia)(config.media.ls);
      return isMobile && isLandscape;
    };
    useLandscapeHLSStream = () => {
      const isLandscape = useIsLandscape();
      const { screenType } = useRoomLayoutConferencingScreen();
      return isLandscape && screenType === "hls_live_streaming";
    };
    useMobileHLSStream = () => {
      const isMobile = (0, import_react_use8.useMedia)(config.media.md);
      const { screenType } = useRoomLayoutConferencingScreen();
      return isMobile && screenType === "hls_live_streaming";
    };
    useKeyboardHandler = (isPaused, hlsPlayer2) => {
      const handleKeyEvent = (0, import_react52.useCallback)(
        async (event) => {
          switch (event.key) {
            case " ":
              if (isPaused) {
                await hlsPlayer2?.play();
              } else {
                hlsPlayer2?.pause();
              }
              break;
            case "ArrowRight":
              hlsPlayer2?.seekTo(hlsPlayer2?.getVideoElement().currentTime + 10);
              break;
            case "ArrowLeft":
              hlsPlayer2?.seekTo(hlsPlayer2?.getVideoElement().currentTime - 10);
              break;
          }
        },
        [hlsPlayer2, isPaused]
      );
      return handleKeyEvent;
    };
    useRecordingHandler = () => {
      const hmsActions = (0, import_react_sdk18.useHMSActions)();
      const recordingState = (0, import_react_sdk18.useHMSStore)(import_react_sdk18.selectRecordingState);
      const [isRecordingLoading, setIsRecordingLoading] = (0, import_react52.useState)(false);
      const [recordingStarted, setRecordingState] = useSetAppDataByKey(APP_DATA.recordingStarted);
      (0, import_react52.useEffect)(() => {
        if (recordingState.browser.error && recordingStarted) {
          setRecordingState(false);
        }
      }, [recordingStarted, recordingState.browser.error, setRecordingState]);
      const startRecording = (0, import_react52.useCallback)(
        async (resolution = null) => {
          try {
            setRecordingState(true);
            setIsRecordingLoading(true);
            await hmsActions.startRTMPOrRecording({
              resolution: getResolution(resolution),
              record: true
            });
          } catch (error) {
            const err = error;
            if (err.message.includes("stream already running")) {
              ToastManager.addToast({
                title: "Recording already running",
                variant: "error"
              });
            } else {
              ToastManager.addToast({
                title: err.message,
                variant: "error"
              });
            }
            setRecordingState(false);
          }
          setIsRecordingLoading(false);
        },
        [hmsActions, setRecordingState]
      );
      return {
        recordingStarted,
        startRecording,
        isRecordingLoading
      };
    };
  }
});

// src/Prebuilt/components/EmojiReaction.jsx
var import_react53, import_react_use9, import_apple, import_emoji_mart, import_react_sdk19, import_react_icons15, EmojiReaction;
var init_EmojiReaction = __esm({
  "src/Prebuilt/components/EmojiReaction.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react53 = __toESM(require("react"));
    import_react_use9 = require("react-use");
    import_apple = __toESM(require("@emoji-mart/data/sets/14/apple.json"));
    import_emoji_mart = require("emoji-mart");
    import_react_sdk19 = require("@100mslive/react-sdk");
    import_react_icons15 = require("@100mslive/react-icons");
    init_EmojiCard();
    init_Dropdown2();
    init_Layout();
    init_Theme();
    init_Tooltip2();
    init_IconButton3();
    init_useRoomLayoutScreen();
    init_useDropdownList();
    init_hooks();
    init_constants();
    (0, import_emoji_mart.init)({ data: import_apple.default });
    EmojiReaction = ({ showCard = false }) => {
      const [open, setOpen] = (0, import_react53.useState)(false);
      const isConnected = (0, import_react_sdk19.useHMSStore)(import_react_sdk19.selectIsConnectedToRoom);
      const { elements } = useRoomLayoutConferencingScreen();
      useDropdownList({ open, name: "EmojiReaction" });
      const roles = (0, import_react_sdk19.useHMSStore)(import_react_sdk19.selectAvailableRoleNames);
      const localPeerId = (0, import_react_sdk19.useHMSStore)(import_react_sdk19.selectLocalPeerID);
      const isMobile = (0, import_react_use9.useMedia)(config.media.md);
      const isLandscape = (0, import_react_use9.useMedia)(config.media.ls);
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeStream = useLandscapeHLSStream();
      const { sendEvent } = (0, import_react_sdk19.useCustomEvent)({
        type: EMOJI_REACTION_TYPE
      });
      const sendReaction = async (emojiId) => {
        const data3 = {
          type: EMOJI_REACTION_TYPE,
          emojiId,
          senderId: localPeerId
        };
        sendEvent(data3, { roleNames: roles });
        window.showFlyingEmoji?.({ emojiId, senderId: localPeerId });
      };
      if (!isConnected || !elements.emoji_reactions) {
        return null;
      }
      if (showCard) {
        return /* @__PURE__ */ import_react53.default.createElement(EmojiCard, { sendReaction });
      }
      return /* @__PURE__ */ import_react53.default.createElement(Dropdown.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react53.default.createElement(Dropdown.Trigger, { asChild: true, "data-testid": "emoji_reaction_btn" }, /* @__PURE__ */ import_react53.default.createElement(
        IconButton_default,
        {
          css: isMobile || isLandscape ? { bg: "$surface_default", r: "$round", border: "1px solid $border_bright" } : {}
        },
        /* @__PURE__ */ import_react53.default.createElement(Tooltip, { title: "Emoji reaction" }, /* @__PURE__ */ import_react53.default.createElement(Box, null, /* @__PURE__ */ import_react53.default.createElement(import_react_icons15.EmojiIcon, null)))
      )), /* @__PURE__ */ import_react53.default.createElement(
        Dropdown.Content,
        {
          sideOffset: 5,
          align: isMobileHLSStream || isLandscapeStream ? "end" : "center",
          css: { p: "$8", bg: "$surface_default" }
        },
        /* @__PURE__ */ import_react53.default.createElement(EmojiCard, { sendReaction })
      ));
    };
  }
});

// src/Prebuilt/components/Leave/EndSessionContent.tsx
var import_react54, import_react_icons16, EndSessionContent;
var init_EndSessionContent = __esm({
  "src/Prebuilt/components/Leave/EndSessionContent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react54 = __toESM(require("react"));
    import_react_icons16 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Text2();
    EndSessionContent = ({
      setShowEndStreamAlert,
      leaveRoom,
      isModal = false,
      isStreamingOn = false
    }) => {
      return /* @__PURE__ */ import_react54.default.createElement(Box, null, /* @__PURE__ */ import_react54.default.createElement(
        Flex,
        {
          css: {
            color: "$alert_error_default",
            display: "flex",
            alignItems: "center"
          }
        },
        /* @__PURE__ */ import_react54.default.createElement(import_react_icons16.AlertTriangleIcon, { style: { marginRight: "0.5rem" } }),
        /* @__PURE__ */ import_react54.default.createElement(Text, { variant: "lg", css: { color: "inherit", fontWeight: "$semiBold" } }, "End ", isStreamingOn ? "Stream" : "Session"),
        isModal ? null : /* @__PURE__ */ import_react54.default.createElement(Box, { css: { color: "$on_surface_high", ml: "auto" }, onClick: () => setShowEndStreamAlert(false) }, /* @__PURE__ */ import_react54.default.createElement(import_react_icons16.CrossIcon, null))
      ), /* @__PURE__ */ import_react54.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", mb: "$8", mt: "$4" } }, "The ", isStreamingOn ? "stream" : "session", " will end for everyone. You can't undo this action."), /* @__PURE__ */ import_react54.default.createElement(Flex, { align: "center", justify: "between", css: { w: "100%", gap: "$8" } }, /* @__PURE__ */ import_react54.default.createElement(
        Button,
        {
          outlined: true,
          variant: "standard",
          css: { w: "100%", "@md": { display: "none" } },
          onClick: () => setShowEndStreamAlert(false)
        },
        "Cancel"
      ), /* @__PURE__ */ import_react54.default.createElement(
        Button,
        {
          variant: "danger",
          css: { w: "100%" },
          onClick: async () => {
            await leaveRoom({ endStream: true });
            setShowEndStreamAlert(false);
          },
          id: "stopStream",
          "data-testid": "stop_stream_btn"
        },
        "End ",
        isStreamingOn ? "Stream" : "Session"
      )));
    };
  }
});

// src/Prebuilt/components/Leave/LeaveAtoms.tsx
var LeaveIconButton, MenuTriggerButton;
var init_LeaveAtoms = __esm({
  "src/Prebuilt/components/Leave/LeaveAtoms.tsx"() {
    "use strict";
    init_cjs_shims();
    init_IconButton2();
    init_Theme();
    LeaveIconButton = styled(IconButton, {
      color: "$on_primary_high",
      h: "$14",
      px: "$4",
      r: "$1",
      bg: "$alert_error_default",
      "&:not([disabled]):hover": {
        bg: "$alert_error_bright"
      },
      "&:not([disabled]):active": {
        bg: "$alert_error_default"
      },
      "@md": {
        mx: 0
      }
    });
    MenuTriggerButton = styled(LeaveIconButton, {
      borderLeft: "1px solid $alert_error_dim",
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0,
      px: "$2"
    });
  }
});

// src/Prebuilt/components/Leave/LeaveCard.tsx
var import_react55, LeaveCard;
var init_LeaveCard = __esm({
  "src/Prebuilt/components/Leave/LeaveCard.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react55 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    LeaveCard = ({
      icon,
      title,
      subtitle,
      onClick,
      bg,
      titleColor,
      css: css2 = {}
    }) => {
      return /* @__PURE__ */ import_react55.default.createElement(Flex, { css: { p: "$10", flexGrow: 1, gap: "$8", bg, ...css2 }, onClick }, /* @__PURE__ */ import_react55.default.createElement(Box, { css: { color: titleColor } }, icon), /* @__PURE__ */ import_react55.default.createElement(Box, { css: { gap: "$2" } }, /* @__PURE__ */ import_react55.default.createElement(Text, { variant: "lg", css: { color: titleColor } }, title), /* @__PURE__ */ import_react55.default.createElement(Text, { variant: "sm", css: { c: "inherit" } }, subtitle)));
    };
  }
});

// src/Prebuilt/components/Leave/LeaveSessionContent.tsx
var import_react56, import_react_icons17, LeaveSessionContent;
var init_LeaveSessionContent = __esm({
  "src/Prebuilt/components/Leave/LeaveSessionContent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react56 = __toESM(require("react"));
    import_react_icons17 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Text2();
    LeaveSessionContent = ({
      setShowLeaveRoomAlert,
      leaveRoom,
      isModal = false
    }) => {
      return /* @__PURE__ */ import_react56.default.createElement(Box, null, /* @__PURE__ */ import_react56.default.createElement(
        Flex,
        {
          css: {
            color: "$alert_error_default",
            display: "flex",
            alignItems: "center"
          }
        },
        /* @__PURE__ */ import_react56.default.createElement(import_react_icons17.AlertTriangleIcon, { style: { marginRight: "0.5rem" } }),
        /* @__PURE__ */ import_react56.default.createElement(Text, { variant: "lg", css: { color: "inherit", fontWeight: "$semiBold" } }, "Leave"),
        isModal ? null : /* @__PURE__ */ import_react56.default.createElement(Box, { css: { color: "$on_surface_high", ml: "auto" }, onClick: () => setShowLeaveRoomAlert(false) }, /* @__PURE__ */ import_react56.default.createElement(import_react_icons17.CrossIcon, null))
      ), /* @__PURE__ */ import_react56.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_low", mb: "$8", mt: "$4" } }, "Others will continue after you leave. You can join the session again."), /* @__PURE__ */ import_react56.default.createElement(Flex, { align: "center", justify: "between", css: { w: "100%", gap: "$8" } }, /* @__PURE__ */ import_react56.default.createElement(
        Button,
        {
          outlined: true,
          variant: "standard",
          css: { w: "100%", "@md": { display: "none" } },
          onClick: () => setShowLeaveRoomAlert(false)
        },
        "Cancel"
      ), /* @__PURE__ */ import_react56.default.createElement(
        Button,
        {
          variant: "danger",
          css: { w: "100%" },
          onClick: async () => {
            await leaveRoom();
          },
          id: "leaveRoom",
          "data-testid": "leave_room"
        },
        "Leave Session"
      )));
    };
  }
});

// src/Prebuilt/components/Leave/DesktopLeaveRoom.tsx
var import_react57, import_react_sdk20, import_react_icons18, DesktopLeaveRoom;
var init_DesktopLeaveRoom = __esm({
  "src/Prebuilt/components/Leave/DesktopLeaveRoom.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react57 = __toESM(require("react"));
    import_react_sdk20 = require("@100mslive/react-sdk");
    import_react_icons18 = require("@100mslive/react-icons");
    init_Dropdown2();
    init_Layout();
    init_Modal();
    init_Tooltip2();
    init_EndSessionContent();
    init_LeaveAtoms();
    init_LeaveCard();
    init_LeaveSessionContent();
    init_useDropdownList();
    DesktopLeaveRoom = ({
      leaveRoom,
      screenType,
      endRoom,
      container
    }) => {
      const [open, setOpen] = (0, import_react57.useState)(false);
      const [showLeaveRoomAlert, setShowLeaveRoomAlert] = (0, import_react57.useState)(false);
      const [showEndStreamAlert, setShowEndStreamAlert] = (0, import_react57.useState)(false);
      const isConnected = (0, import_react_sdk20.useHMSStore)(import_react_sdk20.selectIsConnectedToRoom);
      const permissions = (0, import_react_sdk20.useHMSStore)(import_react_sdk20.selectPermissions);
      const { isStreamingOn } = (0, import_react_sdk20.useRecordingStreaming)();
      const showStream = screenType !== "hls_live_streaming" && isStreamingOn && permissions?.hlsStreaming;
      const showLeaveOptions = permissions?.hlsStreaming && isStreamingOn || permissions?.endRoom;
      useDropdownList({ open: open || showEndStreamAlert || showLeaveRoomAlert, name: "LeaveRoom" });
      if (!permissions || !isConnected) {
        return null;
      }
      return /* @__PURE__ */ import_react57.default.createElement(import_react57.Fragment, null, showLeaveOptions ? /* @__PURE__ */ import_react57.default.createElement(Flex, null, /* @__PURE__ */ import_react57.default.createElement(
        LeaveIconButton,
        {
          key: "LeaveRoom",
          "data-testid": "leave_room_btn",
          css: {
            borderTopRightRadius: 0,
            borderBottomRightRadius: 0
          },
          onClick: () => setShowLeaveRoomAlert(true)
        },
        /* @__PURE__ */ import_react57.default.createElement(Tooltip, { title: "Leave Room" }, /* @__PURE__ */ import_react57.default.createElement(Box, null, /* @__PURE__ */ import_react57.default.createElement(import_react_icons18.ExitIcon, { style: { transform: "rotate(180deg)" } })))
      ), /* @__PURE__ */ import_react57.default.createElement(Dropdown.Root, { open, onOpenChange: setOpen, modal: false }, /* @__PURE__ */ import_react57.default.createElement(
        Dropdown.Trigger,
        {
          asChild: true,
          css: {
            '&[data-state="open"]': {
              bg: "$alert_error_dim"
            }
          }
        },
        /* @__PURE__ */ import_react57.default.createElement(MenuTriggerButton, { "data-testid": "leave_end_dropdown_trigger" }, /* @__PURE__ */ import_react57.default.createElement(import_react_icons18.VerticalMenuIcon, null))
      ), /* @__PURE__ */ import_react57.default.createElement(Dropdown.Portal, { container }, /* @__PURE__ */ import_react57.default.createElement(Dropdown.Content, { css: { p: 0, w: "$100" }, alignOffset: -50, sideOffset: 10 }, /* @__PURE__ */ import_react57.default.createElement(
        Dropdown.Item,
        {
          css: {
            bg: "$surface_dim",
            color: "$on_surface_medium",
            "&:hover": { bg: "$surface_default", color: "$on_surface_high" },
            p: "0"
          },
          "data-testid": "just_leave_btn"
        },
        /* @__PURE__ */ import_react57.default.createElement(
          LeaveCard,
          {
            title: showStream ? "Leave Stream" : "Leave Session",
            subtitle: `Others will continue after you leave. You can join the ${showStream ? "stream" : "session"} again.`,
            bg: "",
            titleColor: "$on_surface_high",
            icon: /* @__PURE__ */ import_react57.default.createElement(import_react_icons18.ExitIcon, { height: 24, width: 24, style: { transform: "rotate(180deg)" } }),
            onClick: async () => await leaveRoom(),
            css: { p: "$8 $4" }
          }
        )
      ), /* @__PURE__ */ import_react57.default.createElement(
        Dropdown.Item,
        {
          css: {
            bg: "$alert_error_dim",
            color: "$alert_error_bright",
            "&:hover": { bg: "$alert_error_dim", color: "$alert_error_brighter" },
            p: "0"
          },
          "data-testid": "end_room_btn"
        },
        /* @__PURE__ */ import_react57.default.createElement(
          LeaveCard,
          {
            title: showStream ? "End Stream" : "End Session",
            subtitle: `The ${showStream ? "stream" : "session"} will end for everyone. You can't undo this action.`,
            bg: "",
            titleColor: "$alert_error_brighter",
            icon: /* @__PURE__ */ import_react57.default.createElement(import_react_icons18.StopIcon, { height: 24, width: 24 }),
            onClick: () => {
              setOpen(false);
              setShowEndStreamAlert(true);
            },
            css: { p: "$8 $4" }
          }
        )
      ))))) : /* @__PURE__ */ import_react57.default.createElement(
        LeaveIconButton,
        {
          onClick: () => {
            setShowLeaveRoomAlert(true);
          },
          key: "LeaveRoom",
          "data-testid": "leave_room_btn"
        },
        /* @__PURE__ */ import_react57.default.createElement(Tooltip, { title: "Leave Room" }, /* @__PURE__ */ import_react57.default.createElement(Box, null, /* @__PURE__ */ import_react57.default.createElement(import_react_icons18.ExitIcon, { style: { transform: "rotate(180deg)" } })))
      ), /* @__PURE__ */ import_react57.default.createElement(Dialog.Root, { open: showEndStreamAlert, modal: false }, /* @__PURE__ */ import_react57.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react57.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react57.default.createElement(Dialog.Content, { css: { w: "min(420px, 90%)", p: "$8", bg: "$surface_dim" } }, /* @__PURE__ */ import_react57.default.createElement(
        EndSessionContent,
        {
          setShowEndStreamAlert,
          leaveRoom: isStreamingOn ? () => leaveRoom({ endStream: true }) : endRoom,
          isStreamingOn,
          isModal: true
        }
      )))), /* @__PURE__ */ import_react57.default.createElement(Dialog.Root, { open: showLeaveRoomAlert, modal: false }, /* @__PURE__ */ import_react57.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react57.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react57.default.createElement(Dialog.Content, { css: { w: "min(420px, 90%)", p: "$8", bg: "$surface_dim" } }, /* @__PURE__ */ import_react57.default.createElement(LeaveSessionContent, { setShowLeaveRoomAlert, leaveRoom, isModal: true })))));
    };
  }
});

// src/Prebuilt/components/Leave/MwebLeaveRoom.tsx
var import_react58, import_react_sdk21, import_react_icons19, MwebLeaveRoom, LeaveButton;
var init_MwebLeaveRoom = __esm({
  "src/Prebuilt/components/Leave/MwebLeaveRoom.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react58 = __toESM(require("react"));
    import_react_sdk21 = require("@100mslive/react-sdk");
    import_react_icons19 = require("@100mslive/react-icons");
    init_IconButton2();
    init_Layout();
    init_Sheet2();
    init_Tooltip2();
    init_EndSessionContent();
    init_LeaveAtoms();
    init_LeaveCard();
    init_LeaveSessionContent();
    init_useRoomLayoutScreen();
    init_useDropdownList();
    init_hooks();
    MwebLeaveRoom = ({
      leaveRoom,
      endRoom,
      container
    }) => {
      const [open, setOpen] = (0, import_react58.useState)(false);
      const { screenType } = useRoomLayoutConferencingScreen();
      const [showLeaveRoomAlert, setShowLeaveRoomAlert] = (0, import_react58.useState)(false);
      const [showEndStreamAlert, setShowEndStreamAlert] = (0, import_react58.useState)(false);
      const isConnected = (0, import_react_sdk21.useHMSStore)(import_react_sdk21.selectIsConnectedToRoom);
      const permissions = (0, import_react_sdk21.useHMSStore)(import_react_sdk21.selectPermissions);
      const { isStreamingOn } = (0, import_react_sdk21.useRecordingStreaming)();
      const showStream = screenType !== "hls_live_streaming" && isStreamingOn && permissions?.hlsStreaming;
      const showLeaveOptions = permissions?.hlsStreaming && isStreamingOn || permissions?.endRoom;
      useDropdownList({ open, name: "LeaveRoom" });
      if (!permissions || !isConnected) {
        return null;
      }
      return /* @__PURE__ */ import_react58.default.createElement(import_react58.Fragment, null, showLeaveOptions ? /* @__PURE__ */ import_react58.default.createElement(Sheet.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react58.default.createElement(Sheet.Trigger, { asChild: true }, /* @__PURE__ */ import_react58.default.createElement(
        LeaveButton,
        {
          onClick: () => {
            setOpen((open2) => !open2);
          }
        }
      )), /* @__PURE__ */ import_react58.default.createElement(Sheet.Content, { container }, /* @__PURE__ */ import_react58.default.createElement(
        LeaveCard,
        {
          title: showStream ? "Leave Stream" : "Leave Session",
          subtitle: `Others will continue after you leave. You can join the ${showStream ? "stream" : "session"} again.`,
          bg: "$surface_default",
          titleColor: "$on_surface_high",
          icon: /* @__PURE__ */ import_react58.default.createElement(import_react_icons19.ExitIcon, { height: 24, width: 24, style: { transform: "rotate(180deg)" } }),
          onClick: async () => await leaveRoom(),
          css: { pt: 0, mt: "$10", color: "$on_surface_low", "&:hover": { color: "$on_surface_high" } }
        }
      ), /* @__PURE__ */ import_react58.default.createElement(
        LeaveCard,
        {
          title: showStream ? "End Stream" : "End Session",
          subtitle: `The will end the ${showStream ? "stream" : "session"} for everyone. You can't undo this action.`,
          bg: "$alert_error_dim",
          titleColor: "$alert_error_brighter",
          css: { color: "$alert_error_bright", "&:hover": { color: "$alert_error_brighter" } },
          icon: /* @__PURE__ */ import_react58.default.createElement(import_react_icons19.StopIcon, { height: 24, width: 24 }),
          onClick: () => {
            setOpen(false);
            setShowEndStreamAlert(true);
          }
        }
      ))) : /* @__PURE__ */ import_react58.default.createElement(LeaveButton, { onClick: () => setShowLeaveRoomAlert(true) }), /* @__PURE__ */ import_react58.default.createElement(Sheet.Root, { open: showEndStreamAlert, onOpenChange: setShowEndStreamAlert }, /* @__PURE__ */ import_react58.default.createElement(Sheet.Content, { css: { bg: "$surface_dim", p: "$10", pb: "$12" }, container }, /* @__PURE__ */ import_react58.default.createElement(
        EndSessionContent,
        {
          setShowEndStreamAlert,
          leaveRoom: isStreamingOn ? leaveRoom : endRoom,
          isStreamingOn
        }
      ))), /* @__PURE__ */ import_react58.default.createElement(Sheet.Root, { open: showLeaveRoomAlert, onOpenChange: setShowLeaveRoomAlert }, /* @__PURE__ */ import_react58.default.createElement(Sheet.Content, { css: { bg: "$surface_dim", p: "$10", pb: "$12" }, container }, /* @__PURE__ */ import_react58.default.createElement(LeaveSessionContent, { setShowLeaveRoomAlert, leaveRoom }))));
    };
    LeaveButton = ({ onClick }) => {
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeHLSStream = useLandscapeHLSStream();
      return isMobileHLSStream || isLandscapeHLSStream ? /* @__PURE__ */ import_react58.default.createElement(IconButton, { key: "LeaveRoom", "data-testid": "leave_room_btn", onClick }, /* @__PURE__ */ import_react58.default.createElement(Tooltip, { title: "Leave Room" }, /* @__PURE__ */ import_react58.default.createElement(Box, null, /* @__PURE__ */ import_react58.default.createElement(import_react_icons19.CrossIcon, null)))) : /* @__PURE__ */ import_react58.default.createElement(
        LeaveIconButton,
        {
          key: "LeaveRoom",
          "data-testid": "leave_room_btn",
          css: {
            borderTopRightRadius: "$1",
            borderBottomRightRadius: "$1"
          },
          onClick
        },
        /* @__PURE__ */ import_react58.default.createElement(Tooltip, { title: "Leave Room" }, /* @__PURE__ */ import_react58.default.createElement(Box, null, /* @__PURE__ */ import_react58.default.createElement(import_react_icons19.ExitIcon, { style: { transform: "rotate(180deg)" } })))
      );
    };
  }
});

// src/Prebuilt/components/Leave/LeaveRoom.tsx
var import_react59, import_react_use10, import_react_sdk22, LeaveRoom;
var init_LeaveRoom = __esm({
  "src/Prebuilt/components/Leave/LeaveRoom.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react59 = __toESM(require("react"));
    import_react_use10 = require("react-use");
    import_react_sdk22 = require("@100mslive/react-sdk");
    init_Theme();
    init_ToastManager();
    init_DesktopLeaveRoom();
    init_MwebLeaveRoom();
    init_hooks();
    LeaveRoom = ({
      screenType,
      container
    }) => {
      const isConnected = (0, import_react_sdk22.useHMSStore)(import_react_sdk22.selectIsConnectedToRoom);
      const permissions = (0, import_react_sdk22.useHMSStore)(import_react_sdk22.selectPermissions);
      const isMobile = (0, import_react_use10.useMedia)(config.media.md);
      const rolesMap = (0, import_react_sdk22.useHMSStore)(import_react_sdk22.selectRolesMap);
      const streamingPermissionRoles = Object.keys(rolesMap).filter((roleName) => {
        const roleObj = rolesMap[roleName];
        return roleObj.permissions.hlsStreaming;
      });
      const peersWithStreamingRights = (0, import_react_sdk22.useHMSStore)(
        (0, import_react_sdk22.selectPeersByCondition)((peer) => streamingPermissionRoles.includes(peer.roleName || ""))
      );
      const hlsState = (0, import_react_sdk22.useHMSStore)(import_react_sdk22.selectHLSState);
      const hmsActions = (0, import_react_sdk22.useHMSActions)();
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeHLSStream = useLandscapeHLSStream();
      const stopStream = async () => {
        try {
          if (permissions?.hlsStreaming) {
            console.log("Stopping HLS stream");
            await hmsActions.stopHLSStreaming();
            ToastManager.addToast({ title: "Stopping the stream" });
          }
        } catch (e) {
          console.error("Error stopping stream", e);
          ToastManager.addToast({ title: "Error in stopping the stream", type: "error" });
        }
      };
      const endRoom = async () => {
        await hmsActions.endRoom(false, "End Room");
      };
      const leaveRoom = async (options = { endStream: false }) => {
        if (options.endStream || hlsState.running && peersWithStreamingRights.length === 1) {
          await stopStream();
        }
        await hmsActions.leave();
      };
      if (!permissions || !isConnected) {
        return null;
      }
      if (isMobileHLSStream || isLandscapeHLSStream) {
        return /* @__PURE__ */ import_react59.default.createElement(MwebLeaveRoom, { leaveRoom, endRoom, container });
      }
      return isMobile ? /* @__PURE__ */ import_react59.default.createElement(MwebLeaveRoom, { leaveRoom, endRoom, container }) : /* @__PURE__ */ import_react59.default.createElement(DesktopLeaveRoom, { leaveRoom, screenType, endRoom, container });
    };
  }
});

// src/Prebuilt/components/PIP/SetupMediaSession.js
var import_react_sdk23, SetupMediaSession, MediaSession;
var init_SetupMediaSession = __esm({
  "src/Prebuilt/components/PIP/SetupMediaSession.js"() {
    "use strict";
    init_cjs_shims();
    import_react_sdk23 = require("@100mslive/react-sdk");
    SetupMediaSession = class {
      setup = (actions, store) => {
        this.actions = actions;
        this.store = store;
        this.initState();
        this.setUpHandlers();
      };
      initState = () => {
        const isMicActive = this.store.getState(import_react_sdk23.selectIsLocalAudioEnabled);
        const isCamActive = this.store.getState(import_react_sdk23.selectIsLocalVideoEnabled);
        navigator.mediaSession?.setMicrophoneActive?.(isMicActive);
        navigator.mediaSession?.setCameraActive?.(isCamActive);
        this.store.subscribe((isMicActive2) => {
          navigator.mediaSession?.setMicrophoneActive?.(isMicActive2);
        }, import_react_sdk23.selectIsLocalAudioEnabled);
        this.store.subscribe((isCamActive2) => {
          navigator.mediaSession?.setCameraActive?.(isCamActive2);
        }, import_react_sdk23.selectIsLocalVideoEnabled);
      };
      toggleMic = async () => {
        console.log("toggle mic clicked in pip");
        const current = this.store.getState(import_react_sdk23.selectIsLocalAudioEnabled);
        await this.actions.setLocalAudioEnabled(!current);
      };
      toggleCam = async () => {
        console.log("toggle cam clicked in pip");
        const current = this.store.getState(import_react_sdk23.selectIsLocalVideoEnabled);
        await this.actions.setLocalVideoEnabled(!current);
      };
      leave = () => {
        console.log("leave called from pip");
        this.actions.leave();
      };
      setUpHandlers = () => {
        if (navigator.mediaSession) {
          try {
            navigator.mediaSession.setActionHandler("togglemicrophone", this.toggleMic);
            navigator.mediaSession.setActionHandler("togglecamera", this.toggleCam);
            navigator.mediaSession.setActionHandler("hangup", this.leave);
          } catch (err) {
            console.error("error in setting media session handlers", err);
          }
        }
      };
    };
    MediaSession = new SetupMediaSession();
  }
});

// src/Prebuilt/components/PIP/PIPComponent.tsx
var import_react60, import_react_sdk24, import_react_icons20, PIPComponent, ActivatedPIP, PIPComponent_default;
var init_PIPComponent = __esm({
  "src/Prebuilt/components/PIP/PIPComponent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react60 = __toESM(require("react"));
    import_react_sdk24 = require("@100mslive/react-sdk");
    import_react_icons20 = require("@100mslive/react-icons");
    init_src();
    init_IconButton3();
    init_PIPManager();
    init_SetupMediaSession();
    init_useUISettings();
    PIPComponent = ({ content = null }) => {
      const [isPipOn, setIsPipOn] = (0, import_react60.useState)(PictureInPicture.isOn());
      const hmsActions = (0, import_react_sdk24.useHMSActions)();
      const store = (0, import_react_sdk24.useHMSVanillaStore)();
      const onPipToggle = (0, import_react60.useCallback)(() => {
        if (!isPipOn) {
          PictureInPicture.start(hmsActions, setIsPipOn).catch((err) => console.error("error in starting pip", err));
          MediaSession.setup(hmsActions, store);
        } else {
          PictureInPicture.stop().catch((err) => console.error("error in stopping pip", err));
        }
      }, [hmsActions, isPipOn, store]);
      if (!PictureInPicture.isSupported()) {
        return null;
      }
      return /* @__PURE__ */ import_react60.default.createElement(import_react60.default.Fragment, null, content ? /* @__PURE__ */ import_react60.default.createElement(Flex, { css: { w: "100%" }, onClick: () => onPipToggle(), "data-testid": "pip_btn" }, content) : /* @__PURE__ */ import_react60.default.createElement(Tooltip, { title: `${isPipOn ? "Deactivate" : "Activate"} picture in picture view` }, /* @__PURE__ */ import_react60.default.createElement(IconButton_default, { active: !isPipOn, key: "pip", onClick: () => onPipToggle(), "data-testid": "pip_btn" }, /* @__PURE__ */ import_react60.default.createElement(import_react_icons20.PipIcon, null))));
    };
    ActivatedPIP = () => {
      const store = (0, import_react_sdk24.useHMSVanillaStore)();
      const pinnedTrack = usePinnedTrack();
      (0, import_react60.useEffect)(() => {
        function subscribeToStore() {
          return store.subscribe((tracksMap) => {
            let pipPeers = store.getState(import_react_sdk24.selectPeers);
            if (pinnedTrack) {
              pipPeers = pipPeers.filter((peer) => pinnedTrack.peerId === peer.id);
            }
            PictureInPicture.updatePeersAndTracks(pipPeers, tracksMap).catch((err) => {
              console.error("error in updating pip", err);
            });
          }, import_react_sdk24.selectTracksMap);
        }
        let unsubscribe = PictureInPicture.isOn() ? subscribeToStore() : void 0;
        PictureInPicture.listenToStateChange((isOn) => {
          if (isOn) {
            if (!unsubscribe) {
              unsubscribe = subscribeToStore();
            }
          } else {
            unsubscribe?.();
            unsubscribe = void 0;
          }
        });
        return () => {
          unsubscribe?.();
          unsubscribe = void 0;
        };
      }, [pinnedTrack, store]);
      return /* @__PURE__ */ import_react60.default.createElement(import_react60.default.Fragment, null);
    };
    PIPComponent_default = PIPComponent;
  }
});

// src/Prebuilt/components/PIP/index.jsx
var import_react61, PIP;
var init_PIP = __esm({
  "src/Prebuilt/components/PIP/index.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react61 = __toESM(require("react"));
    init_PIPComponent();
    PIP = ({ content = null }) => {
      return /* @__PURE__ */ import_react61.default.createElement(PIPComponent_default, { content });
    };
  }
});

// src/TextArea/TextArea.tsx
var TextArea;
var init_TextArea = __esm({
  "src/TextArea/TextArea.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    TextArea = styled("textarea", {
      fontFamily: "$sans",
      lineHeight: "inherit",
      backgroundColor: "$surface_default",
      borderRadius: "8px",
      outline: "none",
      border: "1px solid $border_default",
      padding: "0.5rem 0.75rem",
      minHeight: "30px",
      color: "$on_surface_high",
      fontSize: "$md",
      "&:focus": {
        boxShadow: "0 0 0 1px $colors$primary_default",
        border: "1px solid transparent"
      },
      "&::placeholder": {
        color: "$on_surface_medium"
      },
      variants: {
        error: {
          true: {
            "&:focus": {
              boxShadow: "0 0 0 3px $colors$alert_error_default"
            }
          }
        }
      }
    });
  }
});

// src/TextArea/index.tsx
var init_TextArea2 = __esm({
  "src/TextArea/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_TextArea();
  }
});

// src/Prebuilt/components/Chat/MwebChatOption.tsx
var import_react62, MwebChatOption;
var init_MwebChatOption = __esm({
  "src/Prebuilt/components/Chat/MwebChatOption.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react62 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    MwebChatOption = ({
      icon,
      text,
      onClick,
      color = "$on_surface_high"
    }) => {
      return /* @__PURE__ */ import_react62.default.createElement(Flex, { align: "center", css: { w: "100%", color, cursor: "pointer", gap: "$4", p: "$8" }, onClick }, icon, /* @__PURE__ */ import_react62.default.createElement(Text, { variant: "sm", css: { color, fontWeight: "$semiBold" } }, text));
    };
  }
});

// src/Prebuilt/components/hooks/useChatBlacklist.ts
var import_react63, import_react_sdk25, useChatBlacklist, useIsPeerBlacklisted;
var init_useChatBlacklist = __esm({
  "src/Prebuilt/components/hooks/useChatBlacklist.ts"() {
    "use strict";
    init_cjs_shims();
    import_react63 = require("react");
    import_react_sdk25 = require("@100mslive/react-sdk");
    init_ToastManager();
    useChatBlacklist = (sessionStoreKey) => {
      const hmsActions = (0, import_react_sdk25.useHMSActions)();
      const blacklistedIDs = (0, import_react_sdk25.useHMSStore)((0, import_react_sdk25.selectSessionStore)(sessionStoreKey));
      const blacklistItem = (0, import_react63.useCallback)(
        async (blacklistID) => {
          await hmsActions.sessionStore.set(sessionStoreKey, [...blacklistedIDs || [], blacklistID]).catch((err) => ToastManager.addToast({ title: err.description }));
        },
        [hmsActions, sessionStoreKey, blacklistedIDs]
      );
      return { blacklistItem, blacklistedIDs };
    };
    useIsPeerBlacklisted = ({ local = false, peerCustomerUserId = "" }) => {
      const localPeer = (0, import_react_sdk25.useHMSStore)(import_react_sdk25.selectLocalPeer);
      const blacklistedPeerIDs = (0, import_react_sdk25.useHMSStore)((0, import_react_sdk25.selectSessionStore)("chatPeerBlacklist" /* CHAT_PEER_BLACKLIST */)) || [];
      return blacklistedPeerIDs?.includes(local ? localPeer?.customerUserId : peerCustomerUserId);
    };
  }
});

// src/Prebuilt/components/hooks/usePinnedMessages.ts
var import_react64, import_react_sdk26, usePinnedMessages;
var init_usePinnedMessages = __esm({
  "src/Prebuilt/components/hooks/usePinnedMessages.ts"() {
    "use strict";
    init_cjs_shims();
    import_react64 = require("react");
    import_react_sdk26 = require("@100mslive/react-sdk");
    init_ToastManager();
    usePinnedMessages = () => {
      const hmsActions = (0, import_react_sdk26.useHMSActions)();
      const vanillaStore = (0, import_react_sdk26.useHMSVanillaStore)();
      const setPinnedMessages = (0, import_react64.useCallback)(
        async (message, pinnedBy) => {
          const peerName = vanillaStore.getState((0, import_react_sdk26.selectPeerNameByID)(message?.sender)) || message?.senderName;
          const newPinnedMessage = { text: "", id: message.id, pinnedBy };
          if (message && peerName) {
            newPinnedMessage["text"] = `${peerName}: ${message.message}`;
          } else if (message) {
            newPinnedMessage["text"] = message.message;
          }
          const pinnedMessages = vanillaStore.getState((0, import_react_sdk26.selectSessionStore)("pinnedMessages" /* PINNED_MESSAGES */)) || [];
          if (!pinnedMessages?.find((pinnedMessage) => pinnedMessage.id === newPinnedMessage.id)) {
            await hmsActions.sessionStore.set("pinnedMessages" /* PINNED_MESSAGES */, [...pinnedMessages, newPinnedMessage].slice(-3)).catch((err) => ToastManager.addToast({ title: err.description }));
          }
        },
        [hmsActions, vanillaStore]
      );
      const removePinnedMessage = (0, import_react64.useCallback)(
        async (indexToRemove) => {
          const pinnedMessages = vanillaStore.getState((0, import_react_sdk26.selectSessionStore)("pinnedMessages" /* PINNED_MESSAGES */)) || [];
          if (pinnedMessages[indexToRemove]) {
            await hmsActions.sessionStore.set(
              "pinnedMessages" /* PINNED_MESSAGES */,
              pinnedMessages.filter((_, index) => index !== indexToRemove)
            ).catch((err) => ToastManager.addToast({ title: err.description }));
          }
        },
        [hmsActions, vanillaStore]
      );
      const unpinBlacklistedMessages = (0, import_react64.useCallback)(
        async (blacklistedMessageIDSet) => {
          const pinnedMessages = vanillaStore.getState((0, import_react_sdk26.selectSessionStore)("pinnedMessages" /* PINNED_MESSAGES */)) || [];
          const filteredPinnedMessages = pinnedMessages?.filter(
            (pinnedMessage) => !blacklistedMessageIDSet?.has(pinnedMessage.id)
          );
          await hmsActions.sessionStore.set("pinnedMessages" /* PINNED_MESSAGES */, filteredPinnedMessages).catch((err) => ToastManager.addToast({ title: err.description }));
        },
        [hmsActions, vanillaStore]
      );
      return { setPinnedMessages, removePinnedMessage, unpinBlacklistedMessages };
    };
  }
});

// src/Prebuilt/components/Chat/ChatActions.tsx
var import_react65, import_react_sdk27, import_react_icons21, iconStyle, tooltipBoxCSS, ChatActions;
var init_ChatActions = __esm({
  "src/Prebuilt/components/Chat/ChatActions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react65 = __toESM(require("react"));
    import_react_sdk27 = require("@100mslive/react-sdk");
    import_react_icons21 = require("@100mslive/react-icons");
    init_Dropdown2();
    init_IconButton2();
    init_Layout();
    init_Sheet2();
    init_Text2();
    init_Tooltip2();
    init_ToastManager();
    init_MwebChatOption();
    init_useRoomLayoutScreen();
    init_useChatBlacklist();
    init_usePinnedMessages();
    iconStyle = { height: "1.125rem", width: "1.125rem" };
    tooltipBoxCSS = {
      fontSize: "$xs",
      backgroundColor: "$surface_default",
      p: "$1 $5",
      fontWeight: "$regular",
      borderRadius: "$3"
    };
    ChatActions = ({
      showPinAction,
      onReply,
      onReplyGroup,
      showReply,
      message,
      sentByLocalPeer,
      isMobile,
      openSheet,
      setOpenSheet
    }) => {
      const { elements } = useRoomLayoutConferencingScreen();
      const { can_hide_message = false, can_block_user = false } = elements?.chat?.real_time_controls || {};
      const { roles_whitelist = [] } = elements?.chat || {};
      const [open, setOpen] = (0, import_react65.useState)(false);
      const actions = (0, import_react_sdk27.useHMSActions)();
      const canRemoveOthers = (0, import_react_sdk27.useHMSStore)(import_react_sdk27.selectPermissions)?.removeOthers;
      const { blacklistItem: blacklistPeer } = useChatBlacklist("chatPeerBlacklist" /* CHAT_PEER_BLACKLIST */);
      const localPeerName = (0, import_react_sdk27.useHMSStore)(import_react_sdk27.selectLocalPeerName);
      const { setPinnedMessages, unpinBlacklistedMessages } = usePinnedMessages();
      const { blacklistItem: blacklistMessage, blacklistedIDs: blacklistedMessageIDs } = useChatBlacklist(
        "chatMessageBlacklist" /* CHAT_MESSAGE_BLACKLIST */
      );
      const isSenderBlocked = useIsPeerBlacklisted({ peerCustomerUserId: message.senderUserId });
      const updatePinnedMessages = (0, import_react65.useCallback)(
        (messageID = "") => {
          const blacklistedMessageIDSet = /* @__PURE__ */ new Set([...blacklistedMessageIDs || [], messageID]);
          unpinBlacklistedMessages(blacklistedMessageIDSet);
        },
        [blacklistedMessageIDs, unpinBlacklistedMessages]
      );
      const copyMessageContent = (0, import_react65.useCallback)(() => {
        try {
          navigator?.clipboard.writeText(message.message);
          ToastManager.addToast({
            title: "Message copied successfully"
          });
        } catch (e) {
          console.log(e);
          ToastManager.addToast({
            title: "Could not copy message"
          });
        }
      }, [message]);
      const options = {
        reply: {
          text: "Reply privately",
          tooltipText: "Reply privately",
          icon: /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.ReplyIcon, { style: iconStyle }),
          onClick: onReply,
          show: showReply
        },
        replyGroup: {
          text: "Reply to group",
          tooltipText: "Reply to group",
          icon: /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.ReplyGroupIcon, { style: iconStyle }),
          onClick: onReplyGroup,
          show: !!message.senderRole && roles_whitelist.includes(message.senderRole)
        },
        pin: {
          text: "Pin message",
          tooltipText: "Pin",
          icon: /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.PinIcon, { style: iconStyle }),
          onClick: () => setPinnedMessages(message, localPeerName || ""),
          show: showPinAction
        },
        copy: {
          text: "Copy text",
          tooltipText: "Copy",
          icon: /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.CopyIcon, { style: iconStyle }),
          onClick: copyMessageContent,
          show: true
        },
        hide: {
          text: message.recipientPeer ? "Hide for both" : "Hide for everyone",
          icon: /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.EyeCloseIcon, { style: iconStyle }),
          onClick: async () => {
            blacklistMessage(message.id);
            updatePinnedMessages(message.id);
          },
          show: !!can_hide_message
        },
        block: {
          text: "Block from chat",
          icon: /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.CrossCircleIcon, { style: iconStyle }),
          onClick: async () => {
            if (message.senderUserId) {
              blacklistPeer(message.senderUserId);
            }
          },
          color: "$alert_error_default",
          show: !!can_block_user && !sentByLocalPeer && !isSenderBlocked
        },
        remove: {
          text: "Remove participant",
          icon: /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.PeopleRemoveIcon, { style: iconStyle }),
          color: "$alert_error_default",
          show: !!canRemoveOthers && !sentByLocalPeer,
          onClick: async () => {
            if (!message.sender) {
              return;
            }
            try {
              await actions.removePeer(message.sender, "");
            } catch (error) {
              ToastManager.addToast({ title: error.message, variant: "error" });
            }
          }
        }
      };
      if (isMobile) {
        return /* @__PURE__ */ import_react65.default.createElement(Sheet.Root, { open: openSheet, onOpenChange: setOpenSheet }, /* @__PURE__ */ import_react65.default.createElement(Sheet.Content, { css: { bg: "$surface_default", pb: "$14" }, onClick: (e) => setOpenSheet(false, e) }, /* @__PURE__ */ import_react65.default.createElement(
          Sheet.Title,
          {
            css: {
              display: "flex",
              color: "$on_surface_high",
              w: "100%",
              justifyContent: "space-between",
              mt: "$8",
              fontSize: "$md",
              px: "$10",
              pb: "$8",
              borderBottom: "1px solid $border_bright",
              alignItems: "center"
            }
          },
          "Message options",
          /* @__PURE__ */ import_react65.default.createElement(Sheet.Close, { css: { color: "$on_surface_high" }, onClick: (e) => setOpenSheet(false, e) }, /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.CrossIcon, null))
        ), Object.keys(options).map((optionKey) => {
          const option = options[optionKey];
          return option.show ? /* @__PURE__ */ import_react65.default.createElement(
            MwebChatOption,
            {
              key: optionKey,
              text: option.text,
              icon: option.icon,
              onClick: option.onClick,
              color: option?.color
            }
          ) : null;
        })));
      }
      return /* @__PURE__ */ import_react65.default.createElement(Dropdown.Root, { open, onOpenChange: setOpen, css: { "@md": { display: "none" } } }, /* @__PURE__ */ import_react65.default.createElement(
        Flex,
        {
          className: "chat_actions",
          css: {
            background: "$surface_bright",
            borderRadius: "$1",
            p: "$2",
            opacity: open ? 1 : 0,
            position: "absolute",
            top: 0,
            right: 0,
            zIndex: 1,
            "@md": { opacity: 1 }
          }
        },
        options.reply.show ? /* @__PURE__ */ import_react65.default.createElement(Tooltip, { boxCss: tooltipBoxCSS, title: options.reply.tooltipText }, /* @__PURE__ */ import_react65.default.createElement(IconButton, { "data-testid": "reply_message_btn", onClick: options.reply.onClick }, options.reply.icon)) : null,
        options.replyGroup.show ? /* @__PURE__ */ import_react65.default.createElement(Tooltip, { boxCss: tooltipBoxCSS, title: options.replyGroup.tooltipText }, /* @__PURE__ */ import_react65.default.createElement(IconButton, { "data-testid": "reply_group_message_btn", onClick: options.replyGroup.onClick }, options.replyGroup.icon)) : null,
        options.pin.show ? /* @__PURE__ */ import_react65.default.createElement(Tooltip, { boxCss: tooltipBoxCSS, title: options.pin.tooltipText }, /* @__PURE__ */ import_react65.default.createElement(IconButton, { "data-testid": "pin_message_btn", onClick: options.pin.onClick }, options.pin.icon)) : null,
        options.copy.show ? /* @__PURE__ */ import_react65.default.createElement(Tooltip, { boxCss: tooltipBoxCSS, title: options.copy.tooltipText }, /* @__PURE__ */ import_react65.default.createElement(IconButton, { onClick: options.copy.onClick, "data-testid": "copy_message_btn" }, /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.CopyIcon, { style: iconStyle }))) : null,
        options.block.show || options.hide.show || options.remove.show ? /* @__PURE__ */ import_react65.default.createElement(Tooltip, { boxCss: tooltipBoxCSS, title: "More actions" }, /* @__PURE__ */ import_react65.default.createElement(Dropdown.Trigger, { asChild: true }, /* @__PURE__ */ import_react65.default.createElement(IconButton, null, /* @__PURE__ */ import_react65.default.createElement(import_react_icons21.VerticalMenuIcon, { style: iconStyle })))) : null
      ), /* @__PURE__ */ import_react65.default.createElement(Dropdown.Portal, null, /* @__PURE__ */ import_react65.default.createElement(
        Dropdown.Content,
        {
          sideOffset: 5,
          align: "end",
          css: { width: "$48", backgroundColor: "$surface_bright", py: "$0", border: "1px solid $border_bright" }
        },
        options.hide.show ? /* @__PURE__ */ import_react65.default.createElement(Dropdown.Item, { "data-testid": "hide_message_btn", onClick: options.hide.onClick }, options.hide.icon, /* @__PURE__ */ import_react65.default.createElement(Text, { variant: "sm", css: { ml: "$4", fontWeight: "$semiBold" } }, options.hide.text)) : null,
        options.block.show ? /* @__PURE__ */ import_react65.default.createElement(
          Dropdown.Item,
          {
            "data-testid": "block_peer_btn",
            onClick: options.block.onClick,
            css: { color: options.block.color }
          },
          options.block.icon,
          /* @__PURE__ */ import_react65.default.createElement(Text, { variant: "sm", css: { ml: "$4", color: "inherit", fontWeight: "$semiBold" } }, options.block.text)
        ) : null,
        options.remove.show ? /* @__PURE__ */ import_react65.default.createElement(
          Dropdown.Item,
          {
            "data-testid": "remove_peer_btn",
            onClick: options.remove.onClick,
            css: { color: options.remove.color }
          },
          options.remove.icon,
          /* @__PURE__ */ import_react65.default.createElement(Text, { variant: "sm", css: { ml: "$4", color: "inherit", fontWeight: "$semiBold" } }, options.remove.text)
        ) : null
      )));
    };
  }
});

// src/Prebuilt/images/empty-chat.svg
var empty_chat_default;
var init_empty_chat = __esm({
  "src/Prebuilt/images/empty-chat.svg"() {
    empty_chat_default = "./empty-chat-OGLOWU2Y.svg";
  }
});

// src/Prebuilt/components/Chat/EmptyChat.tsx
var import_react66, import_react_use11, EmptyChat;
var init_EmptyChat = __esm({
  "src/Prebuilt/components/Chat/EmptyChat.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react66 = __toESM(require("react"));
    import_react_use11 = require("react-use");
    init_Layout();
    init_Text2();
    init_Theme();
    init_empty_chat();
    init_useRoomLayoutScreen();
    init_useChatBlacklist();
    init_hooks();
    EmptyChat = () => {
      const { elements } = useRoomLayoutConferencingScreen();
      const isLocalPeerBlacklisted = useIsPeerBlacklisted({ local: true });
      const isMobile = (0, import_react_use11.useMedia)(config.media.md);
      const canSendMessages = elements.chat && (elements.chat.public_chat_enabled || elements.chat.private_chat_enabled || elements.chat.roles_whitelist && elements.chat.roles_whitelist.length) && !isLocalPeerBlacklisted;
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeStream = useLandscapeHLSStream();
      const streaming = isMobileHLSStream || isLandscapeStream;
      if (isMobile && elements?.chat?.is_overlay && !streaming) return /* @__PURE__ */ import_react66.default.createElement(import_react66.default.Fragment, null);
      return /* @__PURE__ */ import_react66.default.createElement(
        Flex,
        {
          css: {
            width: "100%",
            flex: "1 1 0",
            textAlign: "center",
            px: "$4"
          },
          align: "center",
          justify: "center"
        },
        /* @__PURE__ */ import_react66.default.createElement(Box, null, /* @__PURE__ */ import_react66.default.createElement(Box, { css: { m: "0 auto", mt: "$4", "@media (max-height: 575px)": { display: "none" } } }, /* @__PURE__ */ import_react66.default.createElement("img", { src: empty_chat_default, style: { display: "inline" }, alt: "Empty Chat", height: 132, width: 185 })), /* @__PURE__ */ import_react66.default.createElement(Text, { variant: "h5", css: { mt: "$8", c: "$on_surface_high" } }, canSendMessages ? "Start a conversation" : "No messages yet"), canSendMessages ? /* @__PURE__ */ import_react66.default.createElement(
          Text,
          {
            variant: "sm",
            css: { mt: "$4", maxWidth: "80%", textAlign: "center", mx: "auto", c: "$on_surface_medium" }
          },
          "There are no messages here yet. Start a conversation by sending a message."
        ) : null)
      );
    };
  }
});

// src/Prebuilt/components/hooks/usePinnedBy.tsx
var import_react67, import_react_sdk28, usePinnedBy;
var init_usePinnedBy = __esm({
  "src/Prebuilt/components/hooks/usePinnedBy.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react67 = require("react");
    import_react_sdk28 = require("@100mslive/react-sdk");
    usePinnedBy = (messageId) => {
      const pinnedMessages = (0, import_react_sdk28.useHMSStore)((0, import_react_sdk28.selectSessionStore)("pinnedMessages" /* PINNED_MESSAGES */));
      const [pinnedBy, setPinnedBy] = (0, import_react67.useState)("");
      (0, import_react67.useEffect)(() => {
        let match18 = "";
        pinnedMessages?.forEach((pinnedMessage) => {
          if (pinnedMessage.id === messageId) {
            match18 = pinnedMessage.pinnedBy;
          }
        });
        setPinnedBy(match18);
      }, [messageId, pinnedMessages]);
      return pinnedBy;
    };
  }
});

// src/Prebuilt/components/Chat/utils.ts
var formatTime2, CHAT_MESSAGE_LIMIT;
var init_utils3 = __esm({
  "src/Prebuilt/components/Chat/utils.ts"() {
    "use strict";
    init_cjs_shims();
    formatTime2 = (date) => {
      if (!(date instanceof Date)) {
        return "";
      }
      const hours = date.getHours();
      const minutes = date.getMinutes();
      const suffix = hours > 11 ? "PM" : "AM";
      return `${hours < 10 ? "0" : ""}${hours}:${minutes < 10 ? "0" : ""}${minutes} ${suffix}`;
    };
    CHAT_MESSAGE_LIMIT = 2e3;
  }
});

// src/Prebuilt/components/Chat/ChatBody.tsx
function getRowHeight(index) {
  return rowHeights[index]?.size || 72;
}
var import_react68, import_react_use12, import_react_virtualized_auto_sizer, import_react_window, import_react_sdk29, import_react_icons22, rowHeights, listInstance, setRowHeight, getMessageBackgroundColor, MessageTypeContainer, MessageType, URL_REGEX, Link2, AnnotisedMessage, getMessageType, SenderName, ChatMessage, MessageWrapper, VirtualizedChatMessages, ChatBody, PinnedBy;
var init_ChatBody = __esm({
  "src/Prebuilt/components/Chat/ChatBody.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react68 = __toESM(require("react"));
    import_react_use12 = require("react-use");
    import_react_virtualized_auto_sizer = __toESM(require("react-virtualized-auto-sizer"));
    import_react_window = require("react-window");
    import_react_sdk29 = require("@100mslive/react-sdk");
    import_react_icons22 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_Theme();
    init_Tooltip2();
    init_ChatActions();
    init_EmptyChat();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_usePinnedBy();
    init_utils3();
    init_constants();
    rowHeights = {};
    listInstance = null;
    setRowHeight = (index, id, size) => {
      if (rowHeights[index]?.id === id && rowHeights[index]?.size === size) {
        return;
      }
      listInstance?.resetAfterIndex(Math.max(index - 1, 0));
      Object.assign(rowHeights, { [index]: { size, id } });
    };
    getMessageBackgroundColor = (messageType, selectedPeerID, selectedRole, isOverlay) => {
      if (messageType && !(selectedPeerID || selectedRole)) {
        return isOverlay ? "rgba(0, 0, 0, 0.64)" : "$surface_default";
      }
      return "";
    };
    MessageTypeContainer = ({ left, right }) => {
      return /* @__PURE__ */ import_react68.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            ml: "$2",
            mr: "$4",
            gap: "$space$2",
            flexWrap: "nowrap"
          }
        },
        left && /* @__PURE__ */ import_react68.default.createElement(
          Text,
          {
            variant: "xs",
            as: "span",
            css: {
              color: "$on_surface_medium",
              textTransform: "capitalize",
              fontWeight: "$regular",
              whiteSpace: "nowrap"
            }
          },
          left
        ),
        right && /* @__PURE__ */ import_react68.default.createElement(
          Text,
          {
            as: "span",
            variant: "overline",
            css: {
              color: "$on_surface_medium",
              fontWeight: "$regular",
              whiteSpace: "nowrap"
            }
          },
          right
        )
      );
    };
    MessageType = ({
      roles,
      hasCurrentUserSent,
      receiver
    }) => {
      const peerName = (0, import_react_sdk29.useHMSStore)((0, import_react_sdk29.selectPeerNameByID)(receiver));
      const localPeerRoleName = (0, import_react_sdk29.useHMSStore)(import_react_sdk29.selectLocalPeerRoleName);
      if (receiver) {
        return /* @__PURE__ */ import_react68.default.createElement(MessageTypeContainer, { left: hasCurrentUserSent ? `${peerName ? `to ${peerName}` : ""}` : "to You", right: "(DM)" });
      }
      if (roles && roles.length) {
        return /* @__PURE__ */ import_react68.default.createElement(MessageTypeContainer, { left: `to ${hasCurrentUserSent ? roles[0] : localPeerRoleName}`, right: "(Group)" });
      }
      return null;
    };
    URL_REGEX = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;
    Link2 = styled("a", {
      color: "$primary_default",
      wordBreak: "break-word",
      "&:hover": {
        textDecoration: "underline"
      }
    });
    AnnotisedMessage = ({ message, length }) => {
      if (!message) {
        return /* @__PURE__ */ import_react68.default.createElement(import_react68.Fragment, null);
      }
      return /* @__PURE__ */ import_react68.default.createElement(import_react68.Fragment, null, message.trim().split(/(\s)/).map(
        (part) => URL_REGEX.test(part) ? /* @__PURE__ */ import_react68.default.createElement(Link2, { href: part, key: part, target: "_blank", rel: "noopener noreferrer" }, part.slice(0, length)) : part.slice(0, length)
      ));
    };
    getMessageType = ({ roles, receiver }) => {
      if (roles && roles.length > 0) {
        return "role";
      }
      return receiver ? "private" : "";
    };
    SenderName = styled(Text, {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      width: "100%",
      minWidth: 0,
      color: "$on_surface_high",
      fontWeight: "$semiBold"
    });
    ChatMessage = import_react68.default.memo(
      ({ index, style = {}, message }) => {
        const { elements } = useRoomLayoutConferencingScreen();
        const rowRef = (0, import_react68.useRef)(null);
        const isMobile = (0, import_react_use12.useMedia)(config.media.md);
        const isPrivateChatEnabled = !!elements?.chat?.private_chat_enabled;
        const isOverlay = elements?.chat?.is_overlay && isMobile;
        const localPeerId = (0, import_react_sdk29.useHMSStore)(import_react_sdk29.selectLocalPeerID);
        const [selectedRole, setRoleSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.ROLE);
        const [selectedPeer, setPeerSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.PEER);
        const messageType = getMessageType({
          roles: message.recipientRoles,
          receiver: message.recipientPeer
        });
        const [openSheet, setOpenSheetBare] = (0, import_react68.useState)(false);
        const showPinAction = !!elements?.chat?.allow_pinning_messages;
        const showReply = message.sender !== selectedPeer.id && message.sender !== localPeerId && isPrivateChatEnabled;
        (0, import_react68.useLayoutEffect)(() => {
          if (rowRef.current) {
            setRowHeight(index, message.id, rowRef.current.clientHeight);
          }
        }, [index, message.id]);
        const setOpenSheet = (value, e) => {
          e?.stopPropagation();
          setOpenSheetBare(value);
        };
        return /* @__PURE__ */ import_react68.default.createElement(
          Box,
          {
            css: {
              mb: "$5",
              pr: "$10",
              mt: "$4",
              "&:not(:hover} .chat_actions": { display: "none" },
              "&:hover .chat_actions": { display: "flex", opacity: 1 }
            },
            style
          },
          /* @__PURE__ */ import_react68.default.createElement(
            Flex,
            {
              ref: rowRef,
              align: "center",
              css: {
                flexWrap: "wrap",
                position: "relative",
                // Theme independent color, token should not be used for transparent chat
                background: getMessageBackgroundColor(messageType, selectedPeer.id, selectedRole, !!isOverlay),
                r: "$1",
                p: "$4",
                userSelect: "none",
                "@md": {
                  cursor: "pointer"
                },
                "&:hover": {
                  background: "linear-gradient(277deg, $surface_default 0%, $surface_dim 60.87%)"
                }
              },
              "data-testid": "chat_msg",
              onClick: (e) => {
                if (isMobile) {
                  setOpenSheet(true, e);
                }
              }
            },
            /* @__PURE__ */ import_react68.default.createElement(PinnedBy, { messageId: message.id, index, rowRef }),
            /* @__PURE__ */ import_react68.default.createElement(
              Text,
              {
                css: {
                  color: isOverlay ? "#FFF" : "$on_surface_high",
                  fontWeight: "$semiBold",
                  display: "flex",
                  alignItems: "center",
                  alignSelf: "stretch",
                  width: "100%"
                },
                as: "div"
              },
              /* @__PURE__ */ import_react68.default.createElement(
                Flex,
                {
                  align: "baseline",
                  css: {
                    flexWrap: "nowrap",
                    maxWidth: "calc(100% - 10ch)",
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap"
                  }
                },
                message.senderName === "You" || !message.senderName ? /* @__PURE__ */ import_react68.default.createElement(
                  SenderName,
                  {
                    as: "span",
                    variant: "sub2",
                    css: { color: isOverlay ? "#FFF" : "$on_surface_high", fontWeight: "$semiBold" }
                  },
                  message.senderName || "Anonymous"
                ) : /* @__PURE__ */ import_react68.default.createElement(Tooltip, { title: message.senderName, side: "top", align: "start", boxCss: { zIndex: 50 } }, /* @__PURE__ */ import_react68.default.createElement(
                  SenderName,
                  {
                    as: "span",
                    variant: "sub2",
                    css: { color: isOverlay ? "#FFF" : "$on_surface_high", fontWeight: "$semiBold" }
                  },
                  message.sender === localPeerId ? `${message.senderName} (You)` : message.senderName
                )),
                /* @__PURE__ */ import_react68.default.createElement(
                  MessageType,
                  {
                    hasCurrentUserSent: message.sender === localPeerId,
                    receiver: message.recipientPeer,
                    roles: message.recipientRoles
                  }
                )
              ),
              !isOverlay ? /* @__PURE__ */ import_react68.default.createElement(
                Text,
                {
                  as: "span",
                  variant: "caption",
                  css: {
                    color: "$on_surface_medium",
                    flexShrink: 0,
                    position: "absolute",
                    right: 0,
                    zIndex: 1,
                    mr: "$4",
                    p: "$2"
                  }
                },
                formatTime2(message.time)
              ) : null,
              /* @__PURE__ */ import_react68.default.createElement(
                ChatActions,
                {
                  showPinAction,
                  message,
                  sentByLocalPeer: message.sender === localPeerId,
                  onReply: () => {
                    setRoleSelector("");
                    setPeerSelector({ id: message.sender, name: message.senderName });
                  },
                  onReplyGroup: () => {
                    if (message.senderRole) {
                      setRoleSelector(message.senderRole);
                      setPeerSelector({});
                    }
                  },
                  showReply,
                  isMobile,
                  openSheet,
                  setOpenSheet
                }
              )
            ),
            /* @__PURE__ */ import_react68.default.createElement(
              Text,
              {
                variant: "sm",
                css: {
                  w: "100%",
                  mt: "$2",
                  wordBreak: "break-word",
                  whiteSpace: "pre-wrap",
                  userSelect: "all",
                  color: isOverlay ? "#FFF" : "$on_surface_high"
                },
                onClick: (e) => {
                  setOpenSheet(true, e);
                }
              },
              /* @__PURE__ */ import_react68.default.createElement(AnnotisedMessage, { message: message.message })
            )
          )
        );
      }
    );
    MessageWrapper = import_react68.default.memo(
      ({ index, style, data: data3 }) => {
        return /* @__PURE__ */ import_react68.default.createElement(ChatMessage, { style, index, key: data3[index].id, message: data3[index] });
      }
    );
    VirtualizedChatMessages = import_react68.default.forwardRef(({ messages, scrollToBottom }, listRef) => {
      const hmsActions = (0, import_react_sdk29.useHMSActions)();
      const itemKey2 = (0, import_react68.useCallback)((index, data3) => {
        return data3[index].id;
      }, []);
      (0, import_react68.useEffect)(() => {
        requestAnimationFrame(() => scrollToBottom(1));
      }, [scrollToBottom]);
      return /* @__PURE__ */ import_react68.default.createElement(
        Box,
        {
          css: {
            mr: "-$10",
            h: "100%"
          }
        },
        /* @__PURE__ */ import_react68.default.createElement(
          import_react_virtualized_auto_sizer.default,
          {
            style: {
              width: "90%"
            }
          },
          ({ height, width }) => /* @__PURE__ */ import_react68.default.createElement(
            import_react_window.VariableSizeList,
            {
              ref: (node) => {
                if (node) {
                  listRef.current = node;
                  listInstance = node;
                }
              },
              itemCount: messages.length,
              itemSize: getRowHeight,
              itemData: messages,
              width,
              height,
              style: {
                overflowX: "hidden"
              },
              itemKey: itemKey2,
              onItemsRendered: ({ visibleStartIndex, visibleStopIndex }) => {
                for (let i = visibleStartIndex; i <= visibleStopIndex; i++) {
                  if (!messages[i].read) {
                    hmsActions.setMessageRead(true, messages[i].id);
                  }
                }
              }
            },
            MessageWrapper
          )
        )
      );
    });
    ChatBody = import_react68.default.forwardRef(
      ({ scrollToBottom }, listRef) => {
        const messages = (0, import_react_sdk29.useHMSStore)(import_react_sdk29.selectHMSMessages);
        const blacklistedMessageIDs = (0, import_react_sdk29.useHMSStore)((0, import_react_sdk29.selectSessionStore)("chatMessageBlacklist" /* CHAT_MESSAGE_BLACKLIST */));
        const filteredMessages = (0, import_react68.useMemo)(() => {
          const blacklistedMessageIDSet = new Set(blacklistedMessageIDs || []);
          return messages?.filter((message) => message.type === "chat" && !blacklistedMessageIDSet.has(message.id)) || [];
        }, [blacklistedMessageIDs, messages]);
        const vanillaStore = (0, import_react_sdk29.useHMSVanillaStore)();
        const rerenderOnFirstMount = (0, import_react68.useRef)(false);
        (0, import_react68.useEffect)(() => {
          const unsubscribe = vanillaStore.subscribe(() => {
            if (!listRef.current) {
              return;
            }
            const outerElement = listRef.current._outerRef;
            if (outerElement && outerElement.clientHeight + outerElement.scrollTop + outerElement.offsetTop >= outerElement.scrollHeight) {
              requestAnimationFrame(() => scrollToBottom(1));
            }
          }, import_react_sdk29.selectUnreadHMSMessagesCount);
          return unsubscribe;
        }, [vanillaStore, listRef, scrollToBottom]);
        (0, import_react68.useEffect)(() => {
          if (filteredMessages.length > 0 && listRef?.current && !rerenderOnFirstMount.current) {
            rerenderOnFirstMount.current = true;
            listRef.current.resetAfterIndex(0);
          }
        }, [listRef, filteredMessages]);
        return filteredMessages.length === 0 ? /* @__PURE__ */ import_react68.default.createElement(EmptyChat, null) : /* @__PURE__ */ import_react68.default.createElement(VirtualizedChatMessages, { messages: filteredMessages, ref: listRef, scrollToBottom });
      }
    );
    PinnedBy = ({
      messageId,
      index,
      rowRef
    }) => {
      const pinnedBy = usePinnedBy(messageId);
      const localPeerName = (0, import_react_sdk29.useHMSStore)(import_react_sdk29.selectLocalPeerName);
      (0, import_react68.useLayoutEffect)(() => {
        if (rowRef?.current) {
          if (pinnedBy) {
            rowRef.current.style.background = "linear-gradient(277deg, var(--hms-ui-colors-surface_default) 0%, var(--hms-ui-colors-surface_dim) 60.87%)";
          } else {
            rowRef.current.style.background = "";
          }
          setRowHeight(index, messageId, rowRef?.current.clientHeight);
        }
      }, [index, messageId, pinnedBy, rowRef]);
      if (!pinnedBy) {
        return null;
      }
      return /* @__PURE__ */ import_react68.default.createElement(Flex, { align: "center", css: { gap: "$2", mb: "$2", color: "$on_surface_low" } }, /* @__PURE__ */ import_react68.default.createElement(import_react_icons22.SolidPinIcon, { height: 12, width: 12 }), /* @__PURE__ */ import_react68.default.createElement(Text, { variant: "xs", css: { color: "inherit" } }, "Pinned by ", localPeerName === pinnedBy ? "you" : pinnedBy));
    };
  }
});

// src/Prebuilt/components/PIP/PIPChat.tsx
var import_react69, import_react_sdk30, import_react_icons23, PIPChat, MessageTitle;
var init_PIPChat = __esm({
  "src/Prebuilt/components/PIP/PIPChat.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react69 = __toESM(require("react"));
    import_react_sdk30 = require("@100mslive/react-sdk");
    import_react_icons23 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_TextArea2();
    init_Tooltip2();
    init_IconButton3();
    init_ChatBody();
    init_useRoomLayoutScreen();
    init_useChatBlacklist();
    init_utils3();
    PIPChat = () => {
      const messages = (0, import_react_sdk30.useHMSStore)(import_react_sdk30.selectHMSMessages);
      const localPeerID = (0, import_react_sdk30.useHMSStore)(import_react_sdk30.selectLocalPeerID);
      const count = (0, import_react_sdk30.useHMSStore)(import_react_sdk30.selectUnreadHMSMessagesCount);
      const [unreadMessageCount, setUnreadMessageCount] = (0, import_react69.useState)(0);
      const getSenderName = (0, import_react69.useCallback)(
        (senderName, senderID) => {
          const slicedName = senderName.length > 10 ? senderName.slice(0, 10) + "..." : senderName;
          return slicedName + (senderID === localPeerID ? " (You)" : "");
        },
        [localPeerID]
      );
      (0, import_react69.useEffect)(() => {
        const timeoutId = setTimeout(() => {
          setUnreadMessageCount(count);
        }, 100);
        return () => clearTimeout(timeoutId);
      }, [count]);
      const blacklistedMessageIDs = (0, import_react_sdk30.useHMSStore)((0, import_react_sdk30.selectSessionStore)("chatMessageBlacklist" /* CHAT_MESSAGE_BLACKLIST */));
      const filteredMessages = (0, import_react69.useMemo)(() => {
        const blacklistedMessageIDSet = new Set(blacklistedMessageIDs || []);
        return messages?.filter((message) => message.type === "chat" && !blacklistedMessageIDSet.has(message.id)) || [];
      }, [blacklistedMessageIDs, messages]);
      const { enabled: isChatEnabled = true, updatedBy: chatStateUpdatedBy = "" } = (0, import_react_sdk30.useHMSStore)((0, import_react_sdk30.selectSessionStore)("chatState" /* CHAT_STATE */)) || {};
      const isLocalPeerBlacklisted = useIsPeerBlacklisted({ local: true });
      const { elements } = useRoomLayoutConferencingScreen();
      const message_placeholder = elements?.chat?.message_placeholder || "Send a message";
      const canSendChatMessages = !!elements?.chat?.public_chat_enabled || !!elements?.chat?.roles_whitelist?.length || !!elements?.chat?.private_chat_enabled;
      const getChatStatus = (0, import_react69.useCallback)(() => {
        if (isLocalPeerBlacklisted) return "You've been blocked from sending messages";
        if (!isChatEnabled)
          return `Chat has been paused by ${chatStateUpdatedBy.peerId === localPeerID ? "you" : chatStateUpdatedBy?.userName}`;
        return message_placeholder;
      }, [
        chatStateUpdatedBy.peerId,
        chatStateUpdatedBy?.userName,
        isChatEnabled,
        isLocalPeerBlacklisted,
        localPeerID,
        message_placeholder
      ]);
      return /* @__PURE__ */ import_react69.default.createElement("div", { style: { height: "100%" } }, /* @__PURE__ */ import_react69.default.createElement(
        Box,
        {
          id: "chat-container",
          css: {
            bg: "$surface_dim",
            overflowY: "auto",
            // Subtracting height of footer
            h: canSendChatMessages ? "calc(100% - 87px)" : "100%",
            position: "relative"
          }
        },
        unreadMessageCount ? /* @__PURE__ */ import_react69.default.createElement(
          Box,
          {
            id: "new-message-notif",
            style: {
              position: "fixed",
              bottom: "76px",
              right: "4px"
            }
          },
          /* @__PURE__ */ import_react69.default.createElement(
            Text,
            {
              variant: "xs",
              css: { cursor: "pointer" },
              style: { color: "white", background: "gray", padding: "4px", borderRadius: "4px" }
            },
            unreadMessageCount === 1 ? "New message" : `${unreadMessageCount} new messages`
          )
        ) : "",
        filteredMessages.length === 0 ? /* @__PURE__ */ import_react69.default.createElement(
          "div",
          {
            style: {
              display: "flex",
              flexDirection: "column",
              height: "100%",
              width: "100%",
              alignItems: "center",
              justifyContent: "center"
            }
          },
          /* @__PURE__ */ import_react69.default.createElement(Text, { variant: "h5", css: { mt: "$8", c: "$on_surface_high" } }, canSendChatMessages ? "Start a conversation" : "No messages yet"),
          canSendChatMessages ? /* @__PURE__ */ import_react69.default.createElement(Text, { variant: "sm", style: { maxWidth: "80%", textAlign: "center", marginTop: "4px" } }, "There are no messages here yet. Start a conversation by sending a message.") : ""
        ) : filteredMessages.map((message) => /* @__PURE__ */ import_react69.default.createElement(Box, { className: "pip-message", key: message.id, id: message.id, style: { padding: "8px 0.75rem" } }, /* @__PURE__ */ import_react69.default.createElement(Flex, { style: { width: "100%", alignItems: "center", justifyContent: "between" } }, /* @__PURE__ */ import_react69.default.createElement(
          Text,
          {
            style: { display: "flex", justifyContent: "between", width: "100%", alignItems: "center" },
            css: {
              color: "$on_surface_high",
              fontWeight: "$semiBold"
            }
          },
          /* @__PURE__ */ import_react69.default.createElement(Flex, { style: { flexGrow: 1, gap: "2px", alignItems: "center" } }, message.senderName === "You" || !message.senderName ? /* @__PURE__ */ import_react69.default.createElement(Text, { as: "span", variant: "sub2", css: { color: "$on_surface_high", fontWeight: "$semiBold" } }, message.senderName || "Anonymous") : /* @__PURE__ */ import_react69.default.createElement(Tooltip, { title: message.senderName, side: "top", align: "start" }, /* @__PURE__ */ import_react69.default.createElement(Text, { as: "span", variant: "sub2", css: { color: "$on_surface_high", fontWeight: "$semiBold" } }, getSenderName(message.senderName, message?.sender))), /* @__PURE__ */ import_react69.default.createElement(
            MessageTitle,
            {
              localPeerID,
              recipientPeer: message.recipientPeer,
              recipientRoles: message.recipientRoles
            }
          )),
          /* @__PURE__ */ import_react69.default.createElement(
            Text,
            {
              variant: "xs",
              css: {
                color: "$on_surface_medium",
                flexShrink: 0,
                p: "$2",
                whitespace: "nowrap"
              }
            },
            formatTime2(message.time)
          )
        )), /* @__PURE__ */ import_react69.default.createElement(
          Text,
          {
            variant: "sm",
            css: {
              w: "100%",
              mt: "$2",
              wordBreak: "break-word",
              whiteSpace: "pre-wrap",
              userSelect: "all",
              color: "$on_surface_high"
            }
          },
          /* @__PURE__ */ import_react69.default.createElement(AnnotisedMessage, { message: message.message })
        ))),
        /* @__PURE__ */ import_react69.default.createElement("div", { id: "marker", style: { height: filteredMessages.length ? "1px" : 0 } })
      ), canSendChatMessages && /* @__PURE__ */ import_react69.default.createElement(Box, { css: { bg: "$surface_dim" } }, /* @__PURE__ */ import_react69.default.createElement(Flex, { css: { px: "$4", pb: "3px", gap: "$2", alignItems: "center" } }, /* @__PURE__ */ import_react69.default.createElement(Text, { variant: "caption" }, "To:"), /* @__PURE__ */ import_react69.default.createElement(Flex, { css: { bg: "$primary_bright", color: "$on_primary_high", r: "$2" } }, /* @__PURE__ */ import_react69.default.createElement(
        "select",
        {
          id: "selector",
          style: {
            background: "inherit",
            color: "inherit",
            border: "none",
            outline: "none",
            borderRadius: "4px",
            padding: "0 2px"
          },
          defaultValue: elements.chat?.public_chat_enabled ? "Everyone" : elements.chat?.roles_whitelist?.[0]
        },
        elements.chat?.roles_whitelist?.map((role) => /* @__PURE__ */ import_react69.default.createElement("option", { key: role, value: role }, role)),
        elements.chat?.public_chat_enabled ? /* @__PURE__ */ import_react69.default.createElement("option", { value: "Everyone" }, "Everyone") : ""
      ))), /* @__PURE__ */ import_react69.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            bg: "$surface_default",
            minHeight: "$16",
            width: "100%",
            py: "$6",
            pl: "$4",
            boxSizing: "border-box",
            gap: "$2",
            r: "$2"
          }
        },
        /* @__PURE__ */ import_react69.default.createElement(
          TextArea,
          {
            id: "chat-input",
            maxLength: CHAT_MESSAGE_LIMIT,
            disabled: !isChatEnabled || isLocalPeerBlacklisted,
            rows: 1,
            css: {
              w: "100%",
              c: "$on_surface_high",
              p: "0.75rem 0.75rem !important",
              border: "none",
              resize: "none"
            },
            placeholder: getChatStatus(),
            required: true,
            autoComplete: "off",
            "aria-autocomplete": "none"
          }
        ),
        /* @__PURE__ */ import_react69.default.createElement(
          IconButton_default,
          {
            id: "send-btn",
            disabled: !isChatEnabled || isLocalPeerBlacklisted,
            title: getChatStatus(),
            css: {
              ml: "auto",
              height: "max-content",
              mr: "$4",
              "&:hover": { c: "$on_surface_medium" }
            },
            "data-testid": "send_msg_btn"
          },
          /* @__PURE__ */ import_react69.default.createElement(import_react_icons23.SendIcon, null)
        )
      )));
    };
    MessageTitle = ({
      recipientPeer,
      recipientRoles,
      localPeerID
    }) => {
      const peerName = (0, import_react_sdk30.useHMSStore)((0, import_react_sdk30.selectPeerNameByID)(recipientPeer));
      return /* @__PURE__ */ import_react69.default.createElement(import_react69.default.Fragment, null, recipientRoles ? /* @__PURE__ */ import_react69.default.createElement(Text, { as: "span", variant: "sub2", css: { color: "$on_surface_high", fontWeight: "$semiBold" } }, "to ", recipientRoles, " (Group)") : null, recipientPeer ? /* @__PURE__ */ import_react69.default.createElement(Text, { as: "span", variant: "sub2", css: { color: "$on_surface_high", fontWeight: "$semiBold" } }, "to ", recipientPeer === localPeerID ? "You" : peerName, " (DM)") : null);
    };
  }
});

// src/Prebuilt/components/PIP/PIPChatOption.tsx
var import_react70, import_react_icons24, PIPChatOption;
var init_PIPChatOption = __esm({
  "src/Prebuilt/components/PIP/PIPChatOption.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react70 = __toESM(require("react"));
    import_react_icons24 = require("@100mslive/react-icons");
    init_Dropdown2();
    init_Text2();
    PIPChatOption = ({ openChat, showPIPChat }) => {
      if (!showPIPChat) {
        return /* @__PURE__ */ import_react70.default.createElement(import_react70.default.Fragment, null);
      }
      return /* @__PURE__ */ import_react70.default.createElement(Dropdown.Item, { onClick: openChat, "data-testid": "pip_chat_btn" }, /* @__PURE__ */ import_react70.default.createElement(import_react_icons24.ExternalLinkIcon, null), /* @__PURE__ */ import_react70.default.createElement(Text, { variant: "sm", css: { ml: "$4", color: "$on_surface_high" } }, "Pop out Chat"));
    };
  }
});

// src/Prebuilt/components/PIP/PIPWindow.tsx
var import_react_dom, PIPWindow;
var init_PIPWindow = __esm({
  "src/Prebuilt/components/PIP/PIPWindow.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react_dom = require("react-dom");
    PIPWindow = ({ pipWindow, children }) => {
      pipWindow.document.body.style.margin = "0";
      pipWindow.document.body.style.overflow = "clip";
      return (0, import_react_dom.createPortal)(children, pipWindow.document.body);
    };
  }
});

// src/Prebuilt/components/RoleChangeModal.tsx
var import_react71, import_react_use13, import_react_sdk31, import_react_icons25, HighlightTerm, RoleChangeContent, RoleChangeModal;
var init_RoleChangeModal = __esm({
  "src/Prebuilt/components/RoleChangeModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react71 = __toESM(require("react"));
    import_react_use13 = require("react-use");
    import_react_sdk31 = require("@100mslive/react-sdk");
    import_react_icons25 = require("@100mslive/react-icons");
    init_Button2();
    init_Dropdown2();
    init_Layout();
    init_Modal();
    init_Sheet2();
    init_Text2();
    init_Theme();
    init_Tooltip2();
    HighlightTerm = ({ value }) => {
      return value ? /* @__PURE__ */ import_react71.default.createElement(Tooltip, { side: "top", title: value }, /* @__PURE__ */ import_react71.default.createElement(
        Text,
        {
          variant: "body2",
          css: {
            color: "$on_surface_medium",
            fontWeight: "$semiBold"
          }
        },
        "'",
        value.slice(0, 100),
        value.length > 100 ? "..." : "",
        "'"
      )) : /* @__PURE__ */ import_react71.default.createElement(import_react71.default.Fragment, null);
    };
    RoleChangeContent = ({
      peer,
      onOpenChange,
      isMobile = false
    }) => {
      const roles = (0, import_react_sdk31.useHMSStore)(import_react_sdk31.selectAvailableRoleNames).filter(
        (role) => role !== peer?.roleName && role !== "__internal_recorder"
      );
      const [selectedRole, setRole] = (0, import_react71.useState)(roles.filter((role) => role !== peer?.roleName)?.[0] || peer?.roleName);
      const hmsActions = (0, import_react_sdk31.useHMSActions)();
      const [open, setOpen] = (0, import_react71.useState)(false);
      const triggerRef = (0, import_react71.useRef)();
      return /* @__PURE__ */ import_react71.default.createElement(import_react71.default.Fragment, null, /* @__PURE__ */ import_react71.default.createElement(Flex, { align: "center", justify: "between", css: { w: "100%" } }, /* @__PURE__ */ import_react71.default.createElement(Text, { as: "h6", variant: "h6" }, "Switch Role"), isMobile && /* @__PURE__ */ import_react71.default.createElement(import_react_icons25.CrossIcon, { onClick: () => onOpenChange(false) })), /* @__PURE__ */ import_react71.default.createElement(Box, null, /* @__PURE__ */ import_react71.default.createElement(
        Text,
        {
          variant: "sm",
          css: {
            mt: "$4",
            mb: "$8",
            c: "$on_surface_medium",
            display: "flex",
            flexWrap: "wrap",
            columnGap: "4px"
          }
        },
        "Switch the role of",
        /* @__PURE__ */ import_react71.default.createElement(HighlightTerm, { value: peer.name }),
        "from ",
        /* @__PURE__ */ import_react71.default.createElement(HighlightTerm, { value: peer.roleName }),
        " to"
      )), /* @__PURE__ */ import_react71.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            w: "100%",
            mb: "$10"
          }
        },
        /* @__PURE__ */ import_react71.default.createElement(
          Box,
          {
            css: {
              position: "relative",
              flex: "1 1 0",
              minWidth: 0
            }
          },
          /* @__PURE__ */ import_react71.default.createElement(Dropdown.Root, { open, onOpenChange: setOpen, css: { width: "100%" } }, /* @__PURE__ */ import_react71.default.createElement(
            Dropdown.Trigger,
            {
              ref: triggerRef,
              "data-testid": "open_role_selection_dropdown",
              asChild: true,
              css: {
                bg: "$surface_default",
                r: "$1",
                p: "$6 $9"
              }
            },
            /* @__PURE__ */ import_react71.default.createElement(Flex, { align: "center", justify: "between", css: { width: "100%" } }, /* @__PURE__ */ import_react71.default.createElement(Text, null, selectedRole), open ? /* @__PURE__ */ import_react71.default.createElement(import_react_icons25.ChevronUpIcon, null) : /* @__PURE__ */ import_react71.default.createElement(import_react_icons25.ChevronDownIcon, null))
          ), /* @__PURE__ */ import_react71.default.createElement(Dropdown.Content, { align: "start", sideOffset: 8, css: { zIndex: 1e3, w: "100%" } }, roles.map((role) => /* @__PURE__ */ import_react71.default.createElement(
            Dropdown.Item,
            {
              "data-testid": role,
              key: role,
              onSelect: () => setRole(role),
              css: { w: `${triggerRef.current?.clientWidth}px` }
            },
            role
          ))))
        )
      ), /* @__PURE__ */ import_react71.default.createElement(Flex, { justify: "center", align: "center", css: { width: "100%", gap: "$md" } }, !isMobile && /* @__PURE__ */ import_react71.default.createElement(
        Button,
        {
          variant: "standard",
          outlined: true,
          css: { width: "100%" },
          onClick: () => onOpenChange(false),
          "data-testid": "cancel_button"
        },
        "Cancel"
      ), /* @__PURE__ */ import_react71.default.createElement(
        Button,
        {
          "data-testid": "change_button",
          variant: "primary",
          css: { width: "100%" },
          onClick: async () => {
            if (selectedRole) {
              await hmsActions.changeRoleOfPeer(peer.id, selectedRole, true);
              onOpenChange(false);
            }
          }
        },
        "Switch Role"
      )));
    };
    RoleChangeModal = ({
      peerId,
      onOpenChange
    }) => {
      const peer = (0, import_react_sdk31.useHMSStore)((0, import_react_sdk31.selectPeerByID)(peerId));
      const isMobile = (0, import_react_use13.useMedia)(config.media.md);
      if (!peer) {
        return null;
      }
      if (isMobile) {
        return /* @__PURE__ */ import_react71.default.createElement(Sheet.Root, { open: true, onOpenChange, css: { borderRadius: "$0 $0 0 0" } }, /* @__PURE__ */ import_react71.default.createElement(Sheet.Content, { css: { p: "$10 $8", background: "$surface_dim", border: "1px solid $border_default" } }, /* @__PURE__ */ import_react71.default.createElement(RoleChangeContent, { peer, onOpenChange, isMobile: true })));
      }
      return /* @__PURE__ */ import_react71.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react71.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react71.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react71.default.createElement(Dialog.Content, { css: { width: "min(400px,80%)", p: "$10", overflow: "visible" } }, /* @__PURE__ */ import_react71.default.createElement(RoleChangeContent, { peer, onOpenChange }))));
    };
  }
});

// src/Prebuilt/primitives/DialogContent.jsx
var import_react72, import_react_icons26, DialogContent, ErrorDialog, RequestDialog, DialogRow, DialogCol, DialogSelect, DialogInputFile;
var init_DialogContent2 = __esm({
  "src/Prebuilt/primitives/DialogContent.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react72 = __toESM(require("react"));
    import_react_icons26 = require("@100mslive/react-icons");
    init_Button2();
    init_Divider2();
    init_IconButton2();
    init_Input2();
    init_Label2();
    init_Layout();
    init_Modal();
    init_Select2();
    init_Text2();
    init_utils();
    DialogContent = ({ Icon: Icon4, title, closeable = true, children, css: css2, iconCSS = {}, ...props }) => {
      return /* @__PURE__ */ import_react72.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react72.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react72.default.createElement(Dialog.Content, { css: { width: "min(600px, 100%)", ...css2 }, ...props }, /* @__PURE__ */ import_react72.default.createElement(Dialog.Title, null, /* @__PURE__ */ import_react72.default.createElement(Flex, { justify: "between" }, /* @__PURE__ */ import_react72.default.createElement(Flex, { align: "center", css: { mb: "$1" } }, Icon4 ? /* @__PURE__ */ import_react72.default.createElement(Flex, { css: { mr: "$2", color: "$on_primary_high", ...flexCenter, ...iconCSS } }, /* @__PURE__ */ import_react72.default.createElement(Icon4, null)) : null, /* @__PURE__ */ import_react72.default.createElement(Text, { variant: "h6", inline: true }, title)), closeable && /* @__PURE__ */ import_react72.default.createElement(Dialog.DefaultClose, { "data-testid": "dialoge_cross_icon" }))), /* @__PURE__ */ import_react72.default.createElement(HorizontalDivider, { css: { mt: "0.8rem" } }), /* @__PURE__ */ import_react72.default.createElement(Box, null, children)));
    };
    ErrorDialog = ({ open = true, onOpenChange, title, children, ...props }) => {
      return /* @__PURE__ */ import_react72.default.createElement(Dialog.Root, { open, onOpenChange }, /* @__PURE__ */ import_react72.default.createElement(
        DialogContent,
        {
          Icon: import_react_icons26.CrossIcon,
          title,
          onInteractOutside: (e) => e.preventDefault(),
          onEscapeKeyDown: (e) => e.preventDefault(),
          onPointerDownOutside: (e) => e.preventDefault(),
          closeable: false,
          iconCSS: { color: "$alert_error_default" },
          ...props
        },
        /* @__PURE__ */ import_react72.default.createElement(Box, { css: { mt: "$lg" } }, children)
      ));
    };
    RequestDialog = ({ open = true, onOpenChange, title, body, actionText = "Accept", onAction, Icon: Icon4 }) => /* @__PURE__ */ import_react72.default.createElement(Dialog.Root, { open, onOpenChange }, /* @__PURE__ */ import_react72.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react72.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react72.default.createElement(Dialog.Content, { css: { width: "min(400px,80%)", p: "$10" } }, /* @__PURE__ */ import_react72.default.createElement(Dialog.Title, { css: { p: 0, display: "flex", flexDirection: "row", gap: "$md" } }, Icon4 ? Icon4 : null, /* @__PURE__ */ import_react72.default.createElement(Text, { variant: "h6" }, title)), typeof body === "string" ? /* @__PURE__ */ import_react72.default.createElement(
      Text,
      {
        variant: "md",
        css: {
          fontWeight: 400,
          mt: "$4",
          mb: "$10",
          c: "$on_surface_medium"
        }
      },
      body
    ) : /* @__PURE__ */ import_react72.default.createElement(Box, { css: { mt: "$4", mb: "$10" } }, body), /* @__PURE__ */ import_react72.default.createElement(Flex, { justify: "center", align: "center", css: { width: "100%", gap: "$md" } }, /* @__PURE__ */ import_react72.default.createElement(Box, { css: { width: "50%" } }, /* @__PURE__ */ import_react72.default.createElement(Dialog.Close, { css: { width: "100%" } }, /* @__PURE__ */ import_react72.default.createElement(Button, { variant: "standard", outlined: true, css: { width: "100%" } }, "Cancel"))), /* @__PURE__ */ import_react72.default.createElement(Box, { css: { width: "50%" } }, /* @__PURE__ */ import_react72.default.createElement(Button, { variant: "primary", css: { width: "100%" }, onClick: onAction }, actionText))))));
    DialogRow = ({ children, breakSm = false, css: css2, justify = "between" }) => {
      let finalCSS = {
        margin: "$10 0",
        w: "100%"
      };
      if (breakSm) {
        finalCSS["@sm"] = {
          flexDirection: "column",
          alignItems: "flex-start"
        };
      }
      if (css2) {
        finalCSS = Object.assign(finalCSS, css2);
      }
      return /* @__PURE__ */ import_react72.default.createElement(Flex, { align: "center", justify, css: finalCSS }, children);
    };
    DialogCol = ({ children, breakSm = false, css: css2, align = "center", justify = "between", ...props }) => {
      let finalCSS = {
        margin: "$10 0",
        w: "100%"
      };
      if (breakSm) {
        finalCSS["@sm"] = {
          alignItems: "flex-start"
        };
      }
      if (css2) {
        finalCSS = Object.assign(finalCSS, css2);
      }
      return /* @__PURE__ */ import_react72.default.createElement(Flex, { direction: "column", align, justify, css: finalCSS, ...props }, children);
    };
    DialogSelect = ({ title, options, keyField, labelField, selected, onChange, ...props }) => {
      return /* @__PURE__ */ import_react72.default.createElement(DialogRow, { breakSm: true }, /* @__PURE__ */ import_react72.default.createElement(Label3, null, title), /* @__PURE__ */ import_react72.default.createElement(Select.Root, { "data-testid": `dialog_select_${title}`, css: { width: "70%", "@sm": { width: "100%" } }, ...props }, /* @__PURE__ */ import_react72.default.createElement(Select.DefaultDownIcon, null), /* @__PURE__ */ import_react72.default.createElement(Select.Select, { onChange: (e) => onChange(e.target.value), value: selected, css: { width: "100%" } }, options.map((option) => {
        const id = keyField ? option[keyField] : option;
        const label = labelField ? option[labelField] : option;
        return /* @__PURE__ */ import_react72.default.createElement("option", { value: id, key: id }, label);
      }))));
    };
    DialogInputFile = ({ value, onChange, placeholder, disabled, type, ...props }) => {
      const inputRef = (0, import_react72.useRef)();
      return /* @__PURE__ */ import_react72.default.createElement(
        DialogCol,
        {
          breakSm: true,
          onClick: () => inputRef.current?.click(),
          css: {
            justifyContent: "center",
            position: "relative",
            cursor: "pointer",
            py: "$12",
            border: "1px dashed $border_bright",
            r: "$1",
            height: "max(140px, 30%)",
            alignItems: "center",
            m: "$6 0"
          },
          gap: "8"
        },
        /* @__PURE__ */ import_react72.default.createElement(
          IconButton,
          {
            variant: "standard",
            css: {
              border: "none",
              background: "none",
              "&:hover": {
                border: "none",
                background: "none",
                bg: "transparent !important"
              }
            }
          },
          /* @__PURE__ */ import_react72.default.createElement(
            import_react_icons26.CloudUploadIcon,
            {
              style: {
                width: "3rem",
                height: "3rem"
              }
            }
          )
        ),
        /* @__PURE__ */ import_react72.default.createElement(Flex, { direction: "row" }, /* @__PURE__ */ import_react72.default.createElement(
          Input,
          {
            ref: inputRef,
            css: { width: "70%", "@sm": { width: "100%" } },
            value,
            onChange: (e) => onChange(e.target),
            placeholder,
            disabled,
            type,
            hidden: true,
            ...props
          }
        ), /* @__PURE__ */ import_react72.default.createElement(
          IconButton,
          {
            variant: "standard",
            css: {
              background: "none",
              border: "none",
              textDecoration: "underline",
              "&:hover": {
                background: "none !important",
                border: "none !important"
              }
            }
          },
          /* @__PURE__ */ import_react72.default.createElement(Text, { variant: "md" }, placeholder)
        ))
      );
    };
  }
});

// src/Prebuilt/components/Streaming/ResolutionInput.jsx
var import_react73, import_react_icons27, ResolutionInput;
var init_ResolutionInput = __esm({
  "src/Prebuilt/components/Streaming/ResolutionInput.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react73 = __toESM(require("react"));
    import_react_icons27 = require("@100mslive/react-icons");
    init_src();
    init_DialogContent2();
    init_constants();
    ResolutionInput = ({ onResolutionChange, disabled, tooltipText, css: css2, testId }) => {
      const [resolution, setResolution] = (0, import_react73.useState)(RTMP_RECORD_DEFAULT_RESOLUTION);
      const resolutionChangeHandler = (0, import_react73.useCallback)(
        (event) => {
          const { name, value } = event.target;
          let width = name === "resWidth" ? Number(value) : resolution.width;
          let height = name === "resHeight" ? Number(value) : resolution.height;
          if (width === 0) {
            width = null;
          }
          if (height === 0) {
            height = null;
          }
          const newResolution = {
            width: !isNaN(width) ? width : RTMP_RECORD_DEFAULT_RESOLUTION.width,
            height: !isNaN(height) ? height : RTMP_RECORD_DEFAULT_RESOLUTION.height
          };
          setResolution(newResolution);
        },
        [resolution]
      );
      return /* @__PURE__ */ import_react73.default.createElement(DialogRow, { breakSm: true, css: css2 }, /* @__PURE__ */ import_react73.default.createElement(Flex, { gap: 1 }, /* @__PURE__ */ import_react73.default.createElement(Label3, { css: { mb: "$8" } }, "Resolution"), tooltipText && /* @__PURE__ */ import_react73.default.createElement(Tooltip, { title: tooltipText }, /* @__PURE__ */ import_react73.default.createElement("div", null, /* @__PURE__ */ import_react73.default.createElement(import_react_icons27.InfoIcon, { color: "#B0C3DB" })))), /* @__PURE__ */ import_react73.default.createElement(
        Flex,
        {
          justify: "between",
          css: { width: !tooltipText ? "100%" : "70%", "@sm": { width: "100%" } },
          gap: 2,
          direction: "column"
        },
        /* @__PURE__ */ import_react73.default.createElement(Flex, { justify: "between", gap: 2 }, /* @__PURE__ */ import_react73.default.createElement(Flex, { direction: "column", css: { width: "50%" } }, /* @__PURE__ */ import_react73.default.createElement(Text, { variant: "xs" }, "Width"), /* @__PURE__ */ import_react73.default.createElement(
          Input,
          {
            "data-testid": `${testId}_width`,
            css: { width: "100%", mt: "$4" },
            name: "resWidth",
            value: resolution.width,
            onChange: resolutionChangeHandler,
            readOnly: disabled,
            min: RTMP_RECORD_RESOLUTION_MIN,
            max: RTMP_RECORD_RESOLUTION_MAX,
            onBlur: () => onResolutionChange(resolution),
            type: "number"
          }
        )), /* @__PURE__ */ import_react73.default.createElement(Flex, { direction: "column", css: { width: "50%" } }, /* @__PURE__ */ import_react73.default.createElement(Text, { variant: "xs" }, "Height"), /* @__PURE__ */ import_react73.default.createElement(
          Input,
          {
            "data-testid": `${testId}_height`,
            css: { width: "100%", mt: "$4" },
            name: "resHeight",
            value: resolution.height,
            onChange: resolutionChangeHandler,
            onBlur: () => onResolutionChange(resolution),
            readOnly: disabled,
            min: RTMP_RECORD_RESOLUTION_MIN,
            max: RTMP_RECORD_RESOLUTION_MAX,
            type: "number"
          }
        )))
      ));
    };
  }
});

// src/Prebuilt/components/Settings/StartRecording.jsx
var import_react74, import_react_sdk32, import_react_icons28, StartRecording, StartRecording_default;
var init_StartRecording = __esm({
  "src/Prebuilt/components/Settings/StartRecording.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react74 = __toESM(require("react"));
    import_react_sdk32 = require("@100mslive/react-sdk");
    import_react_icons28 = require("@100mslive/react-icons");
    init_src();
    init_ResolutionInput();
    init_ToastManager();
    init_hooks();
    init_constants();
    StartRecording = ({ open, onOpenChange }) => {
      const permissions = (0, import_react_sdk32.useHMSStore)(import_react_sdk32.selectPermissions);
      const [resolution, setResolution] = (0, import_react74.useState)(RTMP_RECORD_DEFAULT_RESOLUTION);
      const { startRecording, recordingStarted } = useRecordingHandler();
      const { isBrowserRecordingOn, isStreamingOn, isHLSRunning } = (0, import_react_sdk32.useRecordingStreaming)();
      const hmsActions = (0, import_react_sdk32.useHMSActions)();
      if (!permissions?.browserRecording || isHLSRunning) {
        return null;
      }
      if (isBrowserRecordingOn) {
        return /* @__PURE__ */ import_react74.default.createElement(Dialog.Root, { open, onOpenChange }, /* @__PURE__ */ import_react74.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react74.default.createElement(
          Dialog.Content,
          {
            css: {
              width: "min(400px,80%)",
              p: "$10",
              bg: "#201617"
            }
          },
          /* @__PURE__ */ import_react74.default.createElement(Dialog.Title, null, /* @__PURE__ */ import_react74.default.createElement(Flex, { gap: 2, css: { c: "$alert_error_default" } }, /* @__PURE__ */ import_react74.default.createElement(import_react_icons28.AlertTriangleIcon, null), /* @__PURE__ */ import_react74.default.createElement(Text, { css: { c: "inherit" }, variant: "h6" }, "End Recording"))),
          /* @__PURE__ */ import_react74.default.createElement(Text, { variant: "sm", css: { c: "$on_surface_medium", my: "$8" } }, "Are you sure you want to end recording? You can\u2019t undo this action."),
          /* @__PURE__ */ import_react74.default.createElement(Flex, { justify: "end", css: { mt: "$12" } }, /* @__PURE__ */ import_react74.default.createElement(Dialog.Close, { asChild: true }, /* @__PURE__ */ import_react74.default.createElement(Button, { outlined: true, css: { borderColor: "$secondary_bright", mr: "$4" } }, "Don't end")), /* @__PURE__ */ import_react74.default.createElement(
            Button,
            {
              "data-testid": "stop_recording_confirm_mobile",
              variant: "danger",
              icon: true,
              onClick: async () => {
                try {
                  await hmsActions.stopRTMPAndRecording();
                } catch (error) {
                  ToastManager.addToast({
                    title: error.message,
                    variant: "error"
                  });
                }
                onOpenChange(false);
              }
            },
            "End recording"
          ))
        )));
      }
      return /* @__PURE__ */ import_react74.default.createElement(Dialog.Root, { open, onOpenChange }, /* @__PURE__ */ import_react74.default.createElement(Dialog.Content, { css: { width: "min(400px,80%)", p: "$10" } }, /* @__PURE__ */ import_react74.default.createElement(Dialog.Title, null, /* @__PURE__ */ import_react74.default.createElement(Text, { variant: "h6" }, "Start Recording")), /* @__PURE__ */ import_react74.default.createElement(
        ResolutionInput,
        {
          testId: "recording_resolution_mobile",
          css: { flexDirection: "column", alignItems: "start" },
          onResolutionChange: setResolution
        }
      ), /* @__PURE__ */ import_react74.default.createElement(
        Button,
        {
          "data-testid": "start_recording_confirm_mobile",
          variant: "primary",
          icon: true,
          css: { ml: "auto" },
          type: "submit",
          disabled: recordingStarted || isStreamingOn,
          onClick: async () => {
            await startRecording(resolution);
            onOpenChange(false);
          }
        },
        "Start"
      )));
    };
    StartRecording_default = StartRecording;
  }
});

// src/Prebuilt/components/StatsForNerds.jsx
var import_react75, import_ts_pattern4, import_react_sdk33, StatsForNerds, useTracksWithLabel, LocalPeerStats, TrackStats, StatsRow2;
var init_StatsForNerds = __esm({
  "src/Prebuilt/components/StatsForNerds.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react75 = __toESM(require("react"));
    import_ts_pattern4 = require("ts-pattern");
    import_react_sdk33 = require("@100mslive/react-sdk");
    init_Divider2();
    init_Dropdown2();
    init_Label2();
    init_Layout();
    init_Modal();
    init_Stats2();
    init_Switch2();
    init_Text2();
    init_DropdownTrigger();
    init_useUISettings();
    init_useDropdownSelection();
    init_constants();
    StatsForNerds = ({ onOpenChange }) => {
      const tracksWithLabels = useTracksWithLabel();
      const statsOptions = (0, import_react75.useMemo)(
        () => [{ id: "local-peer", label: "Local Peer Stats" }, ...tracksWithLabels],
        [tracksWithLabels]
      );
      const [selectedStat, setSelectedStat] = (0, import_react75.useState)(statsOptions[0]);
      const [showStatsOnTiles, setShowStatsOnTiles] = useSetUiSettings(UI_SETTINGS.showStatsOnTiles);
      const [open, setOpen] = (0, import_react75.useState)(false);
      const ref = (0, import_react75.useRef)();
      const selectionBg = useDropdownSelection();
      (0, import_react75.useEffect)(() => {
        if (selectedStat.id !== "local-peer" && !tracksWithLabels.find((track) => track.id === selectedStat.id)) {
          setSelectedStat("local-peer");
        }
      }, [tracksWithLabels, selectedStat]);
      return /* @__PURE__ */ import_react75.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react75.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react75.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react75.default.createElement(
        Dialog.Content,
        {
          css: {
            width: "min(500px, 95%)",
            maxHeight: "100%",
            overflowY: "auto"
          }
        },
        /* @__PURE__ */ import_react75.default.createElement(Dialog.Title, { css: { p: "$4 0" } }, /* @__PURE__ */ import_react75.default.createElement(Flex, { justify: "between" }, /* @__PURE__ */ import_react75.default.createElement(Flex, { align: "center", css: { mb: "$1" } }, /* @__PURE__ */ import_react75.default.createElement(Text, { variant: "h6", inline: true }, "Stats For Nerds")), /* @__PURE__ */ import_react75.default.createElement(Dialog.DefaultClose, { "data-testid": "stats_dialog_close_icon" }))),
        /* @__PURE__ */ import_react75.default.createElement(HorizontalDivider, { css: { mt: "0.8rem" } }),
        /* @__PURE__ */ import_react75.default.createElement(Flex, { justify: "start", gap: 4, css: { m: "$10 0" } }, /* @__PURE__ */ import_react75.default.createElement(Switch, { checked: showStatsOnTiles, onCheckedChange: setShowStatsOnTiles }), /* @__PURE__ */ import_react75.default.createElement(Text, { variant: "body2", css: { fontWeight: "$semiBold" } }, "Show Stats on Tiles")),
        /* @__PURE__ */ import_react75.default.createElement(
          Flex,
          {
            direction: "column",
            css: {
              mb: "$12",
              position: "relative",
              minWidth: 0
            }
          },
          /* @__PURE__ */ import_react75.default.createElement(Label3, { variant: "body2", css: { c: "$on_surface_high" } }, "Stats For"),
          /* @__PURE__ */ import_react75.default.createElement(Dropdown.Root, { "data-testid": "dialog_select_Stats For", open, onOpenChange: setOpen }, /* @__PURE__ */ import_react75.default.createElement(
            DialogDropdownTrigger,
            {
              title: selectedStat.label || "Select Stats",
              css: { mt: "$4" },
              titleCSS: { mx: 0 },
              open,
              ref
            }
          ), /* @__PURE__ */ import_react75.default.createElement(Dropdown.Portal, null, /* @__PURE__ */ import_react75.default.createElement(Dropdown.Content, { align: "start", sideOffset: 8, css: { w: ref.current?.clientWidth, zIndex: 1e3 } }, statsOptions.map((option) => {
            const isSelected = option.id === selectedStat.id && option.layer === selectedStat.layer;
            return /* @__PURE__ */ import_react75.default.createElement(
              Dropdown.Item,
              {
                key: `${option.id}-${option.layer || ""}`,
                onClick: () => {
                  setSelectedStat(option);
                },
                css: {
                  px: "$9",
                  bg: isSelected ? selectionBg : void 0,
                  c: isSelected ? "$on_primary_high" : "$on_primary_high"
                }
              },
              option.label
            );
          }))))
        ),
        selectedStat.id === "local-peer" ? /* @__PURE__ */ import_react75.default.createElement(LocalPeerStats, null) : /* @__PURE__ */ import_react75.default.createElement(TrackStats, { trackID: selectedStat.id, layer: selectedStat.layer, local: selectedStat.local })
      )));
    };
    useTracksWithLabel = () => {
      const tracksMap = (0, import_react_sdk33.useHMSStore)(import_react_sdk33.selectTracksMap);
      const peersMap = (0, import_react_sdk33.useHMSStore)(import_react_sdk33.selectPeersMap);
      const localPeerID = (0, import_react_sdk33.useHMSStore)(import_react_sdk33.selectLocalPeerID);
      const tracksWithLabels = (0, import_react75.useMemo)(
        () => Object.values(tracksMap).reduce((res, track) => {
          const peerName = peersMap[track.peerId]?.name;
          const isLocalTrack = track.peerId === localPeerID;
          if (isLocalTrack && track.layerDefinitions?.length) {
            res = res.concat(
              track.layerDefinitions.map(({ layer }) => {
                return {
                  id: track.id,
                  layer,
                  local: true,
                  label: `${peerName} ${track.source} ${track.type} - ${layer}`
                };
              })
            );
            return res;
          }
          res.push({
            id: track.id,
            local: isLocalTrack,
            label: `${peerName} ${track.source} ${track.type}`
          });
          return res;
        }, []),
        [tracksMap, peersMap, localPeerID]
      );
      return tracksWithLabels;
    };
    LocalPeerStats = () => {
      const stats = (0, import_react_sdk33.useHMSStatsStore)(import_react_sdk33.selectHMSStats.localPeerStats);
      if (!stats) {
        return null;
      }
      return /* @__PURE__ */ import_react75.default.createElement(Flex, { css: { flexWrap: "wrap", gap: "$10" } }, /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Packets Lost", value: stats.subscribe?.packetsLost }), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Jitter", value: stats.subscribe?.jitter }), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Publish Bitrate", value: formatBytes(stats.publish?.bitrate, "b/s") }), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Subscribe Bitrate", value: formatBytes(stats.subscribe?.bitrate, "b/s") }), /* @__PURE__ */ import_react75.default.createElement(
        StatsRow2,
        {
          label: "Available Outgoing Bitrate",
          value: formatBytes(stats.publish?.availableOutgoingBitrate, "b/s")
        }
      ), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Total Bytes Sent", value: formatBytes(stats.publish?.bytesSent) }), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Total Bytes Received", value: formatBytes(stats.subscribe?.bytesReceived) }), /* @__PURE__ */ import_react75.default.createElement(
        StatsRow2,
        {
          label: "Round Trip Time",
          value: `${(((stats.publish?.currentRoundTripTime || 0) + (stats.subscribe?.currentRoundTripTime || 0)) / 2).toFixed(3) * 1e3} ms`
        }
      ));
    };
    TrackStats = ({ trackID, layer, local }) => {
      const selector = (0, import_ts_pattern4.match)({ trackID, layer, local }).with(
        {
          layer: import_ts_pattern4.P.when((layer2) => !!layer2)
        },
        () => import_react_sdk33.selectHMSStats.localVideoTrackStatsByLayer(layer)(trackID)
      ).with({ local: import_ts_pattern4.P.when((local2) => !!local2) }, () => import_react_sdk33.selectHMSStats.localAudioTrackStatsByID(trackID)).otherwise(() => import_react_sdk33.selectHMSStats.trackStatsByID(trackID));
      const stats = (0, import_react_sdk33.useHMSStatsStore)(selector);
      if (!stats) {
        return null;
      }
      const inbound = stats.type.includes("inbound");
      return /* @__PURE__ */ import_react75.default.createElement(Flex, { css: { flexWrap: "wrap", gap: "$10" } }, /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Type", value: stats.type + " " + stats.kind }), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Bitrate", value: formatBytes(stats.bitrate, "b/s") }), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Packets Lost", value: stats.packetsLost }), /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Jitter", value: stats.jitter?.toFixed(3) }), /* @__PURE__ */ import_react75.default.createElement(
        StatsRow2,
        {
          label: inbound ? "Bytes Received" : "Bytes Sent",
          value: formatBytes(inbound ? stats.bytesReceived : stats.bytesSent)
        }
      ), stats.kind === "video" && /* @__PURE__ */ import_react75.default.createElement(import_react75.default.Fragment, null, /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Framerate", value: stats.framesPerSecond }), !inbound && /* @__PURE__ */ import_react75.default.createElement(StatsRow2, { label: "Quality Limitation Reason", value: stats.qualityLimitationReason })), /* @__PURE__ */ import_react75.default.createElement(
        StatsRow2,
        {
          label: "Round Trip Time",
          value: stats.roundTripTime ? `${(stats.roundTripTime * 1e3).toFixed(3)} ms` : "-"
        }
      ));
    };
    StatsRow2 = import_react75.default.memo(({ label, value }) => /* @__PURE__ */ import_react75.default.createElement(Box, { css: { bg: "$surface_bright", w: "calc(50% - $6)", p: "$8", r: "$3" } }, /* @__PURE__ */ import_react75.default.createElement(
      Text,
      {
        variant: "overline",
        css: {
          fontWeight: "$semiBold",
          color: "$on_surface_medium",
          textTransform: "uppercase"
        }
      },
      label
    ), /* @__PURE__ */ import_react75.default.createElement(Text, { variant: "sub1", css: { fontWeight: "$semiBold", color: "$on_surface_high" } }, value || "-")));
  }
});

// src/Prebuilt/components/MoreSettings/BulkRoleChangeModal.jsx
var import_react76, import_react_sdk34, import_react_icons29, BulkRoleChangeModal;
var init_BulkRoleChangeModal = __esm({
  "src/Prebuilt/components/MoreSettings/BulkRoleChangeModal.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react76 = __toESM(require("react"));
    import_react_sdk34 = require("@100mslive/react-sdk");
    import_react_icons29 = require("@100mslive/react-icons");
    init_src();
    init_DialogContent2();
    init_DropdownTrigger();
    init_hooks();
    BulkRoleChangeModal = ({ onOpenChange }) => {
      const roles = useFilteredRoles();
      const hmsActions = (0, import_react_sdk34.useHMSActions)();
      const ref = (0, import_react76.useRef)(null);
      const roleRef = (0, import_react76.useRef)(null);
      const [selectedBulkRole, setBulkRole] = (0, import_react76.useState)([]);
      const [selectedRole, setRole] = (0, import_react76.useState)("");
      const [bulkRoleDialog, setBulkRoleDialog] = (0, import_react76.useState)(false);
      const [roleDialog, setRoleDialog] = (0, import_react76.useState)(false);
      const [errorMessage, setErrorMessage] = (0, import_react76.useState)("");
      const [isSubmiting, setIsSubmiting] = (0, import_react76.useState)(false);
      const changeBulkRole = (0, import_react76.useCallback)(async () => {
        if (selectedBulkRole.length > 0 && selectedRole) {
          try {
            setIsSubmiting(true);
            await hmsActions.changeRoleOfPeersWithRoles(selectedBulkRole, selectedRole);
            setIsSubmiting(false);
            setErrorMessage("");
            onOpenChange(false);
          } catch (err) {
            setErrorMessage(err?.message ? err?.message : "Unknown error");
            setIsSubmiting(false);
          }
        }
      }, [selectedBulkRole, selectedRole, hmsActions, onOpenChange]);
      return /* @__PURE__ */ import_react76.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react76.default.createElement(DialogContent, { title: "Bulk Role Change", Icon: import_react_icons29.ChangeRoleIcon }, /* @__PURE__ */ import_react76.default.createElement(DialogRow, null, /* @__PURE__ */ import_react76.default.createElement(Text, null, "For Roles: "), /* @__PURE__ */ import_react76.default.createElement(
        Dropdown.Root,
        {
          open: bulkRoleDialog,
          onOpenChange: (value) => {
            if (value) {
              setBulkRoleDialog(value);
            }
          },
          modal: false
        },
        /* @__PURE__ */ import_react76.default.createElement(
          DialogDropdownTrigger,
          {
            ref,
            title: selectedBulkRole.length === 0 ? "Select Multiple Roles" : selectedBulkRole.toString(),
            css: {
              w: "70%",
              p: "$8"
            },
            open: bulkRoleDialog
          }
        ),
        /* @__PURE__ */ import_react76.default.createElement(
          Dropdown.Content,
          {
            css: { w: ref.current?.clientWidth, zIndex: 1e3 },
            onInteractOutside: () => {
              if (bulkRoleDialog) {
                setBulkRoleDialog(false);
              }
            }
          },
          roles && roles.map((role) => {
            return /* @__PURE__ */ import_react76.default.createElement(
              Dropdown.CheckboxItem,
              {
                key: role,
                checked: selectedBulkRole.includes(role),
                onCheckedChange: (value) => {
                  setBulkRole((selection) => {
                    return value ? [...selection, role] : selection.filter((selectedRole2) => selectedRole2 !== role);
                  });
                  setErrorMessage("");
                }
              },
              /* @__PURE__ */ import_react76.default.createElement(Checkbox.Root, { css: { margin: "$2" }, checked: selectedBulkRole.includes(role) }, /* @__PURE__ */ import_react76.default.createElement(Checkbox.Indicator, null, /* @__PURE__ */ import_react76.default.createElement(import_react_icons29.CheckIcon, { width: 16, height: 16 }))),
              role
            );
          })
        )
      )), /* @__PURE__ */ import_react76.default.createElement(DialogRow, null, /* @__PURE__ */ import_react76.default.createElement(Text, null, "To Role: "), /* @__PURE__ */ import_react76.default.createElement(Dropdown.Root, { open: roleDialog, onOpenChange: (value) => setRoleDialog(value) }, /* @__PURE__ */ import_react76.default.createElement(
        DialogDropdownTrigger,
        {
          ref: roleRef,
          title: selectedRole || "Select Role",
          css: {
            w: "70%",
            p: "$8"
          },
          open: roleDialog
        }
      ), /* @__PURE__ */ import_react76.default.createElement(Dropdown.Content, { css: { w: roleRef.current?.clientWidth, zIndex: 1e3 } }, roles && roles.map((role) => {
        return /* @__PURE__ */ import_react76.default.createElement(
          Dropdown.Item,
          {
            key: role,
            onSelect: () => {
              setRole(role);
              setErrorMessage("");
            }
          },
          role
        );
      })))), /* @__PURE__ */ import_react76.default.createElement(DialogRow, null, errorMessage && /* @__PURE__ */ import_react76.default.createElement(Flex, { gap: 2, css: { c: "$alert_error_default", w: "70%", ml: "auto" } }, /* @__PURE__ */ import_react76.default.createElement(import_react_icons29.AlertTriangleIcon, null), /* @__PURE__ */ import_react76.default.createElement(Text, { css: { c: "inherit" } }, errorMessage))), /* @__PURE__ */ import_react76.default.createElement(DialogRow, { justify: "end" }, /* @__PURE__ */ import_react76.default.createElement(Button, { variant: "primary", onClick: changeBulkRole, disabled: !(selectedRole && selectedBulkRole.length > 0) }, isSubmiting && /* @__PURE__ */ import_react76.default.createElement(Loading, { css: { color: "$on_primary_medium" } }), "Apply"))));
    };
  }
});

// src/Prebuilt/components/MoreSettings/CaptionContent.tsx
var import_react77, import_react_sdk35, import_react_icons30, CaptionContent;
var init_CaptionContent = __esm({
  "src/Prebuilt/components/MoreSettings/CaptionContent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react77 = __toESM(require("react"));
    import_react_sdk35 = require("@100mslive/react-sdk");
    import_react_icons30 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Loading2();
    init_Text2();
    init_ToastManager();
    init_useUISettings();
    init_constants();
    CaptionContent = ({ isMobile, onExit }) => {
      const DURATION = 2e3;
      const actions = (0, import_react_sdk35.useHMSActions)();
      const isTranscriptionEnabled = (0, import_react_sdk35.useHMSStore)(import_react_sdk35.selectIsTranscriptionEnabled);
      const [toastId, setToastId] = useSetAppDataByKey(CAPTION_TOAST.captionToast);
      const [isCaptionEnabled, setIsCaptionEnabled] = useSetIsCaptionEnabled();
      return /* @__PURE__ */ import_react77.default.createElement(import_react77.default.Fragment, null, /* @__PURE__ */ import_react77.default.createElement(
        Text,
        {
          variant: isMobile ? "md" : "lg",
          css: {
            color: "$on_surface_high",
            fontWeight: "$semiBold",
            display: "flex",
            "@md": { px: "$8" }
          }
        },
        isTranscriptionEnabled ? "Disable" : "Enable",
        " Closed Caption (CC) for this session?",
        /* @__PURE__ */ import_react77.default.createElement(
          Box,
          {
            css: { color: "inherit", ml: "auto", "&:hover": { color: "$on_surface_medium", cursor: "pointer" } },
            onClick: onExit
          },
          /* @__PURE__ */ import_react77.default.createElement(import_react_icons30.CrossIcon, null)
        )
      ), !isMobile ? /* @__PURE__ */ import_react77.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", mt: "$4", "@md": { px: "$8" } } }, "This will ", isTranscriptionEnabled ? "disable" : "enable", " Closed Captions for everyone in this room. You can\xA0", isTranscriptionEnabled ? "enable" : "disable", " it later.") : null, /* @__PURE__ */ import_react77.default.createElement(
        Flex,
        {
          justify: "between",
          align: "center",
          css: {
            width: "100%",
            gap: "$md",
            mt: "$10",
            "@md": { px: "$4" }
          }
        },
        isMobile ? null : /* @__PURE__ */ import_react77.default.createElement(Button, { variant: "standard", css: { w: "100%" }, outlined: true, onClick: onExit }, "Cancel"),
        /* @__PURE__ */ import_react77.default.createElement(
          Flex,
          {
            direction: "column",
            justify: "between",
            align: "center",
            css: {
              width: "100%",
              "@md": { px: "$4" }
            }
          },
          isMobile && isTranscriptionEnabled ? /* @__PURE__ */ import_react77.default.createElement(
            Button,
            {
              variant: "standard",
              css: { w: "100%", mb: "$4" },
              outlined: true,
              onClick: () => {
                setIsCaptionEnabled(!isCaptionEnabled);
                onExit();
              }
            },
            isCaptionEnabled ? "Hide For Me" : "Show For Me"
          ) : null,
          /* @__PURE__ */ import_react77.default.createElement(
            Button,
            {
              variant: isTranscriptionEnabled ? "danger" : "primary",
              css: { width: "100%" },
              "data-testid": "popup_change_btn",
              onClick: async () => {
                try {
                  if (isTranscriptionEnabled) {
                    await actions.stopTranscription({
                      mode: import_react_sdk35.HMSTranscriptionMode.CAPTION
                    });
                    setIsCaptionEnabled(false);
                    const id2 = ToastManager.replaceToast(toastId, {
                      title: `Disabling Closed Caption for everyone.`,
                      variant: "standard",
                      duration: DURATION,
                      icon: /* @__PURE__ */ import_react77.default.createElement(Loading, { color: "currentColor" })
                    });
                    setToastId(id2);
                    onExit();
                    return;
                  }
                  await actions.startTranscription({
                    mode: import_react_sdk35.HMSTranscriptionMode.CAPTION
                  });
                  const id = ToastManager.replaceToast(toastId, {
                    title: `Enabling Closed Caption for everyone.`,
                    variant: "standard",
                    duration: DURATION,
                    icon: /* @__PURE__ */ import_react77.default.createElement(Loading, { color: "currentColor" })
                  });
                  setToastId(id);
                } catch (err) {
                  const id = ToastManager.replaceToast(toastId, {
                    title: `Failed to ${isTranscriptionEnabled ? "disable" : "enable"} closed caption`,
                    variant: "error",
                    icon: /* @__PURE__ */ import_react77.default.createElement(import_react_icons30.AlertTriangleIcon, { style: { marginRight: "0.5rem" } })
                  });
                  setToastId(id);
                } finally {
                  setIsCaptionEnabled(true);
                }
                onExit();
              }
            },
            isTranscriptionEnabled ? "Disable" : "Enable",
            " for Everyone"
          )
        )
      ), isMobile && /* @__PURE__ */ import_react77.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", pb: "$4", mb: "$8", "@md": { px: "$8", mt: "$4" } } }, "This will ", isTranscriptionEnabled ? "disable" : "enable", " Closed Captions for everyone in this room. You can\xA0", isTranscriptionEnabled ? "enable" : "disable", " it later."));
    };
  }
});

// src/Prebuilt/components/MoreSettings/CaptionModal.tsx
var import_react78, import_react_use14, CaptionModal;
var init_CaptionModal = __esm({
  "src/Prebuilt/components/MoreSettings/CaptionModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react78 = __toESM(require("react"));
    import_react_use14 = require("react-use");
    init_src();
    init_Sheet2();
    init_CaptionContent();
    CaptionModal = ({ onOpenChange }) => {
      const isMobile = (0, import_react_use14.useMedia)(config.media.md);
      const props = {
        isMobile,
        onExit: () => {
          onOpenChange(false);
        }
      };
      if (isMobile) {
        return /* @__PURE__ */ import_react78.default.createElement(Sheet.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react78.default.createElement(Sheet.Content, { css: { bg: "$surface_dim", p: "$8 0" } }, /* @__PURE__ */ import_react78.default.createElement(CaptionContent, { ...props })));
      }
      return /* @__PURE__ */ import_react78.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react78.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react78.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react78.default.createElement(Dialog.Content, { css: { bg: "$surface_dim", width: "min(400px,80%)", p: "$10" } }, /* @__PURE__ */ import_react78.default.createElement(CaptionContent, { ...props }))));
    };
  }
});

// src/Prebuilt/components/hooks/useFullscreen.ts
var import_react79, import_screenfull, useFullscreen;
var init_useFullscreen = __esm({
  "src/Prebuilt/components/hooks/useFullscreen.ts"() {
    "use strict";
    init_cjs_shims();
    import_react79 = require("react");
    import_screenfull = __toESM(require("screenfull"));
    init_ToastManager();
    init_constants();
    useFullscreen = () => {
      const [isFullScreenEnabled, setIsFullScreenEnabled] = (0, import_react79.useState)(import_screenfull.default.isFullscreen);
      const toggle = (0, import_react79.useCallback)(async () => {
        if (!import_screenfull.default.isEnabled) {
          ToastManager.addToast({ title: "Fullscreen feature not supported" });
          return;
        }
        try {
          const container = document.querySelector(DEFAULT_PORTAL_CONTAINER);
          if (isFullScreenEnabled) {
            await import_screenfull.default.exit();
          } else if (container) {
            await import_screenfull.default.request(container);
          }
        } catch (err) {
          ToastManager.addToast({ title: err.message });
        }
      }, [isFullScreenEnabled]);
      (0, import_react79.useEffect)(() => {
        const onChange = () => {
          setIsFullScreenEnabled(import_screenfull.default.isFullscreen);
        };
        if (import_screenfull.default.isEnabled) {
          import_screenfull.default.on("change", onChange);
        }
        return () => {
          if (import_screenfull.default.isEnabled) {
            import_screenfull.default.off("change", onChange);
          }
        };
      }, []);
      return {
        allowed: import_screenfull.default.isEnabled,
        isFullscreen: isFullScreenEnabled,
        toggleFullscreen: toggle
      };
    };
  }
});

// src/Prebuilt/components/MoreSettings/FullScreenItem.tsx
var import_react80, import_react_icons31, FullScreenItem;
var init_FullScreenItem = __esm({
  "src/Prebuilt/components/MoreSettings/FullScreenItem.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react80 = __toESM(require("react"));
    import_react_icons31 = require("@100mslive/react-icons");
    init_src();
    init_useFullscreen();
    FullScreenItem = () => {
      const { allowed, isFullscreen, toggleFullscreen } = useFullscreen();
      if (!allowed) {
        return null;
      }
      return /* @__PURE__ */ import_react80.default.createElement(
        Dropdown.Item,
        {
          onClick: () => {
            toggleFullscreen();
          },
          "data-testid": "full_screen_btn"
        },
        /* @__PURE__ */ import_react80.default.createElement(import_react_icons31.ExpandIcon, null),
        /* @__PURE__ */ import_react80.default.createElement(Text, { variant: "sm", css: { ml: "$4" } }, isFullscreen ? "Exit " : "Go ", "Fullscreen")
      );
    };
  }
});

// src/Prebuilt/components/MoreSettings/MuteAllContent.tsx
var import_react81, import_react_sdk36, MuteAllContent;
var init_MuteAllContent = __esm({
  "src/Prebuilt/components/MoreSettings/MuteAllContent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react81 = __toESM(require("react"));
    import_react_sdk36 = require("@100mslive/react-sdk");
    init_Button2();
    init_Label2();
    init_Layout();
    init_RadioGroup2();
    init_Text2();
    init_DialogContent2();
    init_constants3();
    MuteAllContent = (props) => {
      const roles = props.roles || [];
      const permissions = (0, import_react_sdk36.useHMSStore)(import_react_sdk36.selectPermissions);
      return /* @__PURE__ */ import_react81.default.createElement(import_react81.default.Fragment, null, /* @__PURE__ */ import_react81.default.createElement(
        DialogSelect,
        {
          title: "Role",
          options: [{ label: "All Roles", value: "" }, ...roles.map((role) => ({ label: role, value: role }))],
          selected: props.selectedRole,
          keyField: "value",
          labelField: "label",
          onChange: props.setRole
        }
      ), /* @__PURE__ */ import_react81.default.createElement(
        DialogSelect,
        {
          title: "Track type",
          options: trackTypeOptions,
          selected: props.trackType,
          onChange: props.setTrackType,
          keyField: "value",
          labelField: "label"
        }
      ), /* @__PURE__ */ import_react81.default.createElement(
        DialogSelect,
        {
          title: "Track source",
          options: trackSourceOptions,
          selected: props.selectedSource,
          onChange: props.setSource,
          keyField: "value",
          labelField: "label"
        }
      ), /* @__PURE__ */ import_react81.default.createElement(DialogRow, null, /* @__PURE__ */ import_react81.default.createElement(Text, { variant: "md" }, "Track status"), /* @__PURE__ */ import_react81.default.createElement(RadioGroup.Root, { value: String(props.enabled), onValueChange: (value) => props.setEnabled(value === "true") }, permissions?.mute && /* @__PURE__ */ import_react81.default.createElement(Flex, { align: "center", css: { mr: "$8" } }, /* @__PURE__ */ import_react81.default.createElement(RadioGroup.Item, { value: "false", id: "trackDisableRadio", css: { mr: "$4" } }, /* @__PURE__ */ import_react81.default.createElement(RadioGroup.Indicator, null)), /* @__PURE__ */ import_react81.default.createElement(Label3, { htmlFor: "trackDisableRadio" }, "Mute")), permissions?.unmute && /* @__PURE__ */ import_react81.default.createElement(Flex, { align: "center", css: { cursor: "pointer" } }, /* @__PURE__ */ import_react81.default.createElement(RadioGroup.Item, { value: "true", id: "trackEnableRadio", css: { mr: "$4" } }, /* @__PURE__ */ import_react81.default.createElement(RadioGroup.Indicator, null)), /* @__PURE__ */ import_react81.default.createElement(Label3, { htmlFor: "trackEnableRadio" }, "Request Unmute")))), /* @__PURE__ */ import_react81.default.createElement(DialogRow, { justify: "end" }, /* @__PURE__ */ import_react81.default.createElement(Button, { variant: "primary", onClick: props.muteAll, css: { w: props?.isMobile ? "100%" : "" } }, "Apply")));
    };
  }
});

// src/Prebuilt/components/MoreSettings/MuteAllModal.tsx
var import_react82, import_react_sdk37, import_react_icons32, MuteAllModal;
var init_MuteAllModal = __esm({
  "src/Prebuilt/components/MoreSettings/MuteAllModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react82 = __toESM(require("react"));
    import_react_sdk37 = require("@100mslive/react-sdk");
    import_react_icons32 = require("@100mslive/react-icons");
    init_src();
    init_Sheet2();
    init_DialogContent2();
    init_MuteAllContent();
    MuteAllModal = ({
      onOpenChange,
      isMobile = false
    }) => {
      const roles = (0, import_react_sdk37.useHMSStore)(import_react_sdk37.selectAvailableRoleNames);
      const hmsActions = (0, import_react_sdk37.useHMSActions)();
      const [enabled, setEnabled] = (0, import_react82.useState)(false);
      const [trackType, setTrackType] = (0, import_react82.useState)();
      const [selectedRole, setRole] = (0, import_react82.useState)();
      const [selectedSource, setSource] = (0, import_react82.useState)();
      const muteAll = (0, import_react82.useCallback)(async () => {
        await hmsActions.setRemoteTracksEnabled({
          enabled,
          type: trackType,
          source: selectedSource,
          roles: selectedRole ? [selectedRole] : void 0
        });
        onOpenChange(false);
      }, [selectedRole, enabled, trackType, selectedSource, hmsActions, onOpenChange]);
      const props = {
        muteAll,
        roles,
        enabled,
        setEnabled,
        trackType,
        setTrackType,
        selectedRole,
        setRole,
        selectedSource,
        setSource,
        isMobile
      };
      if (isMobile) {
        return /* @__PURE__ */ import_react82.default.createElement(Sheet.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react82.default.createElement(Sheet.Content, { css: { px: "$10" } }, /* @__PURE__ */ import_react82.default.createElement(MuteAllContent, { ...props })));
      }
      return /* @__PURE__ */ import_react82.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react82.default.createElement(DialogContent, { title: "Mute/Unmute Remote Tracks", Icon: import_react_icons32.MicOffIcon }, /* @__PURE__ */ import_react82.default.createElement(MuteAllContent, { ...props })));
    };
  }
});

// src/Prebuilt/components/hooks/useMetadata.tsx
var import_react83, import_react_sdk38, useMyMetadata;
var init_useMetadata = __esm({
  "src/Prebuilt/components/hooks/useMetadata.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react83 = require("react");
    import_react_sdk38 = require("@100mslive/react-sdk");
    useMyMetadata = () => {
      const hmsActions = (0, import_react_sdk38.useHMSActions)();
      const localPeerId = (0, import_react_sdk38.useHMSStore)(import_react_sdk38.selectLocalPeerID);
      const vanillaStore = (0, import_react_sdk38.useHMSVanillaStore)();
      const metaData = (0, import_react_sdk38.useHMSStore)((0, import_react_sdk38.selectPeerMetadata)(localPeerId));
      const isHandRaised = (0, import_react_sdk38.useHMSStore)((0, import_react_sdk38.selectHasPeerHandRaised)(localPeerId));
      const update = async (updatedFields) => {
        try {
          const currentMetadata = vanillaStore.getState((0, import_react_sdk38.selectPeerMetadata)(localPeerId));
          await hmsActions.changeMetadata(Object.assign(currentMetadata, updatedFields));
          return true;
        } catch (error) {
          console.error("failed to update metadata ", updatedFields);
        }
        return false;
      };
      const toggleHandRaise = (0, import_react83.useCallback)(async () => {
        if (isHandRaised) {
          await hmsActions.lowerLocalPeerHand();
          await update({ handRaisedAt: void 0 });
        } else {
          await hmsActions.raiseLocalPeerHand();
          await update({ isBRBOn: false, handRaisedAt: Date.now() });
        }
      }, [isHandRaised]);
      const toggleBRB = (0, import_react83.useCallback)(async () => {
        const newValue = !metaData?.isBRBOn;
        await update({ isBRBOn: newValue });
        if (newValue) {
          await hmsActions.lowerLocalPeerHand();
        }
      }, [metaData?.isBRBOn]);
      return {
        isHandRaised,
        isBRBOn: !!metaData?.isBRBOn,
        metaData,
        updateMetaData: update,
        toggleHandRaise,
        toggleBRB
      };
    };
  }
});

// src/Prebuilt/components/PIP/context.ts
var import_react84, PIPContext;
var init_context = __esm({
  "src/Prebuilt/components/PIP/context.ts"() {
    "use strict";
    init_cjs_shims();
    import_react84 = require("react");
    PIPContext = (0, import_react84.createContext)(void 0);
  }
});

// src/Prebuilt/components/PIP/usePIPWindow.tsx
var import_react85, usePIPWindow;
var init_usePIPWindow = __esm({
  "src/Prebuilt/components/PIP/usePIPWindow.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react85 = require("react");
    init_context();
    usePIPWindow = () => {
      const context = (0, import_react85.useContext)(PIPContext);
      if (context === void 0) {
        throw new Error("usePIPWindow must be used within a PIPContext");
      }
      return context;
    };
  }
});

// src/Prebuilt/components/PIP/usePIPChat.tsx
var import_react86, import_react_sdk39, usePIPChat;
var init_usePIPChat = __esm({
  "src/Prebuilt/components/PIP/usePIPChat.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react86 = require("react");
    import_react_sdk39 = require("@100mslive/react-sdk");
    init_Theme();
    init_usePIPWindow();
    usePIPChat = () => {
      const hmsActions = (0, import_react_sdk39.useHMSActions)();
      const { isSupported, requestPipWindow, pipWindow, closePipWindow } = usePIPWindow();
      (0, import_react86.useEffect)(() => {
        if (document && pipWindow) {
          const style = document.createElement("style");
          style.id = "stitches";
          style.textContent = getCssText();
          pipWindow.document.head.appendChild(style);
        }
      }, [pipWindow]);
      (0, import_react86.useEffect)(() => {
        if (pipWindow) {
          const chatContainer = pipWindow.document.getElementById("chat-container");
          const selector = pipWindow.document.getElementById("selector");
          const sendBtn = pipWindow.document.getElementById("send-btn");
          const pipChatInput = pipWindow.document.getElementById("chat-input");
          const marker = pipWindow.document.getElementById("marker");
          marker?.scrollIntoView({ block: "end" });
          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting && entry.target.id) {
                  hmsActions.setMessageRead(true, entry.target.id);
                }
              });
            },
            {
              root: chatContainer,
              threshold: 0.8
            }
          );
          const mutationObserver = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.addedNodes.length > 0) {
                const newMessages = mutation.addedNodes;
                newMessages.forEach((message) => {
                  const messageId = message?.id;
                  if (messageId === "new-message-notif") {
                    message.addEventListener(
                      "click",
                      () => setTimeout(() => marker?.scrollIntoView({ block: "end", behavior: "smooth" }), 0)
                    );
                  } else if (messageId) observer.observe(message);
                });
              }
            });
          });
          mutationObserver.observe(chatContainer, {
            childList: true
          });
          const sendMessage = async () => {
            const selection = selector?.value || "Everyone";
            if (selection === "Everyone") {
              await hmsActions.sendBroadcastMessage(pipChatInput.value.trim());
            } else {
              await hmsActions.sendGroupMessage(pipChatInput.value.trim(), [selection]);
            }
            pipChatInput.value = "";
            setTimeout(() => marker?.scrollIntoView({ block: "end", behavior: "smooth" }), 0);
          };
          if (sendBtn && hmsActions && pipChatInput) {
            const pipMessages = pipWindow.document.getElementsByClassName("pip-message");
            [...pipMessages].forEach((message) => {
              if (message.id) {
                hmsActions.setMessageRead(true, message.id);
              }
            });
            const sendOnEnter = (e) => {
              if (e.key === "Enter") sendMessage();
            };
            sendBtn.addEventListener("click", sendMessage);
            pipChatInput.addEventListener("keypress", sendOnEnter);
            return () => {
              sendBtn.removeEventListener("click", sendMessage);
              pipChatInput.removeEventListener("keypress", sendOnEnter);
              mutationObserver.disconnect();
              observer.disconnect();
            };
          }
        }
      }, [pipWindow, hmsActions]);
      (0, import_react86.useEffect)(() => {
        return () => {
          pipWindow && closePipWindow();
        };
      }, [closePipWindow, pipWindow]);
      return { isSupported, requestPipWindow, pipWindow };
    };
  }
});

// src/Prebuilt/components/MoreSettings/SplitComponents/DesktopOptions.tsx
var import_react87, import_hls_player, import_ts_pattern5, import_react_sdk40, import_react_icons33, MODALS, DesktopOptions;
var init_DesktopOptions = __esm({
  "src/Prebuilt/components/MoreSettings/SplitComponents/DesktopOptions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react87 = __toESM(require("react"));
    import_hls_player = require("@100mslive/hls-player");
    import_ts_pattern5 = require("ts-pattern");
    import_react_sdk40 = require("@100mslive/react-sdk");
    import_react_icons33 = require("@100mslive/react-icons");
    init_src();
    init_IconButton3();
    init_PIP();
    init_PIPChat();
    init_PIPChatOption();
    init_PIPManager();
    init_PIPWindow();
    init_RoleChangeModal();
    init_SettingsModal();
    init_StartRecording();
    init_StatsForNerds();
    init_BulkRoleChangeModal();
    init_CaptionModal();
    init_FullScreenItem();
    init_MuteAllModal();
    init_useSidepane();
    init_useDropdownList();
    init_useMetadata();
    init_usePIPChat();
    init_constants();
    MODALS = {
      CHANGE_NAME: "changeName",
      SELF_ROLE_CHANGE: "selfRoleChange",
      MORE_SETTINGS: "moreSettings",
      START_RECORDING: "startRecording",
      DEVICE_SETTINGS: "deviceSettings",
      STATS_FOR_NERDS: "statsForNerds",
      BULK_ROLE_CHANGE: "bulkRoleChange",
      MUTE_ALL: "muteAll",
      EMBED_URL: "embedUrl",
      CAPTION: "caption"
    };
    DesktopOptions = ({
      elements,
      screenType
    }) => {
      const localPeerId = (0, import_react_sdk40.useHMSStore)(import_react_sdk40.selectLocalPeerID);
      const hmsActions = (0, import_react_sdk40.useHMSActions)();
      const enablHlsStats = (0, import_react_sdk40.useHMSStore)((0, import_react_sdk40.selectAppData)(APP_DATA.hlsStats));
      const [openModals, setOpenModals] = (0, import_react87.useState)(/* @__PURE__ */ new Set());
      const { isBRBOn, toggleBRB } = useMyMetadata();
      const isPipOn = PictureInPicture.isOn();
      const isBRBEnabled = !!elements?.brb;
      const isTranscriptionAllowed = (0, import_react_sdk40.useHMSStore)((0, import_react_sdk40.selectIsTranscriptionAllowedByMode)(import_react_sdk40.HMSTranscriptionMode.CAPTION));
      const isTranscriptionEnabled = (0, import_react_sdk40.useHMSStore)(import_react_sdk40.selectIsTranscriptionEnabled);
      const { isSupported, pipWindow, requestPipWindow } = usePIPChat();
      const isChatOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.CHAT);
      const toggleChat = useSidepaneToggle(SIDE_PANE_OPTIONS.CHAT);
      const showPipChatOption = !!elements?.chat && isSupported && !pipWindow;
      useDropdownList({ open: openModals.size > 0, name: "MoreSettings" });
      const updateState = (modalName, value) => {
        setOpenModals((modals) => {
          const copy = new Set(modals);
          if (value) {
            copy.clear();
            copy.add(modalName);
          } else {
            copy.delete(modalName);
          }
          return copy;
        });
      };
      return /* @__PURE__ */ import_react87.default.createElement(import_react87.Fragment, null, isSupported && pipWindow ? /* @__PURE__ */ import_react87.default.createElement(PIPWindow, { pipWindow }, /* @__PURE__ */ import_react87.default.createElement(PIPChat, null)) : null, /* @__PURE__ */ import_react87.default.createElement(
        Dropdown.Root,
        {
          open: openModals.has(MODALS.MORE_SETTINGS),
          onOpenChange: (value) => updateState(MODALS.MORE_SETTINGS, value),
          modal: false
        },
        /* @__PURE__ */ import_react87.default.createElement(Tooltip, { title: "More options" }, /* @__PURE__ */ import_react87.default.createElement(Dropdown.Trigger, { asChild: true, "data-testid": "more_settings_btn" }, /* @__PURE__ */ import_react87.default.createElement(IconButton_default, null, /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.HamburgerMenuIcon, null)))),
        /* @__PURE__ */ import_react87.default.createElement(
          Dropdown.Content,
          {
            sideOffset: 5,
            align: "end",
            css: {
              py: "$0",
              maxHeight: "unset",
              "@md": { w: "$64" },
              "div[role='separator']:first-child": {
                display: "none"
              }
            }
          },
          isBRBEnabled && screenType !== "hls_live_streaming" ? /* @__PURE__ */ import_react87.default.createElement(Dropdown.Item, { onClick: toggleBRB, "data-testid": "brb_btn" }, /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.BrbIcon, null), /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "sm", css: { ml: "$4", color: "$on_surface_high" } }, "Be Right Back"), /* @__PURE__ */ import_react87.default.createElement(Flex, { justify: "end", css: { color: "$on_surface_high", flexGrow: "1" } }, isBRBOn ? /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.CheckIcon, null) : null)) : null,
          isTranscriptionAllowed ? /* @__PURE__ */ import_react87.default.createElement(
            Dropdown.Item,
            {
              "data-testid": "closed_caption_admin",
              onClick: () => {
                updateState(MODALS.CAPTION, true);
              }
            },
            /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.OpenCaptionIcon, null),
            /* @__PURE__ */ import_react87.default.createElement(Flex, { direction: "column", css: { flexGrow: "1" } }, /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "sm", css: { ml: "$4", color: "$on_surface_high" } }, "Closed Captions"), /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "caption", css: { ml: "$4", color: "$on_surface_medium" } }, isTranscriptionEnabled ? "Enabled" : "Disabled")),
            /* @__PURE__ */ import_react87.default.createElement(Switch, { id: "closed_caption_start_stop", checked: isTranscriptionEnabled, disabled: false })
          ) : null,
          screenType !== "hls_live_streaming" ? /* @__PURE__ */ import_react87.default.createElement(Dropdown.Item, { css: { p: 0, "&:empty": { display: "none" } } }, /* @__PURE__ */ import_react87.default.createElement(
            PIP,
            {
              content: /* @__PURE__ */ import_react87.default.createElement(Flex, { css: { w: "100%", h: "100%", p: "$8" } }, /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.PipIcon, null), /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "sm", css: { ml: "$4" } }, isPipOn ? "Disable" : "Enable", " Picture-in-Picture"))
            }
          )) : null,
          /* @__PURE__ */ import_react87.default.createElement(
            PIPChatOption,
            {
              showPIPChat: showPipChatOption,
              openChat: async () => {
                isChatOpen && toggleChat();
                await requestPipWindow(350, 500);
              }
            }
          ),
          /* @__PURE__ */ import_react87.default.createElement(FullScreenItem, null),
          /* @__PURE__ */ import_react87.default.createElement(Dropdown.ItemSeparator, { css: { mx: 0 } }),
          /* @__PURE__ */ import_react87.default.createElement(Dropdown.Item, { onClick: () => updateState(MODALS.DEVICE_SETTINGS, true), "data-testid": "device_settings_btn" }, /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.SettingsIcon, null), /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "sm", css: { ml: "$4" } }, "Settings")),
          (0, import_ts_pattern5.match)({ screenType, isSupported: import_hls_player.HMSHLSPlayer.isSupported() }).with({ screenType: "hls_live_streaming", isSupported: false }, () => null).with({ screenType: "hls_live_streaming", isSupported: true }, () => {
            return /* @__PURE__ */ import_react87.default.createElement(
              Dropdown.Item,
              {
                onClick: () => hmsActions.setAppData(APP_DATA.hlsStats, !enablHlsStats),
                "data-testid": "hls_stats"
              },
              /* @__PURE__ */ import_react87.default.createElement(
                Checkbox.Root,
                {
                  css: { margin: "$2" },
                  checked: enablHlsStats,
                  onCheckedChange: () => hmsActions.setAppData(APP_DATA.hlsStats, !enablHlsStats)
                },
                /* @__PURE__ */ import_react87.default.createElement(Checkbox.Indicator, null, /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.CheckIcon, { width: 16, height: 16 }))
              ),
              /* @__PURE__ */ import_react87.default.createElement(Flex, { justify: "between", css: { width: "100%" } }, /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "sm", css: { ml: "$4" } }, "Show HLS Stats"), /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "sm", css: { ml: "$4" } }, `${isMacOS ? "\u2318" : "ctrl"} + ]`))
            );
          }).otherwise(() => /* @__PURE__ */ import_react87.default.createElement(
            Dropdown.Item,
            {
              onClick: () => updateState(MODALS.STATS_FOR_NERDS, true),
              "data-testid": "stats_for_nerds_btn"
            },
            /* @__PURE__ */ import_react87.default.createElement(import_react_icons33.InfoIcon, null),
            /* @__PURE__ */ import_react87.default.createElement(Text, { variant: "sm", css: { ml: "$4" } }, "Stats for Nerds")
          ))
        )
      ), openModals.has(MODALS.BULK_ROLE_CHANGE) && /* @__PURE__ */ import_react87.default.createElement(BulkRoleChangeModal, { onOpenChange: (value) => updateState(MODALS.BULK_ROLE_CHANGE, value) }), openModals.has(MODALS.MUTE_ALL) && /* @__PURE__ */ import_react87.default.createElement(MuteAllModal, { onOpenChange: (value) => updateState(MODALS.MUTE_ALL, value) }), openModals.has(MODALS.START_RECORDING) && /* @__PURE__ */ import_react87.default.createElement(StartRecording_default, { open: true, onOpenChange: (value) => updateState(MODALS.START_RECORDING, value) }), openModals.has(MODALS.DEVICE_SETTINGS) && /* @__PURE__ */ import_react87.default.createElement(
        SettingsModal_default,
        {
          open: true,
          onOpenChange: (value) => updateState(MODALS.DEVICE_SETTINGS, value),
          screenType
        }
      ), openModals.has(MODALS.STATS_FOR_NERDS) && /* @__PURE__ */ import_react87.default.createElement(StatsForNerds, { open: true, onOpenChange: (value) => updateState(MODALS.STATS_FOR_NERDS, value) }), openModals.has(MODALS.SELF_ROLE_CHANGE) && /* @__PURE__ */ import_react87.default.createElement(
        RoleChangeModal,
        {
          peerId: localPeerId,
          onOpenChange: (value) => updateState(MODALS.SELF_ROLE_CHANGE, value)
        }
      ), openModals.has(MODALS.CAPTION) && /* @__PURE__ */ import_react87.default.createElement(CaptionModal, { onOpenChange: (value) => updateState(MODALS.CAPTION, value) }));
    };
  }
});

// src/Prebuilt/components/Header/StreamActions.tsx
var import_react88, import_react_use15, import_hms_video_store, import_react_sdk41, import_react_icons34, getRecordingText, LiveStatus, RecordingStatus, RecordingPauseStatus, StartRecording2, StreamActions, StopRecordingInSheet;
var init_StreamActions = __esm({
  "src/Prebuilt/components/Header/StreamActions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react88 = __toESM(require("react"));
    import_react_use15 = require("react-use");
    import_hms_video_store = require("@100mslive/hms-video-store");
    import_react_sdk41 = require("@100mslive/react-sdk");
    import_react_icons34 = require("@100mslive/react-icons");
    init_src();
    init_Sheet2();
    init_ToastManager();
    init_useRoomLayoutScreen();
    init_hooks();
    init_utils2();
    getRecordingText = ({
      isBrowserRecordingOn,
      isServerRecordingOn,
      isHLSRecordingOn
    }, delimiter = ", ") => {
      if (!isBrowserRecordingOn && !isServerRecordingOn && !isHLSRecordingOn) {
        return "";
      }
      const title = [];
      if (isBrowserRecordingOn) {
        title.push("Browser");
      }
      if (isServerRecordingOn) {
        title.push("Server");
      }
      if (isHLSRecordingOn) {
        title.push("HLS");
      }
      return title.join(delimiter);
    };
    LiveStatus = () => {
      const { isHLSRunning, isRTMPRunning } = (0, import_react_sdk41.useRecordingStreaming)();
      const hlsState = (0, import_react_sdk41.useHMSStore)(import_react_sdk41.selectHLSState);
      const isMobile = (0, import_react_use15.useMedia)(config.media.md);
      const intervalRef = (0, import_react88.useRef)(null);
      const { screenType } = useRoomLayoutConferencingScreen();
      const [liveTime, setLiveTime] = (0, import_react88.useState)(0);
      const startTimer = (0, import_react88.useCallback)(() => {
        intervalRef.current = setInterval(() => {
          const timeStamp = hlsState?.variants[0]?.[screenType === "hls_live_streaming" ? "startedAt" : "initialisedAt"];
          if (hlsState?.running && timeStamp) {
            setLiveTime(Date.now() - timeStamp.getTime());
          }
        }, 1e3);
      }, [hlsState?.running, hlsState?.variants, screenType]);
      (0, import_react88.useEffect)(() => {
        if (hlsState?.running) {
          startTimer();
        }
        if (!hlsState?.running && intervalRef.current) {
          clearInterval(intervalRef.current);
        }
        return () => {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
          }
        };
      }, [hlsState.running, isMobile, startTimer]);
      if (!isHLSRunning && !isRTMPRunning) {
        return null;
      }
      return /* @__PURE__ */ import_react88.default.createElement(
        Flex,
        {
          align: "center",
          gap: "1",
          css: {
            border: "1px solid $border_default",
            padding: "$4 $6 $4 $6",
            borderRadius: "$1"
          }
        },
        /* @__PURE__ */ import_react88.default.createElement(Box, { css: { w: "$4", h: "$4", r: "$round", bg: "$alert_error_default", mr: "$2" } }),
        /* @__PURE__ */ import_react88.default.createElement(Flex, { align: "center", gap: "2" }, /* @__PURE__ */ import_react88.default.createElement(Text, { variant: !isMobile ? "button" : "body2" }, "LIVE"), /* @__PURE__ */ import_react88.default.createElement(Text, { variant: "caption" }, hlsState?.variants?.length > 0 && isHLSRunning ? formatTime(liveTime) : ""))
      );
    };
    RecordingStatus = () => {
      const { isBrowserRecordingOn, isServerRecordingOn, isHLSRecordingOn, isRecordingOn } = (0, import_react_sdk41.useRecordingStreaming)();
      const permissions = (0, import_react_sdk41.useHMSStore)(import_react_sdk41.selectPermissions);
      const isMobile = (0, import_react_use15.useMedia)(config.media.md);
      if (!isRecordingOn || // if only browser recording is enabled, stop recording is shown
      // so no need to show this as it duplicates
      [permissions?.browserRecording, !isServerRecordingOn, !isHLSRecordingOn, isBrowserRecordingOn].every(
        (value) => !!value
      )) {
        if (!(isMobile && isRecordingOn)) return null;
      }
      return /* @__PURE__ */ import_react88.default.createElement(
        Tooltip,
        {
          boxCss: { zIndex: 1 },
          title: getRecordingText({
            isBrowserRecordingOn,
            isServerRecordingOn,
            isHLSRecordingOn
          })
        },
        /* @__PURE__ */ import_react88.default.createElement(
          Flex,
          {
            css: {
              color: "$alert_error_default",
              alignItems: "center"
            }
          },
          /* @__PURE__ */ import_react88.default.createElement(import_react_icons34.RecordIcon, { width: 24, height: 24 })
        )
      );
    };
    RecordingPauseStatus = () => {
      const recording = (0, import_react_sdk41.useHMSStore)(import_react_sdk41.selectRecordingState);
      if (recording.hls && recording.hls.state === import_hms_video_store.HMSRecordingState.PAUSED) {
        return /* @__PURE__ */ import_react88.default.createElement(
          Tooltip,
          {
            boxCss: { zIndex: 1 },
            title: getRecordingText({
              isBrowserRecordingOn: false,
              isServerRecordingOn: false,
              isHLSRecordingOn: true
            })
          },
          /* @__PURE__ */ import_react88.default.createElement(
            Flex,
            {
              css: {
                color: "$on_surface_high",
                alignItems: "center"
              }
            },
            /* @__PURE__ */ import_react88.default.createElement(import_react_icons34.PauseCircleIcon, { width: 24, height: 24 })
          )
        );
      }
      return null;
    };
    StartRecording2 = () => {
      const permissions = (0, import_react_sdk41.useHMSStore)(import_react_sdk41.selectPermissions);
      const [open, setOpen] = (0, import_react88.useState)(false);
      const { startRecording, recordingStarted } = useRecordingHandler();
      const { isBrowserRecordingOn, isStreamingOn, isHLSRunning } = (0, import_react_sdk41.useRecordingStreaming)();
      const hmsActions = (0, import_react_sdk41.useHMSActions)();
      if (!permissions?.browserRecording || isHLSRunning) {
        return null;
      }
      if (isBrowserRecordingOn) {
        return /* @__PURE__ */ import_react88.default.createElement(Popover2.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react88.default.createElement(Popover2.Trigger, { asChild: true }, /* @__PURE__ */ import_react88.default.createElement(Button, { variant: "danger", "data-testid": "stop_recording", icon: true, outlined: true, onClick: () => setOpen(true) }, /* @__PURE__ */ import_react88.default.createElement(import_react_icons34.RecordIcon, null), /* @__PURE__ */ import_react88.default.createElement(Text, { as: "span", css: { "@md": { display: "none" }, color: "currentColor" } }, "Stop Recording"))), /* @__PURE__ */ import_react88.default.createElement(Popover2.Portal, null, /* @__PURE__ */ import_react88.default.createElement(Popover2.Content, { align: "end", sideOffset: 8, css: { w: "$64" } }, /* @__PURE__ */ import_react88.default.createElement(Text, { variant: "body1", css: { color: "$on_surface_medium" } }, "Are you sure you want to end the recording?"), /* @__PURE__ */ import_react88.default.createElement(
          Button,
          {
            "data-testid": "stop_recording_confirm",
            variant: "danger",
            icon: true,
            css: { ml: "auto" },
            onClick: async () => {
              try {
                await hmsActions.stopRTMPAndRecording();
              } catch (error) {
                const err = error;
                ToastManager.addToast({
                  title: err.message,
                  variant: "error"
                });
              }
              setOpen(false);
            }
          },
          "Stop"
        ))));
      }
      return /* @__PURE__ */ import_react88.default.createElement(
        Button,
        {
          "data-testid": "start_recording",
          variant: "standard",
          icon: true,
          disabled: recordingStarted || isStreamingOn,
          onClick: async () => {
            await startRecording();
          }
        },
        recordingStarted ? /* @__PURE__ */ import_react88.default.createElement(Loading, { size: 24, color: "currentColor" }) : /* @__PURE__ */ import_react88.default.createElement(import_react_icons34.RecordIcon, null),
        /* @__PURE__ */ import_react88.default.createElement(Text, { as: "span", css: { "@md": { display: "none" }, color: "currentColor" } }, recordingStarted ? "Starting" : "Start", " Recording")
      );
    };
    StreamActions = () => {
      const isConnected = (0, import_react_sdk41.useHMSStore)(import_react_sdk41.selectIsConnectedToRoom);
      const isMobile = (0, import_react_use15.useMedia)(config.media.md);
      const roomState = (0, import_react_sdk41.useHMSStore)(import_react_sdk41.selectRoomState);
      return /* @__PURE__ */ import_react88.default.createElement(Flex, { align: "center", css: { gap: "$4" } }, !isMobile && /* @__PURE__ */ import_react88.default.createElement(Flex, { align: "center", css: { gap: "$4" } }, /* @__PURE__ */ import_react88.default.createElement(RecordingPauseStatus, null), /* @__PURE__ */ import_react88.default.createElement(RecordingStatus, null), roomState !== import_react_sdk41.HMSRoomState.Preview ? /* @__PURE__ */ import_react88.default.createElement(LiveStatus, null) : null), isConnected && !isMobile ? /* @__PURE__ */ import_react88.default.createElement(StartRecording2, null) : null);
    };
    StopRecordingInSheet = ({
      onStopRecording,
      onClose
    }) => {
      return /* @__PURE__ */ import_react88.default.createElement(Sheet.Root, { open: true }, /* @__PURE__ */ import_react88.default.createElement(Sheet.Content, null, /* @__PURE__ */ import_react88.default.createElement(Sheet.Title, { css: { p: "$10" } }, /* @__PURE__ */ import_react88.default.createElement(Flex, { direction: "row", justify: "between", css: { w: "100%", c: "$alert_error_default" } }, /* @__PURE__ */ import_react88.default.createElement(Flex, { justify: "start", align: "center", gap: "3" }, /* @__PURE__ */ import_react88.default.createElement(import_react_icons34.AlertTriangleIcon, null), /* @__PURE__ */ import_react88.default.createElement(Text, { variant: "h5", css: { c: "$alert_error_default" } }, "Stop Recording")), /* @__PURE__ */ import_react88.default.createElement(Sheet.Close, { css: { color: "white" }, onClick: onClose }, /* @__PURE__ */ import_react88.default.createElement(import_react_icons34.CrossIcon, null)))), /* @__PURE__ */ import_react88.default.createElement(HorizontalDivider, null), /* @__PURE__ */ import_react88.default.createElement(Box, { as: "div", css: { p: "$10", overflowY: "scroll", maxHeight: "70vh" } }, /* @__PURE__ */ import_react88.default.createElement(Text, { variant: "caption", css: { c: "$on_surface_medium", pb: "$8" } }, "Are you sure you want to stop recording? You can\u2019t undo this action."), /* @__PURE__ */ import_react88.default.createElement(
        Button,
        {
          variant: "danger",
          css: { width: "100%" },
          type: "submit",
          "data-testid": "popup_change_btn",
          onClick: onStopRecording
        },
        "Stop"
      ))));
    };
  }
});

// src/Prebuilt/components/MoreSettings/ChangeNameContent.tsx
var import_react89, import_react_icons35, ChangeNameContent;
var init_ChangeNameContent = __esm({
  "src/Prebuilt/components/MoreSettings/ChangeNameContent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react89 = __toESM(require("react"));
    import_react_icons35 = require("@100mslive/react-icons");
    init_Button2();
    init_Input2();
    init_Layout();
    init_Text2();
    ChangeNameContent = ({
      changeName,
      setCurrentName,
      currentName,
      localPeerName,
      isMobile,
      onExit,
      onBackClick
    }) => {
      return /* @__PURE__ */ import_react89.default.createElement(
        "form",
        {
          onSubmit: async (e) => {
            e.preventDefault();
            await changeName();
          }
        },
        /* @__PURE__ */ import_react89.default.createElement(
          Text,
          {
            variant: isMobile ? "md" : "lg",
            css: {
              color: "$on_surface_high",
              fontWeight: "$semiBold",
              display: "flex",
              pb: "$4",
              "@md": { px: "$8", borderBottom: "1px solid $border_default" }
            }
          },
          isMobile ? /* @__PURE__ */ import_react89.default.createElement(import_react_icons35.ChevronLeftIcon, { onClick: onBackClick, style: { marginRight: "0.5rem" } }) : null,
          "Change Name",
          /* @__PURE__ */ import_react89.default.createElement(
            Box,
            {
              css: { color: "inherit", ml: "auto", "&:hover": { color: "$on_surface_medium", cursor: "pointer" } },
              onClick: onExit
            },
            /* @__PURE__ */ import_react89.default.createElement(import_react_icons35.CrossIcon, null)
          )
        ),
        /* @__PURE__ */ import_react89.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", pb: "$6", mb: "$8", "@md": { px: "$8", mt: "$4" } } }, "Your name will be visible to other participants in the session."),
        /* @__PURE__ */ import_react89.default.createElement(Flex, { justify: "center", align: "center", css: { my: "$8", w: "100%", "@md": { px: "$8" } } }, /* @__PURE__ */ import_react89.default.createElement(
          Input,
          {
            css: { width: "100%", bg: "$surface_default" },
            value: currentName,
            type: isMobile ? "search" : "text",
            onChange: (e) => {
              setCurrentName(e.target.value);
            },
            autoComplete: "name",
            required: true,
            "data-testid": "change_name_field",
            onKeyDown: async (e) => {
              if (e.key === "Enter" && currentName && currentName.trim().length > 0 && currentName !== localPeerName) {
                e.preventDefault();
                if (isMobile) {
                  return;
                }
                changeName();
              }
            }
          }
        )),
        /* @__PURE__ */ import_react89.default.createElement(
          Flex,
          {
            justify: "between",
            align: "center",
            css: {
              width: "100%",
              gap: "$md",
              mt: "$10",
              "@md": { px: "$4" }
            }
          },
          isMobile ? null : /* @__PURE__ */ import_react89.default.createElement(
            Button,
            {
              variant: "standard",
              css: { w: "100%" },
              outlined: true,
              type: "submit",
              disabled: !localPeerName,
              onClick: onExit
            },
            "Cancel"
          ),
          /* @__PURE__ */ import_react89.default.createElement(
            Button,
            {
              variant: "primary",
              css: { width: "100%" },
              type: "submit",
              disabled: !currentName?.trim() || currentName?.trim() === localPeerName,
              "data-testid": "popup_change_btn"
            },
            "Change"
          )
        )
      );
    };
  }
});

// src/Prebuilt/components/MoreSettings/ChangeNameModal.tsx
var import_react90, import_react_use16, import_react_sdk42, ChangeNameModal;
var init_ChangeNameModal = __esm({
  "src/Prebuilt/components/MoreSettings/ChangeNameModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react90 = __toESM(require("react"));
    import_react_use16 = require("react-use");
    import_react_sdk42 = require("@100mslive/react-sdk");
    init_src();
    init_Sheet2();
    init_ToastManager();
    init_ChangeNameContent();
    init_useUserPreferences();
    ChangeNameModal = ({
      onOpenChange,
      openParentSheet = void 0
    }) => {
      const [previewPreference, setPreviewPreference] = useUserPreferences(UserPreferencesKeys.PREVIEW);
      const hmsActions = (0, import_react_sdk42.useHMSActions)();
      const localPeerName = (0, import_react_sdk42.useHMSStore)(import_react_sdk42.selectLocalPeerName);
      const [currentName, setCurrentName] = (0, import_react90.useState)(localPeerName);
      const isMobile = (0, import_react_use16.useMedia)(config.media.md);
      const changeName = async () => {
        const name = currentName?.trim() || "";
        if (!name || name === localPeerName) {
          return;
        }
        try {
          await hmsActions.changeName(name);
          setPreviewPreference({
            ...previewPreference || {},
            name
          });
        } catch (error) {
          console.error("failed to update name", error);
          ToastManager.addToast({ title: error.message });
        } finally {
          onOpenChange(false);
        }
      };
      const props = {
        changeName,
        setCurrentName,
        currentName,
        localPeerName,
        isMobile,
        onExit: () => onOpenChange(false),
        onBackClick: () => {
          onOpenChange(false);
          openParentSheet?.();
        }
      };
      if (isMobile) {
        return /* @__PURE__ */ import_react90.default.createElement(Sheet.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react90.default.createElement(Sheet.Content, { css: { bg: "$surface_dim", p: "$8 0" } }, /* @__PURE__ */ import_react90.default.createElement(ChangeNameContent, { ...props })));
      }
      return /* @__PURE__ */ import_react90.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react90.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react90.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react90.default.createElement(Dialog.Content, { css: { bg: "$surface_dim", width: "min(400px,80%)", p: "$10" } }, /* @__PURE__ */ import_react90.default.createElement(ChangeNameContent, { ...props }))));
    };
  }
});

// src/Prebuilt/components/AppData/useSheet.ts
var import_react91, import_react_sdk43, useIsSheetTypeOpen, useSheetToggle;
var init_useSheet = __esm({
  "src/Prebuilt/components/AppData/useSheet.ts"() {
    "use strict";
    init_cjs_shims();
    import_react91 = require("react");
    import_react_sdk43 = require("@100mslive/react-sdk");
    init_constants();
    useIsSheetTypeOpen = (sheetType) => {
      if (!sheetType) {
        throw Error("Pass one of the sheet options");
      }
      return (0, import_react_sdk43.useHMSStore)((0, import_react_sdk43.selectAppData)(APP_DATA.sheet)) === sheetType;
    };
    useSheetToggle = (sheetType) => {
      const hmsActions = (0, import_react_sdk43.useHMSActions)();
      const vanillaStore = (0, import_react_sdk43.useHMSVanillaStore)();
      const toggleSheet = (0, import_react91.useCallback)(() => {
        const isOpen = vanillaStore.getState((0, import_react_sdk43.selectAppData)(APP_DATA.sheet)) === sheetType;
        hmsActions.setAppData(APP_DATA.sheet, !isOpen ? sheetType : "");
      }, [vanillaStore, hmsActions, sheetType]);
      return toggleSheet;
    };
  }
});

// src/Prebuilt/components/hooks/useUnreadPollQuizPresent.tsx
var import_react92, import_hms_video_store2, import_react_sdk44, useUnreadPollQuizPresent;
var init_useUnreadPollQuizPresent = __esm({
  "src/Prebuilt/components/hooks/useUnreadPollQuizPresent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react92 = require("react");
    import_hms_video_store2 = require("@100mslive/hms-video-store");
    import_react_sdk44 = require("@100mslive/react-sdk");
    useUnreadPollQuizPresent = () => {
      const localPeerID = (0, import_react_sdk44.useHMSStore)(import_hms_video_store2.selectLocalPeerID);
      const notification = (0, import_react_sdk44.useHMSNotifications)(import_react_sdk44.HMSNotificationTypes.POLL_STARTED);
      const [unreadPollQuiz, setUnreadPollQuiz] = (0, import_react92.useState)(false);
      (0, import_react92.useEffect)(() => {
        if (!notification) {
          return;
        }
        setUnreadPollQuiz(notification.data.startedBy !== localPeerID);
      }, [localPeerID, notification]);
      return { unreadPollQuiz, setUnreadPollQuiz };
    };
  }
});

// src/Prebuilt/components/MoreSettings/SplitComponents/MwebOptions.tsx
var import_react93, import_react_use17, import_ts_pattern6, import_react_sdk45, import_react_icons36, MODALS2, MwebOptions;
var init_MwebOptions = __esm({
  "src/Prebuilt/components/MoreSettings/SplitComponents/MwebOptions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react93 = __toESM(require("react"));
    import_react_use17 = require("react-use");
    import_ts_pattern6 = require("ts-pattern");
    import_react_sdk45 = require("@100mslive/react-sdk");
    import_react_icons36 = require("@100mslive/react-icons");
    init_src();
    init_Sheet2();
    init_IconButton3();
    init_AudioVideoToggle();
    init_EmojiReaction();
    init_StreamActions();
    init_SettingsModal();
    init_ToastManager();
    init_ActionTile();
    init_CaptionModal();
    init_ChangeNameModal();
    init_MuteAllModal();
    init_useRoomLayoutScreen();
    init_useSheet();
    init_useSidepane();
    init_useUISettings();
    init_useDropdownList();
    init_useMetadata();
    init_useUnreadPollQuizPresent();
    init_hooks();
    init_utils2();
    init_constants();
    MODALS2 = {
      CHANGE_NAME: "changeName",
      SELF_ROLE_CHANGE: "selfRoleChange",
      MORE_SETTINGS: "moreSettings",
      START_RECORDING: "startRecording",
      DEVICE_SETTINGS: "deviceSettings",
      STATS_FOR_NERDS: "statsForNerds",
      BULK_ROLE_CHANGE: "bulkRoleChange",
      MUTE_ALL: "muteAll",
      EMBED_URL: "embedUrl",
      CAPTION: "caption"
    };
    MwebOptions = ({
      elements,
      screenType
    }) => {
      const hmsActions = (0, import_react_sdk45.useHMSActions)();
      const permissions = (0, import_react_sdk45.useHMSStore)(import_react_sdk45.selectPermissions);
      const isConnected = (0, import_react_sdk45.useHMSStore)(import_react_sdk45.selectIsConnectedToRoom);
      const { isBrowserRecordingOn, isStreamingOn, isHLSRunning } = (0, import_react_sdk45.useRecordingStreaming)();
      const [openModals, setOpenModals] = (0, import_react93.useState)(/* @__PURE__ */ new Set());
      const [openOptionsSheet, setOpenOptionsSheet] = (0, import_react93.useState)(false);
      const [openSettingsSheet, setOpenSettingsSheet] = (0, import_react93.useState)(false);
      const [showEmojiCard, setShowEmojiCard] = (0, import_react93.useState)(false);
      const [showRecordingOn, setShowRecordingOn] = (0, import_react93.useState)(false);
      const toggleParticipants = useSidepaneToggle(SIDE_PANE_OPTIONS.PARTICIPANTS);
      const { showPolls } = useShowPolls();
      const togglePollView = usePollViewToggle();
      const peerCount = (0, import_react_sdk45.useHMSStore)(import_react_sdk45.selectPeerCount);
      const emojiCardRef = (0, import_react93.useRef)(null);
      const { isBRBOn, toggleBRB, isHandRaised, toggleHandRaise } = useMyMetadata();
      const { unreadPollQuiz, setUnreadPollQuiz } = useUnreadPollQuizPresent();
      const { title, description } = useRoomLayoutHeader();
      const toggleDetailsSheet = useSheetToggle(SHEET_OPTIONS.ROOM_DETAILS);
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeHLSStream = useLandscapeHLSStream();
      const toggleVB = useSidepaneToggle(SIDE_PANE_OPTIONS.VB);
      const isLocalVideoEnabled = (0, import_react_sdk45.useHMSStore)(import_react_sdk45.selectIsLocalVideoEnabled);
      const { startRecording, isRecordingLoading } = useRecordingHandler();
      const isTranscriptionAllowed = (0, import_react_sdk45.useHMSStore)((0, import_react_sdk45.selectIsTranscriptionAllowedByMode)(import_react_sdk45.HMSTranscriptionMode.CAPTION));
      const isTranscriptionEnabled = (0, import_react_sdk45.useHMSStore)(import_react_sdk45.selectIsTranscriptionEnabled);
      const [isCaptionEnabled] = useSetIsCaptionEnabled();
      useDropdownList({ open: openModals.size > 0 || openOptionsSheet || openSettingsSheet, name: "MoreSettings" });
      const updateState = (modalName, value) => {
        setOpenModals((modals) => {
          const copy = new Set(modals);
          if (value) {
            copy.add(modalName);
          } else {
            copy.delete(modalName);
          }
          return copy;
        });
      };
      (0, import_react_use17.useClickAway)(emojiCardRef, () => setShowEmojiCard(false));
      return /* @__PURE__ */ import_react93.default.createElement(import_react93.default.Fragment, null, /* @__PURE__ */ import_react93.default.createElement(Sheet.Root, { open: openOptionsSheet, onOpenChange: setOpenOptionsSheet }, /* @__PURE__ */ import_react93.default.createElement(Tooltip, { title: "More options" }, /* @__PURE__ */ import_react93.default.createElement(Sheet.Trigger, { asChild: true, "data-testid": "more_settings_btn" }, /* @__PURE__ */ import_react93.default.createElement(IconButton_default, { css: { bg: isMobileHLSStream || isLandscapeHLSStream ? "$surface_default" : "" } }, /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.HamburgerMenuIcon, null)))), /* @__PURE__ */ import_react93.default.createElement(Sheet.Content, { css: { bg: "$surface_dim", pb: "$14" } }, /* @__PURE__ */ import_react93.default.createElement(
        Sheet.Title,
        {
          css: {
            display: "flex",
            color: "$on_surface_high",
            w: "100%",
            justifyContent: "space-between",
            fontSize: "$md",
            mt: "$8",
            px: "$10",
            pb: "$8",
            borderBottom: "1px solid $border_default",
            mb: "$8",
            alignItems: "center"
          }
        },
        "Options",
        /* @__PURE__ */ import_react93.default.createElement(Sheet.Close, null, /* @__PURE__ */ import_react93.default.createElement(Box, { css: { color: "$on_surface_high" } }, /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.CrossIcon, null)))
      ), /* @__PURE__ */ import_react93.default.createElement(
        Box,
        {
          css: {
            display: "grid",
            gridTemplateColumns: "1fr 1fr 1fr",
            gridTemplateRows: "auto",
            gridColumnGap: "$6",
            gridRowGap: "$8",
            px: "$9"
          }
        },
        elements?.participant_list && /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            onClick: () => {
              toggleParticipants();
              setOpenOptionsSheet(false);
            }
          },
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Count, null, getFormattedCount(peerCount)),
          /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.PeopleIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "Participants")
        ),
        elements.hand_raise ? /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            active: isHandRaised,
            onClick: () => {
              toggleHandRaise();
              setOpenOptionsSheet(false);
            }
          },
          isHandRaised ? /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.HandRaiseSlashedIcon, null) : /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.HandIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, isHandRaised ? "Lower" : "Raise", " Hand")
        ) : null,
        /* @__PURE__ */ import_react93.default.createElement(NoiseCancellation, { setOpenOptionsSheet, actionTile: true }),
        isTranscriptionAllowed ? /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            onClick: () => {
              setOpenOptionsSheet(false);
              updateState(MODALS2.CAPTION, true);
            }
          },
          isTranscriptionEnabled && isCaptionEnabled ? /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.ClosedCaptionIcon, null) : /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.OpenCaptionIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "Closed Caption")
        ) : null,
        isLocalVideoEnabled && !!elements?.virtual_background ? /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            onClick: () => {
              toggleVB();
              setOpenOptionsSheet(false);
            }
          },
          /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.VirtualBackgroundIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "Virtual Background")
        ) : null,
        elements?.emoji_reactions && !(isLandscapeHLSStream || isMobileHLSStream) && /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            onClick: () => {
              setShowEmojiCard(true);
              setOpenOptionsSheet(false);
            }
          },
          /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.EmojiIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "Emoji Reactions")
        ),
        showPolls && /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            onClick: () => {
              togglePollView();
              setOpenOptionsSheet(false);
              setUnreadPollQuiz(false);
            }
          },
          unreadPollQuiz ? /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.QuizActiveIcon, null) : /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.QuizIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "Polls and Quizzes")
        ),
        elements?.brb && /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            active: isBRBOn,
            onClick: () => {
              toggleBRB();
              setOpenOptionsSheet(false);
            }
          },
          /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.BrbIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "Be Right Back")
        ),
        /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            onClick: () => {
              setOpenSettingsSheet(true);
              setOpenOptionsSheet(false);
            }
          },
          /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.SettingsIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "Settings")
        ),
        isConnected && permissions?.browserRecording ? /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            disabled: isHLSRunning,
            onClick: async () => {
              if (isRecordingLoading) {
                return;
              }
              if (isBrowserRecordingOn || isStreamingOn) {
                setOpenOptionsSheet(false);
                setShowRecordingOn(true);
              } else {
                await startRecording();
                setOpenOptionsSheet(false);
              }
              if (isHLSRunning) {
                setOpenOptionsSheet(false);
              }
            }
          },
          isRecordingLoading ? /* @__PURE__ */ import_react93.default.createElement(Loading, null) : /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.RecordIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, (0, import_ts_pattern6.match)({ isBrowserRecordingOn, isRecordingLoading }).with({ isBrowserRecordingOn: true, isRecordingLoading: false }, () => "Recording On").with({ isRecordingLoading: true }, () => "Starting Recording").with({ isRecordingLoading: false }, () => "Start Recording").otherwise(() => null))
        ) : null,
        title || description ? /* @__PURE__ */ import_react93.default.createElement(
          ActionTile.Root,
          {
            onClick: () => {
              setOpenOptionsSheet(false);
              toggleDetailsSheet();
            }
          },
          /* @__PURE__ */ import_react93.default.createElement(import_react_icons36.InfoIcon, null),
          /* @__PURE__ */ import_react93.default.createElement(ActionTile.Title, null, "About Session")
        ) : null
      ))), /* @__PURE__ */ import_react93.default.createElement(SettingsModal_default, { open: openSettingsSheet, onOpenChange: setOpenSettingsSheet, screenType }), openModals.has(MODALS2.MUTE_ALL) && /* @__PURE__ */ import_react93.default.createElement(MuteAllModal, { onOpenChange: (value) => updateState(MODALS2.MUTE_ALL, value), isMobile: true }), openModals.has(MODALS2.CHANGE_NAME) && /* @__PURE__ */ import_react93.default.createElement(
        ChangeNameModal,
        {
          onOpenChange: (value) => updateState(MODALS2.CHANGE_NAME, value),
          openParentSheet: () => setOpenOptionsSheet(true)
        }
      ), openModals.has(MODALS2.CAPTION) && /* @__PURE__ */ import_react93.default.createElement(CaptionModal, { onOpenChange: (value) => updateState(MODALS2.CAPTION, value) }), showEmojiCard && /* @__PURE__ */ import_react93.default.createElement(
        Box,
        {
          ref: emojiCardRef,
          css: {
            maxWidth: "100%",
            w: "100%",
            position: "absolute",
            left: 0,
            right: 0,
            bottom: "$18",
            bg: "$surface_default",
            zIndex: "10",
            p: "$8",
            pb: 0,
            r: "$1",
            mx: "$4"
          }
        },
        /* @__PURE__ */ import_react93.default.createElement(EmojiReaction, { showCard: true })
      ), showRecordingOn && /* @__PURE__ */ import_react93.default.createElement(
        StopRecordingInSheet,
        {
          onClose: () => setShowRecordingOn(false),
          onStopRecording: async () => {
            try {
              await hmsActions.stopRTMPAndRecording();
              setShowRecordingOn(false);
            } catch (error) {
              ToastManager.addToast({
                // @ts-ignore
                title: error.message,
                variant: "error"
              });
            }
          }
        }
      ));
    };
  }
});

// src/Prebuilt/components/MoreSettings/MoreSettings.tsx
var import_react94, import_react_use18, MoreSettings;
var init_MoreSettings = __esm({
  "src/Prebuilt/components/MoreSettings/MoreSettings.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react94 = __toESM(require("react"));
    import_react_use18 = require("react-use");
    init_DesktopOptions();
    init_MwebOptions();
    init_src();
    init_hooks();
    MoreSettings = ({
      elements,
      screenType
    }) => {
      const isMobile = (0, import_react_use18.useMedia)(config.media.md);
      const isLandscapeHLSStream = useLandscapeHLSStream();
      return isMobile || isLandscapeHLSStream ? /* @__PURE__ */ import_react94.default.createElement(MwebOptions, { elements, screenType }) : /* @__PURE__ */ import_react94.default.createElement(DesktopOptions, { elements, screenType });
    };
  }
});

// src/Prebuilt/components/RaiseHand.tsx
var import_react95, import_react_icons37, RaiseHand;
var init_RaiseHand = __esm({
  "src/Prebuilt/components/RaiseHand.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react95 = __toESM(require("react"));
    import_react_icons37 = require("@100mslive/react-icons");
    init_Tooltip2();
    init_IconButton3();
    init_useRoomLayoutScreen();
    init_useMetadata();
    RaiseHand = ({ css: css2 }) => {
      const { isHandRaised, toggleHandRaise } = useMyMetadata();
      const { elements } = useRoomLayoutConferencingScreen();
      if (!elements.hand_raise) {
        return null;
      }
      return /* @__PURE__ */ import_react95.default.createElement(Tooltip, { title: isHandRaised ? "Lower hand" : "Raise hand" }, /* @__PURE__ */ import_react95.default.createElement(
        IconButton_default,
        {
          "data-testid": "hand_raise_btn",
          css: css2,
          active: !isHandRaised,
          onClick: async () => await toggleHandRaise()
        },
        isHandRaised ? /* @__PURE__ */ import_react95.default.createElement(import_react_icons37.HandRaiseSlashedIcon, null) : /* @__PURE__ */ import_react95.default.createElement(import_react_icons37.HandIcon, null)
      ));
    };
  }
});

// src/Prebuilt/images/pdf-share.png
var pdf_share_default;
var init_pdf_share = __esm({
  "src/Prebuilt/images/pdf-share.png"() {
    pdf_share_default = "./pdf-share-CAOMIRBX.png";
  }
});

// src/Prebuilt/images/screen-share.png
var screen_share_default;
var init_screen_share = __esm({
  "src/Prebuilt/images/screen-share.png"() {
    screen_share_default = "./screen-share-BMXYNILR.png";
  }
});

// src/Prebuilt/components/ShareMenuIcon.jsx
var ScreenShareButton, ShareMenuIcon;
var init_ShareMenuIcon = __esm({
  "src/Prebuilt/components/ShareMenuIcon.jsx"() {
    "use strict";
    init_cjs_shims();
    init_Theme();
    init_IconButton3();
    ScreenShareButton = styled(IconButton_default, {
      h: "$14",
      px: "$8",
      r: "$1",
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0,
      "@md": {
        px: "$4",
        mx: 0
      }
    });
    ShareMenuIcon = styled(ScreenShareButton, {
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0,
      borderTopRightRadius: "$1",
      borderBottomRightRadius: "$1",
      borderLeftWidth: 0,
      w: "$4",
      "@md": {
        w: "unset",
        px: "$2"
      }
    });
  }
});

// src/Prebuilt/components/pdfAnnotator/pdfHeader.jsx
var import_react96, PDFHeader;
var init_pdfHeader = __esm({
  "src/Prebuilt/components/pdfAnnotator/pdfHeader.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react96 = __toESM(require("react"));
    init_src();
    init_DialogContent2();
    PDFHeader = () => {
      return /* @__PURE__ */ import_react96.default.createElement(
        DialogCol,
        {
          align: "start",
          css: {
            mt: 0,
            mb: "$6"
          }
        },
        /* @__PURE__ */ import_react96.default.createElement(Dialog.Title, { asChild: true }, /* @__PURE__ */ import_react96.default.createElement(Text, { as: "h6", variant: "h6" }, "Share PDF")),
        /* @__PURE__ */ import_react96.default.createElement(Dialog.Description, { asChild: true }, /* @__PURE__ */ import_react96.default.createElement(
          Text,
          {
            variant: "sm",
            css: {
              c: "$on_surface_medium"
            }
          },
          "Choose PDF you want to annotate and share"
        ))
      );
    };
  }
});

// src/Prebuilt/components/pdfAnnotator/submitPdf.jsx
var import_react97, SubmitPDF;
var init_submitPdf = __esm({
  "src/Prebuilt/components/pdfAnnotator/submitPdf.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react97 = __toESM(require("react"));
    init_src();
    init_useUISettings();
    init_constants();
    SubmitPDF = ({ pdfFile, onOpenChange }) => {
      const [, setPDFConfig] = useSetAppDataByKey(APP_DATA.pdfConfig);
      return /* @__PURE__ */ import_react97.default.createElement(
        Flex,
        {
          direction: "row",
          css: {
            mb: "0",
            mt: "auto",
            gap: "$8"
          }
        },
        /* @__PURE__ */ import_react97.default.createElement(
          Button,
          {
            variant: "standard",
            outlined: true,
            type: "submit",
            onClick: () => {
              onOpenChange(false);
            },
            css: { w: "50%" }
          },
          "Cancel"
        ),
        /* @__PURE__ */ import_react97.default.createElement(
          Button,
          {
            variant: "primary",
            type: "submit",
            onClick: () => {
              if (pdfFile) {
                setPDFConfig(pdfFile);
                onOpenChange(false);
              }
            },
            disabled: !pdfFile,
            "data-testid": "share_pdf_btn",
            css: {
              w: "50%"
            }
          },
          "Start Sharing"
        )
      );
    };
  }
});

// src/Prebuilt/components/pdfAnnotator/pdfInfo.jsx
var import_react98, import_react_icons38, PDFInfo;
var init_pdfInfo = __esm({
  "src/Prebuilt/components/pdfAnnotator/pdfInfo.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react98 = __toESM(require("react"));
    import_react_icons38 = require("@100mslive/react-icons");
    init_src();
    init_DialogContent2();
    PDFInfo = () => {
      return /* @__PURE__ */ import_react98.default.createElement(
        DialogRow,
        {
          css: {
            px: "$8",
            py: "$3",
            bg: "$surface_default",
            r: "$1",
            outline: "none",
            border: "1px solid $border_bright",
            minHeight: "$11"
          }
        },
        /* @__PURE__ */ import_react98.default.createElement(
          import_react_icons38.InfoIcon,
          {
            width: "64px",
            height: "64px",
            style: {
              paddingRight: "16px"
            }
          }
        ),
        /* @__PURE__ */ import_react98.default.createElement(Text, { variant: "caption" }, "On the next screen, ensure you select \u201CThis Tab\u201D and click on share. Only the PDF viewer will be seen by other participants")
      );
    };
  }
});

// src/Prebuilt/components/pdfAnnotator/uploadedFile.jsx
var import_react99, import_react_icons39, UploadedFile;
var init_uploadedFile = __esm({
  "src/Prebuilt/components/pdfAnnotator/uploadedFile.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react99 = __toESM(require("react"));
    import_react_icons39 = require("@100mslive/react-icons");
    init_src();
    init_DialogContent2();
    init_pdfHeader();
    init_pdfInfo();
    init_submitPdf();
    UploadedFile = ({ pdfFile, setPDFFile, onOpenChange }) => {
      const [fileName, ext] = pdfFile.name.split(".");
      return /* @__PURE__ */ import_react99.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react99.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react99.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react99.default.createElement(
        Dialog.Content,
        {
          css: {
            w: "min(420px,80%)",
            overflow: "auto",
            p: "$10",
            bg: "$surface_dim"
          }
        },
        /* @__PURE__ */ import_react99.default.createElement(Flex, { direction: "column" }, /* @__PURE__ */ import_react99.default.createElement(PDFHeader, null), /* @__PURE__ */ import_react99.default.createElement(
          DialogRow,
          {
            css: {
              fontFamily: "$sans",
              bg: "$surface_bright",
              r: "$1",
              outline: "none",
              border: "1px solid $border_bright",
              p: "$4 $6",
              minHeight: "$11",
              c: "$on_primary_high",
              fs: "$md",
              w: "100%",
              "&:focus": {
                boxShadow: "0 0 0 1px $colors$primary_default",
                border: "1px solid transparent"
              },
              mb: 0,
              mt: "$6"
            }
          },
          /* @__PURE__ */ import_react99.default.createElement(Flex, { direction: "row", css: { flexGrow: "1", maxWidth: "88%" } }, /* @__PURE__ */ import_react99.default.createElement(
            Text,
            {
              css: {
                textOverflow: "ellipsis",
                overflow: "hidden",
                whiteSpace: "nowrap"
              }
            },
            fileName
          ), /* @__PURE__ */ import_react99.default.createElement(Text, { css: { whiteSpace: "nowrap" } }, ".", ext)),
          /* @__PURE__ */ import_react99.default.createElement(
            import_react_icons39.TrashIcon,
            {
              onClick: () => setPDFFile(null),
              style: {
                cursor: "pointer"
              }
            }
          )
        ), /* @__PURE__ */ import_react99.default.createElement(PDFInfo, null), /* @__PURE__ */ import_react99.default.createElement(SubmitPDF, { pdfFile, onOpenChange }))
      )));
    };
  }
});

// src/Prebuilt/components/pdfAnnotator/pdfFileOptions.jsx
function PDFFileOptions({ onOpenChange }) {
  const [pdfFile, setPDFFile] = (0, import_react100.useState)(null);
  return !pdfFile ? /* @__PURE__ */ import_react100.default.createElement(Dialog.Root, { defaultOpen: true, onOpenChange }, /* @__PURE__ */ import_react100.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react100.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react100.default.createElement(
    Dialog.Content,
    {
      css: {
        w: "min(420px,80%)",
        overflow: "auto",
        p: "$10",
        bg: "$surface_dim"
      }
    },
    /* @__PURE__ */ import_react100.default.createElement(Flex, { direction: "column" }, /* @__PURE__ */ import_react100.default.createElement(PDFHeader, null), /* @__PURE__ */ import_react100.default.createElement(
      DialogInputFile,
      {
        onChange: (target) => {
          setPDFFile(target.files[0]);
        },
        placeholder: "Click to upload",
        type: "file",
        accept: ".pdf"
      }
    ), /* @__PURE__ */ import_react100.default.createElement(SubmitPDF, { pdfFile, onOpenChange }))
  ))) : /* @__PURE__ */ import_react100.default.createElement(UploadedFile, { pdfFile, setPDFFile, onOpenChange });
}
var import_react100;
var init_pdfFileOptions = __esm({
  "src/Prebuilt/components/pdfAnnotator/pdfFileOptions.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react100 = __toESM(require("react"));
    init_src();
    init_DialogContent2();
    init_pdfHeader();
    init_submitPdf();
    init_uploadedFile();
  }
});

// src/Prebuilt/components/pdfAnnotator/shareScreenOptions.jsx
function ShareScreenOptions() {
  const [openModals, setOpenModals] = (0, import_react101.useState)(/* @__PURE__ */ new Set());
  const { amIScreenSharing } = (0, import_react_sdk46.useScreenShare)();
  const updateState = (modalName, value) => {
    setOpenModals((modals) => {
      const copy = new Set(modals);
      if (value) {
        copy.add(modalName);
      } else {
        copy.delete(modalName);
      }
      return copy;
    });
  };
  const { toggleScreenShare } = (0, import_react_sdk46.useScreenShare)();
  return /* @__PURE__ */ import_react101.default.createElement(import_react101.Fragment, null, /* @__PURE__ */ import_react101.default.createElement(
    Dropdown.Root,
    {
      open: openModals.has(MODALS3.SHARE),
      onOpenChange: (value) => updateState(MODALS3.SHARE, value),
      modal: false
    },
    /* @__PURE__ */ import_react101.default.createElement(Dropdown.Trigger, { asChild: true, "data-testid": "sharing_btn", disabled: amIScreenSharing }, /* @__PURE__ */ import_react101.default.createElement(ShareMenuIcon, { disabled: amIScreenSharing }, /* @__PURE__ */ import_react101.default.createElement(Tooltip, { title: "Share" }, /* @__PURE__ */ import_react101.default.createElement(Box, null, /* @__PURE__ */ import_react101.default.createElement(import_react_icons40.VerticalMenuIcon, null))))),
    /* @__PURE__ */ import_react101.default.createElement(
      Dropdown.Content,
      {
        sideOffset: 5,
        css: {
          w: "$96",
          maxHeight: "$96",
          p: 0,
          bg: "$surface_dim"
        }
      },
      /* @__PURE__ */ import_react101.default.createElement(
        Dropdown.Item,
        {
          css: {
            flexDirection: "column",
            alignItems: "flex-start",
            px: "$10",
            pt: "$10",
            pb: "$6",
            "&:hover": {
              bg: "transparent",
              cursor: "default"
            }
          }
        },
        /* @__PURE__ */ import_react101.default.createElement(Text, { variant: "h6" }, "Start Sharing"),
        /* @__PURE__ */ import_react101.default.createElement(Text, { variant: "sm" }, "Choose what you want to share")
      ),
      /* @__PURE__ */ import_react101.default.createElement(
        Dropdown.Item,
        {
          css: {
            flexDirection: "row",
            alignItems: "flex-start",
            gap: "$8",
            px: "$10",
            pt: "$6",
            pb: "$10",
            "&:hover": {
              bg: "transparent",
              cursor: "default"
            }
          }
        },
        /* @__PURE__ */ import_react101.default.createElement(
          Flex,
          {
            direction: "column",
            align: "center",
            css: {
              gap: "$6"
            }
          },
          /* @__PURE__ */ import_react101.default.createElement(
            IconButton,
            {
              as: "div",
              onClick: toggleScreenShare,
              css: {
                p: "$6",
                display: "flex",
                justifyContent: "center",
                border: "1px solid $border_bright",
                r: "$2",
                bg: "$surface_brighter",
                pb: "0"
              }
            },
            /* @__PURE__ */ import_react101.default.createElement(
              "img",
              {
                src: screen_share_default,
                alt: "screen-share",
                width: "100%",
                height: "100%",
                style: {
                  borderTopLeftRadius: "0.5rem",
                  // TODO: create image component to solve for style hardcoding
                  borderTopRightRadius: "0.5rem"
                }
              }
            )
          ),
          /* @__PURE__ */ import_react101.default.createElement(Flex, { direction: "column", align: "center" }, /* @__PURE__ */ import_react101.default.createElement(Text, { variant: "body2" }, "Share Screen"), /* @__PURE__ */ import_react101.default.createElement(
            Text,
            {
              variant: "caption",
              css: {
                c: "$on_surface_low",
                textAlign: "center"
              }
            },
            "Share your tab, window or your entire screen"
          ))
        ),
        /* @__PURE__ */ import_react101.default.createElement(
          Flex,
          {
            direction: "column",
            align: "center",
            css: {
              gap: "$6"
            }
          },
          /* @__PURE__ */ import_react101.default.createElement(
            IconButton,
            {
              onClick: () => {
                updateState(MODALS3.PDF_SHARE, true);
              },
              disabled: amIScreenSharing,
              css: {
                p: "$6",
                display: "flex",
                justifyContent: "center",
                border: "$border_bright 1px solid",
                r: "$2",
                bg: "$surface_bright",
                pb: "0"
              }
            },
            /* @__PURE__ */ import_react101.default.createElement(
              "img",
              {
                src: pdf_share_default,
                alt: "pdf-share",
                width: "100%",
                height: "100%",
                style: {
                  borderTopLeftRadius: "0.5rem",
                  // TODO: create image component to solve for style hardcoding
                  borderTopRightRadius: "0.5rem"
                }
              }
            ),
            /* @__PURE__ */ import_react101.default.createElement(
              Flex,
              {
                direction: "row",
                align: "center",
                css: {
                  position: "absolute",
                  top: "35%",
                  left: "54%",
                  padding: "$2 $4",
                  r: "$2",
                  bg: "$primary_bright",
                  zIndex: "2",
                  gap: "$2"
                }
              },
              /* @__PURE__ */ import_react101.default.createElement(import_react_icons40.StarIcon, { height: 14, width: 14 }),
              /* @__PURE__ */ import_react101.default.createElement(
                Text,
                {
                  variant: "xs",
                  css: {
                    fontWeight: "$semiBold",
                    c: "$on_primary_high",
                    pr: "$4"
                  }
                },
                "New"
              )
            )
          ),
          /* @__PURE__ */ import_react101.default.createElement(Flex, { direction: "column", align: "center" }, /* @__PURE__ */ import_react101.default.createElement(Text, { variant: "body2" }, "Share PDF"), /* @__PURE__ */ import_react101.default.createElement(
            Text,
            {
              variant: "caption",
              css: {
                c: "$on_surface_low",
                textAlign: "center"
              }
            },
            "Annotate, draw shapes, and more over PDFs"
          ))
        )
      )
    )
  ), openModals.has(MODALS3.PDF_SHARE) && /* @__PURE__ */ import_react101.default.createElement(PDFFileOptions, { onOpenChange: (value) => updateState(MODALS3.PDF_SHARE, value) }));
}
var import_react101, import_react_sdk46, import_react_icons40, MODALS3;
var init_shareScreenOptions = __esm({
  "src/Prebuilt/components/pdfAnnotator/shareScreenOptions.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react101 = __toESM(require("react"));
    import_react_sdk46 = require("@100mslive/react-sdk");
    import_react_icons40 = require("@100mslive/react-icons");
    init_pdf_share();
    init_screen_share();
    init_src();
    init_ShareMenuIcon();
    init_pdfFileOptions();
    MODALS3 = {
      SHARE: "share",
      SCREEN_SHARE: "screenShare",
      PDF_SHARE: "pdfShare"
    };
  }
});

// src/Prebuilt/components/ScreenShareToggle.jsx
var import_react102, import_react_sdk47, import_react_icons41, ScreenshareToggle;
var init_ScreenShareToggle = __esm({
  "src/Prebuilt/components/ScreenShareToggle.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react102 = __toESM(require("react"));
    import_react_sdk47 = require("@100mslive/react-sdk");
    import_react_icons41 = require("@100mslive/react-icons");
    init_shareScreenOptions();
    init_ToastManager();
    init_Layout();
    init_Tooltip2();
    init_ShareMenuIcon();
    init_useUISettings();
    init_utils2();
    init_constants();
    ScreenshareToggle = ({ css: css2 = {} }) => {
      const isAllowedToPublish = (0, import_react_sdk47.useHMSStore)(import_react_sdk47.selectIsAllowedToPublish);
      const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);
      const {
        amIScreenSharing,
        screenShareVideoTrackId: video,
        toggleScreenShare
      } = (0, import_react_sdk47.useScreenShare)((error) => {
        ToastManager.addToast({
          title: error.message,
          variant: "error",
          duration: 2e3
        });
      });
      const { requestPermission } = (0, import_react_sdk47.useAwayNotifications)();
      const isVideoScreenshare = amIScreenSharing && !!video;
      if (!isAllowedToPublish.screen || !isScreenshareSupported()) {
        return null;
      }
      return /* @__PURE__ */ import_react102.default.createElement(import_react102.Fragment, null, /* @__PURE__ */ import_react102.default.createElement(Flex, { direction: "row" }, /* @__PURE__ */ import_react102.default.createElement(
        ScreenShareButton,
        {
          variant: "standard",
          key: "ShareScreen",
          active: !isVideoScreenshare,
          css: css2,
          disabled: isAudioOnly,
          onClick: async () => {
            await toggleScreenShare();
            await requestPermission();
          }
        },
        /* @__PURE__ */ import_react102.default.createElement(Tooltip, { title: `${!isVideoScreenshare ? "Start" : "Stop"} screen sharing` }, /* @__PURE__ */ import_react102.default.createElement(Box, null, /* @__PURE__ */ import_react102.default.createElement(import_react_icons41.ShareScreenIcon, null)))
      ), /* @__PURE__ */ import_react102.default.createElement(ShareScreenOptions, null)));
    };
  }
});

// src/Prebuilt/components/VirtualBackground/VBToggle.tsx
var import_react103, import_hmsvbplugin2, import_react_sdk48, import_react_icons42, VBToggle;
var init_VBToggle = __esm({
  "src/Prebuilt/components/VirtualBackground/VBToggle.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react103 = __toESM(require("react"));
    import_hmsvbplugin2 = require("@100mslive/hms-virtual-background/hmsvbplugin");
    import_react_sdk48 = require("@100mslive/react-sdk");
    import_react_icons42 = require("@100mslive/react-icons");
    init_Loading2();
    init_Tooltip2();
    init_IconButton3();
    init_VBHandler();
    init_useSidepane();
    init_constants();
    VBToggle = () => {
      const toggleVB = useSidepaneToggle(SIDE_PANE_OPTIONS.VB);
      const isVBOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.VB);
      const isVideoOn = (0, import_react_sdk48.useHMSStore)(import_react_sdk48.selectIsLocalVideoEnabled);
      const isVBEnabled = (0, import_react_sdk48.useHMSStore)(import_react_sdk48.selectIsVBEnabled);
      const isEffectsEnabled = (0, import_react_sdk48.useHMSStore)(import_react_sdk48.selectIsEffectsEnabled);
      const loadingEffects = (0, import_react_sdk48.useHMSStore)((0, import_react_sdk48.selectAppData)(APP_DATA.loadingEffects));
      const hmsActions = (0, import_react_sdk48.useHMSActions)();
      const { toggleVideo } = (0, import_react_sdk48.useAVToggle)();
      (0, import_react103.useEffect)(() => {
        if (!toggleVideo) {
          VBHandler?.reset();
          hmsActions.setAppData(APP_DATA.background, import_hmsvbplugin2.HMSVirtualBackgroundTypes.NONE);
        }
      }, [hmsActions, toggleVideo]);
      if (!isVideoOn || !isEffectsEnabled && isSafari || !isVBEnabled) {
        return null;
      }
      return /* @__PURE__ */ import_react103.default.createElement(Tooltip, { side: "top", disabled: isVBOpen, title: "Configure Virtual Background" }, /* @__PURE__ */ import_react103.default.createElement(IconButton_default, { active: !isVBOpen, onClick: toggleVB, "data-testid": "virtual_bg_btn" }, loadingEffects ? /* @__PURE__ */ import_react103.default.createElement(Loading, { size: 18 }) : /* @__PURE__ */ import_react103.default.createElement(import_react_icons42.VirtualBackgroundIcon, null)));
    };
  }
});

// src/Prebuilt/components/Footer/ChatToggle.tsx
var import_react104, import_react_sdk49, import_react_icons43, ChatToggle;
var init_ChatToggle = __esm({
  "src/Prebuilt/components/Footer/ChatToggle.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react104 = __toESM(require("react"));
    import_react_sdk49 = require("@100mslive/react-sdk");
    import_react_icons43 = require("@100mslive/react-icons");
    init_src();
    init_IconButton3();
    init_useSidepane();
    init_constants();
    ChatToggle = ({ onClick }) => {
      const countUnreadMessages = (0, import_react_sdk49.useHMSStore)(import_react_sdk49.selectUnreadHMSMessagesCount);
      const isChatOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.CHAT);
      const toggleChat = useSidepaneToggle(SIDE_PANE_OPTIONS.CHAT);
      return /* @__PURE__ */ import_react104.default.createElement(
        Box,
        {
          css: {
            position: "relative"
          }
        },
        /* @__PURE__ */ import_react104.default.createElement(Tooltip, { key: "chat", title: `${isChatOpen ? "Close" : "Open"} chat` }, /* @__PURE__ */ import_react104.default.createElement(
          IconButton_default,
          {
            onClick: () => onClick ? onClick() : toggleChat(),
            css: { bg: isChatOpen ? "$surface_brighter" : "" },
            "data-testid": "chat_btn"
          },
          /* @__PURE__ */ import_react104.default.createElement(import_react_icons43.ChatIcon, null)
        )),
        countUnreadMessages > 0 && /* @__PURE__ */ import_react104.default.createElement(
          Flex,
          {
            css: {
              height: "$8",
              p: "$4 4.5px",
              justifyContent: "center",
              alignItems: "center",
              position: "absolute",
              top: "-$4",
              right: "-$4",
              borderRadius: "$space$14",
              background: "$primary_default"
            }
          },
          /* @__PURE__ */ import_react104.default.createElement(Text, { variant: "overline" }, countUnreadMessages > 99 ? "99+" : countUnreadMessages)
        )
      );
    };
  }
});

// src/Prebuilt/components/Connection/connectionQualityUtils.js
var connectionTooltip, getTooltipText, getColor;
var init_connectionQualityUtils = __esm({
  "src/Prebuilt/components/Connection/connectionQualityUtils.js"() {
    "use strict";
    init_cjs_shims();
    connectionTooltip = {
      0: "Reconnecting",
      1: "Very Bad Connection",
      2: "Bad Connection",
      3: "Moderate Connection",
      4: "Good Connection",
      5: "Excellent Connection"
    };
    connectionTooltip[-1] = "Network Unknown";
    getTooltipText = (connectionScore) => {
      return connectionTooltip[connectionScore];
    };
    getColor = (position, connectionScore, defaultColor, theme2) => {
      const shouldBeColored = position <= connectionScore;
      if (!shouldBeColored) {
        return defaultColor;
      }
      if (connectionScore >= 4) {
        return theme2.colors.alert_success;
      } else if (connectionScore >= 1) {
        return theme2.colors.alert_warning;
      }
      return defaultColor;
    };
  }
});

// src/Prebuilt/components/Connection/ConnectionIndicator.tsx
var import_react105, import_react_sdk50, import_react_icons44, Wrapper, ConnectionIndicator;
var init_ConnectionIndicator = __esm({
  "src/Prebuilt/components/Connection/ConnectionIndicator.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react105 = __toESM(require("react"));
    import_react_sdk50 = require("@100mslive/react-sdk");
    import_react_icons44 = require("@100mslive/react-icons");
    init_src();
    init_connectionQualityUtils();
    Wrapper = styled("span", {
      width: "28px",
      height: "28px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: "$round",
      variants: {
        isTile: {
          true: {
            width: "unset",
            height: "unset"
          }
        }
      }
    });
    ConnectionIndicator = ({
      peerId,
      isTile = false,
      hideBg = false
    }) => {
      const downlinkQuality = (0, import_react_sdk50.useHMSStore)((0, import_react_sdk50.selectConnectionQualityByPeerID)(peerId))?.downlinkQuality;
      const peerType = (0, import_react_sdk50.useHMSStore)((0, import_react_sdk50.selectPeerTypeByID)(peerId));
      const { theme: theme2 } = useTheme();
      const defaultColor = theme2.colors.on_surface_low;
      if (downlinkQuality === -1 || downlinkQuality === void 0 || peerType === import_react_sdk50.HMSPeerType.SIP) {
        return null;
      }
      if (downlinkQuality === 0) {
        return /* @__PURE__ */ import_react105.default.createElement(Tooltip, { side: "left", title: getTooltipText(downlinkQuality) }, /* @__PURE__ */ import_react105.default.createElement(Wrapper, { isTile, css: { color: "#ED4C5A" }, "data-testid": "tile_network" }, /* @__PURE__ */ import_react105.default.createElement(import_react_icons44.PoorConnectivityIcon, null)));
      }
      const size = isTile ? 12 : 16;
      return /* @__PURE__ */ import_react105.default.createElement(Tooltip, { side: "left", title: getTooltipText(downlinkQuality) }, /* @__PURE__ */ import_react105.default.createElement(Wrapper, { isTile, "data-testid": "tile_network", css: { backgroundColor: hideBg ? "" : "$surface_bright" } }, /* @__PURE__ */ import_react105.default.createElement(
        "svg",
        {
          width: size,
          height: size,
          viewBox: "0 0 14 12",
          xmlns: "http://www.w3.org/2000/svg",
          xmlSpace: "preserve",
          style: {
            fillRule: "evenodd",
            clipRule: "evenodd",
            strokeLinejoin: "round",
            strokeMiterlimit: 2
          }
        },
        /* @__PURE__ */ import_react105.default.createElement(
          "path",
          {
            d: "M6.875 0c2.549.035 4.679.902 6.445 2.648.366.362.45.796.216 1.096-.239.306-.714.34-1.142.072a2.28 2.28 0 0 1-.341-.271C9.24.862 4.924.775 1.992 3.346c-.284.249-.594.419-.983.393-.272-.019-.49-.135-.613-.388-.125-.261-.05-.498.114-.713.073-.092.156-.177.245-.254C2.516.804 4.591.039 6.875 0Z",
            fill: getColor(4, downlinkQuality, defaultColor, theme2),
            transform: "translate(-.333)"
          }
        ),
        /* @__PURE__ */ import_react105.default.createElement(
          "path",
          {
            d: "M7.056 2.964c1.756.035 3.208.7 4.499 1.763.162.134.277.315.354.512.098.251.114.503-.075.72-.193.222-.452.259-.725.198-.293-.066-.518-.247-.738-.443a4.859 4.859 0 0 0-6.198-.26c-.166.127-.318.271-.475.409-.242.211-.513.343-.843.317-.43-.034-.679-.397-.561-.81.062-.211.181-.4.345-.546 1.265-1.162 2.733-1.836 4.417-1.86Z",
            fill: getColor(3, downlinkQuality, defaultColor, theme2),
            transform: "translate(-.333)"
          }
        ),
        /* @__PURE__ */ import_react105.default.createElement(
          "path",
          {
            d: "M7.384,6.052C8.293,6.068 9.157,6.449 9.783,7.108C10.005,7.339 10.157,7.6 10.07,7.942C9.959,8.377 9.435,8.581 9.071,8.243C7.935,7.191 6.356,7.183 5.152,8.183C4.816,8.462 4.6,8.485 4.332,8.27C4.063,8.055 3.998,7.691 4.177,7.358C4.273,7.179 4.414,7.038 4.57,6.911C5.26,6.349 6.149,6.05 7.384,6.052L7.384,6.052Z",
            fill: getColor(2, downlinkQuality, defaultColor, theme2)
          }
        ),
        /* @__PURE__ */ import_react105.default.createElement(
          "path",
          {
            d: "M8.214,9.941C8.214,10.234 8.097,10.515 7.888,10.721C7.68,10.928 7.398,11.042 7.104,11.039C6.471,11.036 5.982,10.541 5.993,9.912C6.004,9.259 6.499,8.766 7.133,8.779C7.744,8.791 8.22,9.301 8.214,9.941Z",
            fill: getColor(1, downlinkQuality, defaultColor, theme2)
          }
        )
      )));
    };
  }
});

// src/Prebuilt/components/RemoveParticipant.tsx
var import_react106, import_react_sdk51, import_react_icons45, RemoveParticipant;
var init_RemoveParticipant = __esm({
  "src/Prebuilt/components/RemoveParticipant.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react106 = __toESM(require("react"));
    import_react_sdk51 = require("@100mslive/react-sdk");
    import_react_icons45 = require("@100mslive/react-icons");
    init_ToastManager();
    init_Dropdown2();
    init_Text2();
    RemoveParticipant = ({ peerId }) => {
      const canRemoveOthers = (0, import_react_sdk51.useHMSStore)(import_react_sdk51.selectPermissions)?.removeOthers;
      const localPeerId = (0, import_react_sdk51.useHMSStore)(import_react_sdk51.selectLocalPeerID);
      const actions = (0, import_react_sdk51.useHMSActions)();
      if (peerId === localPeerId || !canRemoveOthers) {
        return null;
      }
      return /* @__PURE__ */ import_react106.default.createElement(
        Dropdown.Item,
        {
          css: { color: "$alert_error_default", bg: "$surface_default" },
          onClick: async () => {
            try {
              await actions.removePeer(peerId, "");
            } catch (error) {
              const ex = error;
              ToastManager.addToast({ title: ex.message, variant: "error" });
            }
          }
        },
        /* @__PURE__ */ import_react106.default.createElement(import_react_icons45.PeopleRemoveIcon, null),
        /* @__PURE__ */ import_react106.default.createElement(Text, { variant: "sm", css: { ml: "$4", color: "inherit", fontWeight: "$semiBold" } }, "Remove Participant")
      );
    };
  }
});

// src/Prebuilt/components/Footer/RoleOptions.tsx
var import_react107, import_ts_pattern7, import_react_sdk52, import_react_icons46, dropdownItemCSS, optionTextCSS, DropdownWrapper, RoleOptions;
var init_RoleOptions = __esm({
  "src/Prebuilt/components/Footer/RoleOptions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react107 = __toESM(require("react"));
    import_ts_pattern7 = require("ts-pattern");
    import_react_sdk52 = require("@100mslive/react-sdk");
    import_react_icons46 = require("@100mslive/react-icons");
    init_Dropdown2();
    init_Layout();
    init_Text2();
    init_useRoomLayoutScreen();
    init_utils2();
    dropdownItemCSS = { backgroundColor: "$surface_default", gap: "$4", p: "$8" };
    optionTextCSS = {
      fontWeight: "$semiBold",
      color: "$on_surface_high",
      textTransform: "none",
      whiteSpace: "nowrap"
    };
    DropdownWrapper = ({ children }) => {
      const [openOptions, setOpenOptions] = (0, import_react107.useState)(false);
      if (import_react107.default.Children.toArray(children).length === 0) {
        return null;
      }
      return /* @__PURE__ */ import_react107.default.createElement(Dropdown.Root, { open: openOptions, onOpenChange: setOpenOptions }, /* @__PURE__ */ import_react107.default.createElement(
        Dropdown.Trigger,
        {
          "data-testid": "role_group_options",
          onClick: (e) => e.stopPropagation(),
          className: "role_actions",
          asChild: true,
          css: {
            p: "$1",
            r: "$0",
            c: "$on_surface_high",
            visibility: openOptions ? "visible" : "hidden",
            "&:hover": {
              c: "$on_surface_medium"
            },
            "@md": {
              visibility: "visible"
            }
          }
        },
        /* @__PURE__ */ import_react107.default.createElement(Flex, null, /* @__PURE__ */ import_react107.default.createElement(import_react_icons46.VerticalMenuIcon, null))
      ), /* @__PURE__ */ import_react107.default.createElement(
        Dropdown.Content,
        {
          onClick: (e) => e.stopPropagation(),
          css: { w: "max-content", bg: "$surface_default", py: 0 },
          align: "end"
        },
        children
      ));
    };
    RoleOptions = ({ roleName, peerList }) => {
      const permissions = (0, import_react_sdk52.useHMSStore)(import_react_sdk52.selectPermissions);
      const hmsActions = (0, import_react_sdk52.useHMSActions)();
      const { elements } = useRoomLayoutConferencingScreen();
      const { on_stage_role, off_stage_roles = [] } = elements?.on_stage_exp || {};
      const canRemoveRoleFromStage = permissions?.changeRole && roleName === on_stage_role;
      const role = (0, import_react_sdk52.useHMSStore)((0, import_react_sdk52.selectRoleByRoleName)(roleName));
      const tracks = (0, import_react_sdk52.useHMSStore)(import_react_sdk52.selectTracksMap);
      if (!role) {
        return null;
      }
      const canPublishAudio = role.publishParams.allowed.includes("audio");
      const canPublishVideo = role.publishParams.allowed.includes("video");
      let isVideoOnForSomePeers = false;
      let isAudioOnForSomePeers = false;
      peerList.forEach((peer) => {
        if (peer.isLocal) {
          return;
        }
        const isAudioOn = !!peer.audioTrack && tracks[peer.audioTrack]?.enabled;
        const isVideoOn = !!peer.videoTrack && tracks[peer.videoTrack]?.enabled;
        isAudioOnForSomePeers = isAudioOnForSomePeers || isAudioOn;
        isVideoOnForSomePeers = isVideoOnForSomePeers || isVideoOn;
      });
      const setTrackEnabled = async (type, enabled = false) => {
        try {
          await hmsActions.setRemoteTracksEnabled({ roles: [roleName], source: "regular", type, enabled });
        } catch (e) {
          console.error(e);
        }
      };
      const canRemoveRoleFromRoom = permissions?.removeOthers && (on_stage_role === roleName || off_stage_roles?.includes(roleName));
      if (peerList.length === 0 || // if only local peer is present no need to show any options
      peerList.length === 1 && peerList[0].isLocal || !role) {
        return null;
      }
      const removeAllFromStage = () => {
        peerList.forEach((peer) => {
          const prevRole = getMetadata(peer.metadata).prevRole;
          if (prevRole) {
            hmsActions.changeRoleOfPeer(peer.id, prevRole, true);
          }
        });
      };
      const removePeersFromRoom = async () => {
        try {
          peerList.forEach(async (peer) => {
            await hmsActions.removePeer(peer.id, "");
          });
        } catch (e) {
          console.error(e);
        }
      };
      return /* @__PURE__ */ import_react107.default.createElement(DropdownWrapper, null, canRemoveRoleFromStage ? /* @__PURE__ */ import_react107.default.createElement(
        Dropdown.Item,
        {
          css: { ...dropdownItemCSS, borderBottom: "1px solid $border_bright" },
          onClick: removeAllFromStage
        },
        /* @__PURE__ */ import_react107.default.createElement(import_react_icons46.PersonRectangleIcon, null),
        /* @__PURE__ */ import_react107.default.createElement(Text, { variant: "sm", css: optionTextCSS }, "Remove all from Stage")
      ) : null, (0, import_ts_pattern7.match)({ canPublishAudio, isAudioOnForSomePeers, canMute: permissions?.mute, canUnmute: permissions?.unmute }).with({ canPublishAudio: true, isAudioOnForSomePeers: true, canMute: true }, () => {
        return /* @__PURE__ */ import_react107.default.createElement(Dropdown.Item, { css: dropdownItemCSS, onClick: () => setTrackEnabled("audio", false) }, /* @__PURE__ */ import_react107.default.createElement(import_react_icons46.MicOffIcon, null), /* @__PURE__ */ import_react107.default.createElement(Text, { variant: "sm", css: optionTextCSS }, "Mute Audio for All"));
      }).with({ canPublishAudio: true, isAudioOnForSomePeers: false, canUnmute: true }, () => {
        return /* @__PURE__ */ import_react107.default.createElement(Dropdown.Item, { css: dropdownItemCSS, onClick: () => setTrackEnabled("audio", true) }, /* @__PURE__ */ import_react107.default.createElement(import_react_icons46.MicOnIcon, null), /* @__PURE__ */ import_react107.default.createElement(Text, { variant: "sm", css: optionTextCSS }, "Request to Unmute Audio for All"));
      }).otherwise(() => null), (0, import_ts_pattern7.match)({ canPublishVideo, isVideoOnForSomePeers, canMute: permissions?.mute, canUnmute: permissions?.unmute }).with({ canPublishVideo: true, isVideoOnForSomePeers: true, canMute: true }, () => {
        return /* @__PURE__ */ import_react107.default.createElement(Dropdown.Item, { css: dropdownItemCSS, onClick: () => setTrackEnabled("video", false) }, /* @__PURE__ */ import_react107.default.createElement(import_react_icons46.VideoOffIcon, null), /* @__PURE__ */ import_react107.default.createElement(Text, { variant: "sm", css: optionTextCSS }, "Mute Video for All"));
      }).with({ canPublishVideo: true, isVideoOnForSomePeers: false, canUnmute: true }, () => {
        return /* @__PURE__ */ import_react107.default.createElement(Dropdown.Item, { css: dropdownItemCSS, onClick: () => setTrackEnabled("video", true) }, /* @__PURE__ */ import_react107.default.createElement(import_react_icons46.VideoOnIcon, null), /* @__PURE__ */ import_react107.default.createElement(Text, { variant: "sm", css: optionTextCSS }, "Request to Unmute Video for All"));
      }).otherwise(() => null), canRemoveRoleFromRoom ? /* @__PURE__ */ import_react107.default.createElement(
        Dropdown.Item,
        {
          css: { ...dropdownItemCSS, borderTop: "1px solid $border_bright", color: "$alert_error_default" },
          onClick: removePeersFromRoom
        },
        /* @__PURE__ */ import_react107.default.createElement(import_react_icons46.RemoveUserIcon, null),
        /* @__PURE__ */ import_react107.default.createElement(Text, { variant: "sm", css: { ...optionTextCSS, color: "inherit" } }, "Remove all from Room")
      ) : null);
    };
  }
});

// src/Prebuilt/components/hooks/useGroupOnStageActions.tsx
var import_ts_pattern8, import_react_sdk53, useGroupOnStageActions;
var init_useGroupOnStageActions = __esm({
  "src/Prebuilt/components/hooks/useGroupOnStageActions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_ts_pattern8 = require("ts-pattern");
    import_react_sdk53 = require("@100mslive/react-sdk");
    init_useRoomLayoutScreen();
    useGroupOnStageActions = ({ peers }) => {
      const hmsActions = (0, import_react_sdk53.useHMSActions)();
      const { elements } = useRoomLayoutConferencingScreen();
      const {
        bring_to_stage_label,
        remove_from_stage_label,
        on_stage_role,
        off_stage_roles = [],
        skip_preview_for_role_change = false
      } = elements.on_stage_exp || {};
      const canChangeRole = (0, import_react_sdk53.useHMSStore)(import_react_sdk53.selectPermissions)?.changeRole;
      const offStageRolePeers = peers.filter(
        (peer) => (0, import_ts_pattern8.match)({ on_stage_role, bring_to_stage_label, roleName: peer.roleName }).with(
          {
            on_stage_role: import_ts_pattern8.P.when((role) => !!role),
            bring_to_stage_label: import_ts_pattern8.P.when((label) => !!label),
            roleName: import_ts_pattern8.P.when((role) => !!role && off_stage_roles.includes(role))
          },
          () => true
        ).otherwise(() => false)
      );
      const lowerAllHands = async () => {
        return Promise.all(peers.map((peer) => hmsActions.lowerRemotePeerHand(peer.id)));
      };
      const bringAllToStage = () => {
        if (!canChangeRole || !on_stage_role) {
          return;
        }
        return Promise.all(
          offStageRolePeers.map((peer) => {
            return hmsActions.changeRoleOfPeer(peer.id, on_stage_role, skip_preview_for_role_change).then(() => {
              return skip_preview_for_role_change ? hmsActions.lowerRemotePeerHand(peer.id) : null;
            });
          })
        );
      };
      return {
        lowerAllHands,
        bringAllToStage,
        canBringToStage: canChangeRole && offStageRolePeers.length > 0,
        bring_to_stage_label,
        remove_from_stage_label
      };
    };
  }
});

// src/Prebuilt/components/Footer/RoleAccordion.tsx
function itemKey(index, data3) {
  return data3.peerList[index]?.id;
}
var import_react108, import_react_use19, import_react_window2, import_react_sdk54, import_react_icons47, ROW_HEIGHT, ITER_TIMER, VirtualizedParticipantItem, RoleAccordion;
var init_RoleAccordion = __esm({
  "src/Prebuilt/components/Footer/RoleAccordion.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react108 = __toESM(require("react"));
    import_react_use19 = require("react-use");
    import_react_window2 = require("react-window");
    import_react_sdk54 = require("@100mslive/react-sdk");
    import_react_icons47 = require("@100mslive/react-icons");
    init_Accordion2();
    init_Button2();
    init_Divider2();
    init_Layout();
    init_Text2();
    init_ParticipantList();
    init_RoleOptions();
    init_useGroupOnStageActions();
    init_utils2();
    ROW_HEIGHT = 50;
    ITER_TIMER = 5e3;
    VirtualizedParticipantItem = import_react108.default.memo(
      ({ index, data: data3, style }) => {
        return /* @__PURE__ */ import_react108.default.createElement(
          Participant,
          {
            key: data3.peerList[index].id,
            peer: data3.peerList[index],
            isHandRaisedAccordion: data3.isHandRaisedAccordion,
            isConnected: data3.isConnected,
            style
          }
        );
      }
    );
    RoleAccordion = ({
      peerList = [],
      roleName,
      isConnected,
      filter,
      isHandRaisedAccordion = false,
      offStageRoles,
      onActive
    }) => {
      const [ref, { width }] = (0, import_react_use19.useMeasure)();
      const isLargeRoom = (0, import_react_sdk54.useHMSStore)(import_react_sdk54.selectIsLargeRoom);
      const { peers, total, loadPeers } = (0, import_react_sdk54.usePaginatedParticipants)({ role: roleName, limit: 10 });
      const isOffStageRole = roleName && offStageRoles.includes(roleName);
      let peersInAccordion = peerList;
      if (isOffStageRole && isLargeRoom) {
        peersInAccordion = peers;
        if (filter?.search) {
          peersInAccordion = peersInAccordion.filter((peer) => peer.name.toLowerCase().includes(filter.search || ""));
        }
      }
      const { bringAllToStage, bring_to_stage_label, canBringToStage, lowerAllHands } = useGroupOnStageActions({
        peers: peersInAccordion
      });
      (0, import_react108.useEffect)(() => {
        if (!isOffStageRole || !isLargeRoom) {
          return;
        }
        loadPeers();
        const interval = setInterval(() => {
          loadPeers();
        }, ITER_TIMER);
        return () => clearInterval(interval);
      }, [isOffStageRole, isLargeRoom]);
      if (peersInAccordion.length === 0 || isHandRaisedAccordion && filter?.search) {
        return null;
      }
      const height = ROW_HEIGHT * peersInAccordion.length;
      const hasNext = total > peersInAccordion.length && !filter?.search;
      return /* @__PURE__ */ import_react108.default.createElement(Accordion.Item, { value: roleName, css: { "&:hover .role_actions": { visibility: "visible" }, mb: "$8" }, ref }, /* @__PURE__ */ import_react108.default.createElement(
        Accordion.Header,
        {
          chevronID: `role_accordion_btn_${roleName}`,
          iconStyles: { c: "$on_surface_high" },
          css: {
            textTransform: "capitalize",
            p: "$6 $8",
            fontSize: "$sm",
            fontWeight: "$semiBold",
            c: "$on_surface_medium",
            borderRadius: "$1",
            border: "1px solid $border_default",
            '&[data-state="open"]': {
              borderBottomLeftRadius: 0,
              borderBottomRightRadius: 0
            }
          }
        },
        /* @__PURE__ */ import_react108.default.createElement(Flex, { justify: "between", align: "center", css: { flexGrow: 1, pr: "$6" } }, /* @__PURE__ */ import_react108.default.createElement(
          Text,
          {
            variant: "sm",
            css: { fontWeight: "$semiBold", textTransform: "capitalize", color: "$on_surface_medium" }
          },
          roleName,
          " ",
          `(${getFormattedCount(isLargeRoom && isOffStageRole ? total : peerList.length)})`
        ), /* @__PURE__ */ import_react108.default.createElement(RoleOptions, { roleName, peerList: peersInAccordion }))
      ), /* @__PURE__ */ import_react108.default.createElement(Accordion.Content, { contentStyles: { border: "1px solid $border_default", borderTop: "none" } }, /* @__PURE__ */ import_react108.default.createElement(
        import_react_window2.FixedSizeList,
        {
          itemSize: ROW_HEIGHT,
          itemData: {
            peerList: isHandRaisedAccordion ? peersInAccordion.sort((a, b) => {
              try {
                const aHandRaisedAt = JSON.parse(a.metadata || "{}").handRaisedAt;
                const bHandRaisedAt = JSON.parse(b.metadata || "{}").handRaisedAt;
                return aHandRaisedAt - bHandRaisedAt;
              } catch (err) {
                return 0;
              }
            }) : peersInAccordion,
            isConnected,
            isHandRaisedAccordion
          },
          itemKey,
          itemCount: peersInAccordion.length,
          width,
          height
        },
        VirtualizedParticipantItem
      ), offStageRoles?.includes(roleName) && hasNext ? /* @__PURE__ */ import_react108.default.createElement(
        Flex,
        {
          align: "center",
          justify: "end",
          css: {
            gap: "$1",
            cursor: "pointer",
            color: "$on_surface_high",
            p: "$6",
            borderTop: "1px solid $border_default"
          },
          onClick: () => onActive?.(roleName)
        },
        /* @__PURE__ */ import_react108.default.createElement(Text, { variant: "sm", css: { color: "inherit" } }, "View All"),
        /* @__PURE__ */ import_react108.default.createElement(import_react_icons47.ChevronRightIcon, null)
      ) : null, isHandRaisedAccordion && canBringToStage && /* @__PURE__ */ import_react108.default.createElement(import_react108.default.Fragment, null, /* @__PURE__ */ import_react108.default.createElement(HorizontalDivider, null), /* @__PURE__ */ import_react108.default.createElement(Flex, { css: { w: "100%", p: "$6", gap: "$4" }, justify: "center" }, /* @__PURE__ */ import_react108.default.createElement(Button, { variant: "standard", onClick: lowerAllHands, icon: true, css: { pl: "$2" } }, /* @__PURE__ */ import_react108.default.createElement(import_react_icons47.CrossIcon, null), " Lower all hands"), /* @__PURE__ */ import_react108.default.createElement(Button, { onClick: bringAllToStage, icon: true, css: { pl: "$2" } }, /* @__PURE__ */ import_react108.default.createElement(import_react_icons47.AddIcon, null), " ", bring_to_stage_label)))));
    };
  }
});

// src/Prebuilt/components/AppData/useSidepaneResetOnLayoutUpdate.tsx
var import_react109, import_react_sdk55, useSidepaneResetOnLayoutUpdate;
var init_useSidepaneResetOnLayoutUpdate = __esm({
  "src/Prebuilt/components/AppData/useSidepaneResetOnLayoutUpdate.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react109 = require("react");
    import_react_sdk55 = require("@100mslive/react-sdk");
    init_useRoomLayoutScreen();
    init_useSidepane();
    init_constants();
    useSidepaneResetOnLayoutUpdate = (layoutKey, sidepaneOption) => {
      const { elements } = useRoomLayoutConferencingScreen();
      const sidepane = (0, import_react_sdk55.useHMSStore)((0, import_react_sdk55.selectAppData)(APP_DATA.sidePane));
      const resetSidePane = useSidepaneReset();
      (0, import_react109.useEffect)(() => {
        if (sidepane === sidepaneOption && !elements?.[layoutKey]) {
          resetSidePane();
        }
      }, [elements, elements?.[layoutKey], resetSidePane, sidepane, layoutKey, sidepaneOption]);
    };
  }
});

// src/Prebuilt/components/hooks/usePeerOnStageActions.tsx
var import_react110, import_react_sdk56, usePeerOnStageActions;
var init_usePeerOnStageActions = __esm({
  "src/Prebuilt/components/hooks/usePeerOnStageActions.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react110 = require("react");
    import_react_sdk56 = require("@100mslive/react-sdk");
    init_useRoomLayoutScreen();
    usePeerOnStageActions = ({ peerId, role }) => {
      const hmsActions = (0, import_react_sdk56.useHMSActions)();
      const { elements } = useRoomLayoutConferencingScreen();
      const {
        bring_to_stage_label,
        remove_from_stage_label,
        on_stage_role,
        off_stage_roles = [],
        skip_preview_for_role_change = false
      } = elements.on_stage_exp || {};
      const isInStage = role === on_stage_role;
      const canChangeRole = (0, import_react_sdk56.useHMSStore)(import_react_sdk56.selectPermissions)?.changeRole;
      const shouldShowStageRoleChange = canChangeRole && (isInStage && remove_from_stage_label || off_stage_roles?.includes(role) && bring_to_stage_label);
      const prevRole = (0, import_react_sdk56.useHMSStore)((0, import_react_sdk56.selectPeerMetadata)(peerId))?.prevRole;
      const [open, setOpen] = (0, import_react110.useState)(false);
      const lowerPeerHand = async () => {
        await hmsActions.lowerRemotePeerHand(peerId);
      };
      const handleStageAction = async () => {
        if (isInStage) {
          prevRole && hmsActions.changeRoleOfPeer(peerId, prevRole, true);
        } else if (on_stage_role) {
          await hmsActions.changeRoleOfPeer(peerId, on_stage_role, skip_preview_for_role_change);
          if (skip_preview_for_role_change) {
            await lowerPeerHand();
          }
        }
        setOpen(false);
      };
      return {
        open,
        setOpen,
        lowerPeerHand,
        handleStageAction,
        shouldShowStageRoleChange,
        isInStage,
        bring_to_stage_label,
        remove_from_stage_label
      };
    };
  }
});

// src/Prebuilt/components/Footer/ParticipantList.tsx
var import_react111, import_react_use20, import_react_sdk57, import_react_icons48, ParticipantList, ParticipantCount, Participant, VirtualizedParticipants, ParticipantActions, quickActionStyle, HandRaisedAccordionParticipantActions, ParticipantMoreActions, ParticipantSearch;
var init_ParticipantList = __esm({
  "src/Prebuilt/components/Footer/ParticipantList.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react111 = __toESM(require("react"));
    import_react_use20 = require("react-use");
    import_react_sdk57 = require("@100mslive/react-sdk");
    import_react_icons48 = require("@100mslive/react-icons");
    init_src();
    init_IconButton3();
    init_ConnectionIndicator();
    init_RemoveParticipant();
    init_RoleChangeModal();
    init_RoleAccordion();
    init_useRoomLayoutScreen();
    init_useSidepane();
    init_useSidepaneResetOnLayoutUpdate();
    init_usePeerOnStageActions();
    init_hooks();
    init_utils2();
    init_constants();
    ParticipantList = ({
      offStageRoles = [],
      onActive
    }) => {
      const [filter, setFilter] = (0, import_react111.useState)();
      const { participants, isConnected, peerCount } = useParticipants(filter);
      const isLargeRoom = (0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectIsLargeRoom);
      const peersOrderedByRoles = {};
      const handRaisedPeers = (0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectHandRaisedPeers);
      participants.forEach((participant) => {
        if (participant.roleName) {
          if (peersOrderedByRoles[participant.roleName] === void 0) {
            peersOrderedByRoles[participant.roleName] = [];
          }
          peersOrderedByRoles[participant.roleName].push(participant);
        }
      });
      if (isLargeRoom) {
        offStageRoles.forEach((role) => {
          if (!peersOrderedByRoles[role]) {
            peersOrderedByRoles[role] = [];
          }
        });
      }
      useSidepaneResetOnLayoutUpdate("participant_list", SIDE_PANE_OPTIONS.PARTICIPANTS);
      const onSearch = (0, import_react111.useCallback)((value) => {
        setFilter((filterValue) => {
          if (!filterValue) {
            filterValue = {};
          }
          filterValue.search = value.toLowerCase();
          return { ...filterValue };
        });
      }, []);
      if (peerCount === 0) {
        return null;
      }
      return /* @__PURE__ */ import_react111.default.createElement(import_react111.Fragment, null, /* @__PURE__ */ import_react111.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            size: "100%",
            gap: "$4"
          }
        },
        !filter?.search && participants.length === 0 ? null : /* @__PURE__ */ import_react111.default.createElement(ParticipantSearch, { onSearch, inSidePane: true }),
        /* @__PURE__ */ import_react111.default.createElement(
          VirtualizedParticipants,
          {
            peersOrderedByRoles,
            handRaisedList: handRaisedPeers,
            isConnected: !!isConnected,
            filter,
            offStageRoles,
            isLargeRoom,
            onActive
          },
          participants.length === 0 ? /* @__PURE__ */ import_react111.default.createElement(
            Flex,
            {
              align: "center",
              justify: "center",
              className: "emptyParticipants",
              css: { w: "100%", p: "$8 0", display: "none" }
            },
            /* @__PURE__ */ import_react111.default.createElement(Text, { variant: "sm" }, !filter ? "No participants" : "No matching participants")
          ) : null
        )
      ));
    };
    ParticipantCount = () => {
      const peerCount = (0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectPeerCount);
      const toggleSidepane = useSidepaneToggle(SIDE_PANE_OPTIONS.PARTICIPANTS);
      const isPeerListOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.PARTICIPANTS);
      if (peerCount === 0) {
        return null;
      }
      return /* @__PURE__ */ import_react111.default.createElement(
        IconButton_default,
        {
          css: {
            w: "auto",
            p: "$4",
            h: "auto",
            bg: isPeerListOpen ? "$surface_brighter" : ""
          },
          onClick: () => {
            if (peerCount > 0) {
              toggleSidepane();
            }
          },
          "data-testid": "participant_list"
        },
        /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.PeopleIcon, null),
        /* @__PURE__ */ import_react111.default.createElement(Text, { variant: "sm", css: { mx: "$4", c: "inherit" } }, getFormattedCount(peerCount))
      );
    };
    Participant = ({
      peer,
      isConnected,
      isHandRaisedAccordion,
      style
    }) => {
      const localPeerId = (0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectLocalPeerID);
      return /* @__PURE__ */ import_react111.default.createElement(
        Flex,
        {
          key: peer.id,
          css: {
            w: "100%",
            p: "$4 $8",
            pr: "$6",
            h: "$16",
            "&:hover .participant_item": { display: "flex" }
          },
          align: "center",
          justify: "between",
          "data-testid": "participant_" + peer.name,
          style
        },
        /* @__PURE__ */ import_react111.default.createElement(
          Text,
          {
            variant: "sm",
            css: { ...textEllipsis("100%"), flex: "1 1 0", mr: "$8", fontWeight: "$semiBold", color: "$on_surface_high" }
          },
          peer.name,
          " ",
          localPeerId === peer.id ? "(You)" : ""
        ),
        isConnected && peer.roleName ? /* @__PURE__ */ import_react111.default.createElement(
          ParticipantActions,
          {
            peerId: peer.id,
            peerType: peer.type,
            role: peer.roleName,
            isHandRaisedAccordion
          }
        ) : null
      );
    };
    VirtualizedParticipants = ({
      peersOrderedByRoles = {},
      isConnected,
      filter,
      handRaisedList = [],
      offStageRoles,
      isLargeRoom,
      onActive,
      children
    }) => {
      return /* @__PURE__ */ import_react111.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            gap: "$8",
            overflowY: "auto",
            overflowX: "hidden",
            pr: "$10",
            mr: "-$10",
            flex: "1 1 0",
            "& > div:empty ~ .emptyParticipants": {
              display: "flex"
            }
          }
        },
        /* @__PURE__ */ import_react111.default.createElement(Accordion.Root, { type: isLargeRoom ? "single" : "multiple", collapsible: true }, handRaisedList.length > 0 ? /* @__PURE__ */ import_react111.default.createElement(
          RoleAccordion,
          {
            peerList: handRaisedList,
            roleName: "Hand Raised",
            filter,
            isConnected,
            isHandRaisedAccordion: true,
            offStageRoles
          }
        ) : null, Object.keys(peersOrderedByRoles).map((role) => /* @__PURE__ */ import_react111.default.createElement(
          RoleAccordion,
          {
            key: role,
            peerList: peersOrderedByRoles[role],
            roleName: role,
            isConnected,
            filter,
            offStageRoles,
            onActive
          }
        ))),
        children
      );
    };
    ParticipantActions = import_react111.default.memo(
      ({
        peerId,
        peerType,
        role,
        isHandRaisedAccordion
      }) => {
        const isHandRaised = (0, import_react_sdk57.useHMSStore)((0, import_react_sdk57.selectHasPeerHandRaised)(peerId));
        const canChangeRole = (0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectPermissions)?.changeRole;
        const canRemoveOthers = (0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectPermissions)?.removeOthers;
        const { elements } = useRoomLayoutConferencingScreen();
        const { on_stage_exp } = elements || {};
        const shouldShowMoreActions = on_stage_exp && canChangeRole || canRemoveOthers;
        const isAudioMuted = !(0, import_react_sdk57.useHMSStore)((0, import_react_sdk57.selectIsPeerAudioEnabled)(peerId));
        return /* @__PURE__ */ import_react111.default.createElement(
          Flex,
          {
            align: "center",
            css: {
              flexShrink: 0,
              gap: "$8"
            }
          },
          isHandRaisedAccordion ? /* @__PURE__ */ import_react111.default.createElement(HandRaisedAccordionParticipantActions, { peerId, role }) : /* @__PURE__ */ import_react111.default.createElement(import_react111.default.Fragment, null, /* @__PURE__ */ import_react111.default.createElement(ConnectionIndicator, { peerId }), peerType === import_react_sdk57.HMSPeerType.SIP && /* @__PURE__ */ import_react111.default.createElement(
            Flex,
            {
              align: "center",
              justify: "center",
              css: { p: "$1", c: "$on_surface_high", bg: "$surface_bright", borderRadius: "$round" }
            },
            /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.CallIcon, { width: 19, height: 19 })
          ), isHandRaised && /* @__PURE__ */ import_react111.default.createElement(
            Flex,
            {
              align: "center",
              justify: "center",
              css: { p: "$1", c: "$on_surface_high", bg: "$surface_bright", borderRadius: "$round" }
            },
            /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.HandIcon, { height: 19, width: 19 })
          ), isAudioMuted ? /* @__PURE__ */ import_react111.default.createElement(
            Flex,
            {
              align: "center",
              justify: "center",
              css: { p: "$2", c: "$on_surface_high", bg: "$surface_bright", borderRadius: "$round" }
            },
            /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.MicOffIcon, { height: 19, width: 19 })
          ) : null, shouldShowMoreActions ? /* @__PURE__ */ import_react111.default.createElement(ParticipantMoreActions, { peerId, role }) : null)
        );
      }
    );
    quickActionStyle = { p: "$1", borderRadius: "$round" };
    HandRaisedAccordionParticipantActions = ({ peerId, role }) => {
      const { handleStageAction, lowerPeerHand, shouldShowStageRoleChange, isInStage } = usePeerOnStageActions({
        peerId,
        role
      });
      if (!shouldShowStageRoleChange) {
        return null;
      }
      return /* @__PURE__ */ import_react111.default.createElement(import_react111.default.Fragment, null, /* @__PURE__ */ import_react111.default.createElement(Button, { variant: "standard", css: quickActionStyle, onClick: lowerPeerHand }, /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.CrossIcon, { height: 18, width: 18 })), !isInStage && /* @__PURE__ */ import_react111.default.createElement(Button, { variant: "primary", onClick: handleStageAction, css: quickActionStyle }, /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.AddIcon, { height: 18, width: 18 })));
    };
    ParticipantMoreActions = ({ peerId, role }) => {
      const {
        open,
        setOpen,
        bring_to_stage_label,
        remove_from_stage_label,
        handleStageAction,
        isInStage,
        shouldShowStageRoleChange
      } = usePeerOnStageActions({ peerId, role });
      const canChangeRole = !!(0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectPermissions)?.changeRole;
      const [openRoleChangeModal, setOpenRoleChangeModal] = (0, import_react111.useState)(false);
      const roles = (0, import_react_sdk57.useHMSStore)(import_react_sdk57.selectAvailableRoleNames);
      return /* @__PURE__ */ import_react111.default.createElement(import_react111.default.Fragment, null, /* @__PURE__ */ import_react111.default.createElement(Dropdown.Root, { open, onOpenChange: (value) => setOpen(value), modal: false }, /* @__PURE__ */ import_react111.default.createElement(
        Dropdown.Trigger,
        {
          asChild: true,
          "data-testid": "participant_more_actions",
          className: "participant_item",
          css: {
            p: "$1",
            r: "$0",
            c: "$on_surface_high",
            display: open ? "flex" : "none",
            "&:hover": {
              bg: "$surface_bright"
            },
            "@md": {
              display: "flex"
            }
          },
          tabIndex: 0
        },
        /* @__PURE__ */ import_react111.default.createElement(Box, { css: { my: "auto" } }, /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.VerticalMenuIcon, null))
      ), /* @__PURE__ */ import_react111.default.createElement(Dropdown.Portal, null, /* @__PURE__ */ import_react111.default.createElement(Dropdown.Content, { align: "end", sideOffset: 8, css: { w: "$64", bg: "$surface_default" } }, shouldShowStageRoleChange ? /* @__PURE__ */ import_react111.default.createElement(Dropdown.Item, { css: { bg: "$surface_default" }, onClick: () => handleStageAction() }, /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.ChangeRoleIcon, null), /* @__PURE__ */ import_react111.default.createElement(Text, { variant: "sm", css: { ml: "$4", fontWeight: "$semiBold", c: "$on_surface_high" } }, isInStage ? remove_from_stage_label : bring_to_stage_label)) : null, canChangeRole && roles.length > 1 ? /* @__PURE__ */ import_react111.default.createElement(Dropdown.Item, { css: { bg: "$surface_default" }, onClick: () => setOpenRoleChangeModal(true) }, /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.PersonSettingsIcon, null), /* @__PURE__ */ import_react111.default.createElement(Text, { variant: "sm", css: { ml: "$4", fontWeight: "$semiBold", c: "$on_surface_high" } }, "Switch Role")) : null, /* @__PURE__ */ import_react111.default.createElement(RemoveParticipant, { peerId })))), openRoleChangeModal && /* @__PURE__ */ import_react111.default.createElement(RoleChangeModal, { peerId, onOpenChange: setOpenRoleChangeModal }));
    };
    ParticipantSearch = ({
      onSearch,
      placeholder = "Search for participants",
      inSidePane = false
    }) => {
      const [value, setValue] = import_react111.default.useState("");
      const isMobile = (0, import_react_use20.useMedia)(config.media.md);
      (0, import_react_use20.useDebounce)(
        () => {
          onSearch(value);
        },
        300,
        [value, onSearch]
      );
      return /* @__PURE__ */ import_react111.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            p: isMobile ? "0" : "$2 0",
            mb: "$2",
            position: "relative",
            color: "$on_surface_medium",
            mt: inSidePane ? "$4" : ""
          },
          onClick: (e) => e.stopPropagation()
        },
        /* @__PURE__ */ import_react111.default.createElement(import_react_icons48.SearchIcon, { style: { position: "absolute", left: "0.5rem" } }),
        /* @__PURE__ */ import_react111.default.createElement(
          Input,
          {
            type: "text",
            placeholder,
            css: { w: "100%", p: "$6", pl: "$14", bg: inSidePane ? "$surface_default" : "$surface_dim" },
            value,
            onKeyDown: (event) => {
              event.stopPropagation();
            },
            onChange: (event) => {
              setValue(event.currentTarget.value);
            },
            autoComplete: "off",
            "aria-autocomplete": "none"
          }
        )
      );
    };
  }
});

// src/Prebuilt/components/Footer/PollsToggle.tsx
var import_react112, import_react_icons49, PollsToggle;
var init_PollsToggle = __esm({
  "src/Prebuilt/components/Footer/PollsToggle.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react112 = __toESM(require("react"));
    import_react_icons49 = require("@100mslive/react-icons");
    init_src();
    init_IconButton3();
    init_useSidepane();
    init_useUnreadPollQuizPresent();
    init_constants();
    PollsToggle = () => {
      const isPollsOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.POLLS);
      const togglePollView = usePollViewToggle();
      const { unreadPollQuiz, setUnreadPollQuiz } = useUnreadPollQuizPresent();
      (0, import_react112.useEffect)(() => {
        if (unreadPollQuiz && isPollsOpen) {
          setUnreadPollQuiz(false);
        }
      }, [isPollsOpen, unreadPollQuiz, setUnreadPollQuiz]);
      return /* @__PURE__ */ import_react112.default.createElement(Tooltip, { key: "polls", title: `${isPollsOpen ? "Close" : "Open"} polls and quizzes` }, /* @__PURE__ */ import_react112.default.createElement(
        IconButton_default,
        {
          onClick: () => {
            togglePollView();
            setUnreadPollQuiz(false);
          },
          css: { bg: isPollsOpen ? "$surface_brighter" : "" },
          "data-testid": "polls_btn"
        },
        unreadPollQuiz ? /* @__PURE__ */ import_react112.default.createElement(import_react_icons49.QuizActiveIcon, null) : /* @__PURE__ */ import_react112.default.createElement(import_react_icons49.QuizIcon, null)
      ));
    };
  }
});

// src/Prebuilt/components/Footer/WhiteboardToggle.tsx
var import_react113, import_react_sdk58, import_react_icons50, WhiteboardToggle;
var init_WhiteboardToggle = __esm({
  "src/Prebuilt/components/Footer/WhiteboardToggle.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react113 = __toESM(require("react"));
    import_react_sdk58 = require("@100mslive/react-sdk");
    import_react_icons50 = require("@100mslive/react-icons");
    init_Tooltip2();
    init_IconButton3();
    init_ToastManager();
    WhiteboardToggle = () => {
      const { toggle, open, isOwner } = (0, import_react_sdk58.useWhiteboard)();
      const peerSharing = (0, import_react_sdk58.useHMSStore)(import_react_sdk58.selectPeerScreenSharing);
      const disabled = !!peerSharing || open && !isOwner;
      if (!toggle) {
        return null;
      }
      return /* @__PURE__ */ import_react113.default.createElement(
        Tooltip,
        {
          key: "whiteboard",
          title: peerSharing ? "Cannot open whiteboard when viewing a shared screen" : `${open ? "Close" : "Open"} Whiteboard`
        },
        /* @__PURE__ */ import_react113.default.createElement(
          IconButton_default,
          {
            onClick: async () => {
              if (disabled) {
                return;
              }
              try {
                await toggle();
              } catch (error) {
                ToastManager.addToast({ title: error.message, variant: "error" });
              }
            },
            active: !open,
            disabled,
            "data-testid": "whiteboard_btn"
          },
          /* @__PURE__ */ import_react113.default.createElement(import_react_icons50.PencilDrawIcon, null)
        )
      );
    };
  }
});

// src/Prebuilt/components/Interpreting/Int2En.tsx
var import_react114, import_react_sdk59, Int2EnButton, Int2En_default;
var init_Int2En = __esm({
  "src/Prebuilt/components/Interpreting/Int2En.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react114 = __toESM(require("react"));
    import_react_sdk59 = require("@100mslive/react-sdk");
    init_Tooltip2();
    init_IconButton3();
    Int2EnButton = () => {
      const hmsActions = (0, import_react_sdk59.useHMSActions)();
      const localPeerId = (0, import_react_sdk59.useHMSStore)(import_react_sdk59.selectLocalPeerID);
      const changeRole = () => {
        hmsActions.changeRoleOfPeer(localPeerId, "interpreter-en", true);
      };
      return /* @__PURE__ */ import_react114.default.createElement(Tooltip, { key: "int2en", title: "Interpreting to English" }, /* @__PURE__ */ import_react114.default.createElement(IconButton_default, { onClick: changeRole }, /* @__PURE__ */ import_react114.default.createElement("div", { className: "text-xs text-slate-200 rounded-lg" }, "EN")));
    };
    Int2En_default = Int2EnButton;
  }
});

// src/Prebuilt/components/Interpreting/Int2Fr.tsx
var import_react115, import_react_sdk60, Int2FrButton, Int2Fr_default;
var init_Int2Fr = __esm({
  "src/Prebuilt/components/Interpreting/Int2Fr.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react115 = __toESM(require("react"));
    import_react_sdk60 = require("@100mslive/react-sdk");
    init_Tooltip2();
    init_IconButton3();
    Int2FrButton = () => {
      const hmsActions = (0, import_react_sdk60.useHMSActions)();
      const localPeerId = (0, import_react_sdk60.useHMSStore)(import_react_sdk60.selectLocalPeerID);
      const changeRole = () => {
        hmsActions.changeRoleOfPeer(localPeerId, "interpreter-fr", true);
      };
      return /* @__PURE__ */ import_react115.default.createElement(Tooltip, { key: "int2fr", title: "Interpr\xE9tation vers le fran\xE7ais" }, /* @__PURE__ */ import_react115.default.createElement(IconButton_default, { onClick: changeRole, className: "w-auto" }, /* @__PURE__ */ import_react115.default.createElement("div", { className: "text-xs text-slate-200 rounded-lg" }, "FR")));
    };
    Int2Fr_default = Int2FrButton;
  }
});

// src/Prebuilt/components/Languages/En.tsx
var import_react116, import_react_sdk61, EnButton, En_default;
var init_En = __esm({
  "src/Prebuilt/components/Languages/En.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react116 = __toESM(require("react"));
    import_react_sdk61 = require("@100mslive/react-sdk");
    init_Tooltip2();
    init_IconButton3();
    EnButton = () => {
      const peers = (0, import_react_sdk61.useHMSStore)(import_react_sdk61.selectPeers);
      const hmsActions = (0, import_react_sdk61.useHMSActions)();
      const changeVolume = () => {
        for (const peer of peers) {
          if (peer.roleName === "host" || peer.roleName === "guest" || peer.roleName === "interpreter-fr" && peer.audioTrack) {
            hmsActions.setVolume(0, peer.audioTrack);
          }
        }
      };
      return /* @__PURE__ */ import_react116.default.createElement(Tooltip, { title: "English" }, /* @__PURE__ */ import_react116.default.createElement(IconButton_default, { onClick: changeVolume }, /* @__PURE__ */ import_react116.default.createElement("div", { className: "text-xs text-slate-200 rounded-lg" }, "EN")));
    };
    En_default = EnButton;
  }
});

// src/Prebuilt/components/Languages/Fr.tsx
var import_react117, import_react_sdk62, EnButton2, Fr_default;
var init_Fr = __esm({
  "src/Prebuilt/components/Languages/Fr.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react117 = __toESM(require("react"));
    import_react_sdk62 = require("@100mslive/react-sdk");
    init_Tooltip2();
    init_IconButton3();
    EnButton2 = () => {
      const peers = (0, import_react_sdk62.useHMSStore)(import_react_sdk62.selectPeers);
      const hmsActions = (0, import_react_sdk62.useHMSActions)();
      const changeVolume = () => {
        for (const peer of peers) {
          if (peer.roleName === "host" || peer.roleName === "guest" || peer.roleName === "interpreter-en" && peer.audioTrack) {
            hmsActions.setVolume(0, peer.audioTrack);
          }
        }
      };
      return /* @__PURE__ */ import_react117.default.createElement(Tooltip, { title: "English" }, /* @__PURE__ */ import_react117.default.createElement(IconButton_default, { onClick: changeVolume }, /* @__PURE__ */ import_react117.default.createElement("div", { className: "text-xs text-slate-200 rounded-lg" }, "FR")));
    };
    Fr_default = EnButton2;
  }
});

// src/Prebuilt/components/Footer/Footer.tsx
var import_react118, import_react_use21, import_chat, import_react_sdk63, Footer2;
var init_Footer3 = __esm({
  "src/Prebuilt/components/Footer/Footer.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react118 = __toESM(require("react"));
    import_react_use21 = require("react-use");
    import_chat = require("@100mslive/types-prebuilt/elements/chat");
    init_src();
    init_AudioVideoToggle();
    init_CaptionIcon();
    init_EmojiReaction();
    init_LeaveRoom();
    init_MoreSettings();
    init_RaiseHand();
    init_ScreenShareToggle();
    init_VBToggle();
    init_ChatToggle();
    init_ParticipantList();
    init_PollsToggle();
    init_WhiteboardToggle();
    init_useSidepane();
    init_useUISettings();
    init_constants();
    import_react_sdk63 = require("@100mslive/react-sdk");
    init_Int2En();
    init_Int2Fr();
    init_En();
    init_Fr();
    Footer2 = ({
      screenType,
      elements
    }) => {
      const isMobile = (0, import_react_use21.useMedia)(config.media.md);
      const isOverlayChat = !!elements?.chat?.is_overlay;
      const openByDefault = elements?.chat?.initial_state === import_chat.Chat_ChatState.CHAT_STATE_OPEN;
      const isChatOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.CHAT);
      const toggleChat = useSidepaneToggle(SIDE_PANE_OPTIONS.CHAT);
      const { showPolls } = useShowPolls();
      const role = (0, import_react_sdk63.useHMSStore)(import_react_sdk63.selectLocalPeerRole);
      (0, import_react118.useEffect)(() => {
        if (!isChatOpen && openByDefault) {
          toggleChat();
        }
      }, [toggleChat, openByDefault]);
      return /* @__PURE__ */ import_react118.default.createElement(
        Footer.Root,
        {
          css: {
            flexWrap: "nowrap",
            "@md": {
              justifyContent: "center",
              gap: "$10",
              position: "relative",
              // To prevent it from showing over the sidepane if chat type is not overlay
              zIndex: isOverlayChat && isChatOpen ? 20 : 1
            }
          }
        },
        /* @__PURE__ */ import_react118.default.createElement(
          Footer.Left,
          {
            css: {
              "@md": {
                w: "unset",
                p: "0",
                gap: "$10"
              }
            }
          },
          isMobile ? /* @__PURE__ */ import_react118.default.createElement(LeaveRoom, { screenType }) : null,
          /* @__PURE__ */ import_react118.default.createElement(AudioVideoToggle, null),
          !isMobile && elements.virtual_background ? /* @__PURE__ */ import_react118.default.createElement(VBToggle, null) : null,
          role?.name === "interpreter-en" || role?.name === "interpreter-fr" ? /* @__PURE__ */ import_react118.default.createElement(import_react118.default.Fragment, null, /* @__PURE__ */ import_react118.default.createElement(Int2En_default, null), /* @__PURE__ */ import_react118.default.createElement(Int2Fr_default, null)) : null,
          role?.name === "guest" || role?.name === "host" ? /* @__PURE__ */ import_react118.default.createElement(import_react118.default.Fragment, null, /* @__PURE__ */ import_react118.default.createElement(En_default, null), /* @__PURE__ */ import_react118.default.createElement(Fr_default, null)) : null
        ),
        /* @__PURE__ */ import_react118.default.createElement(
          Footer.Center,
          {
            css: {
              "@md": {
                w: "unset",
                gap: "$10"
              }
            }
          },
          isMobile ? /* @__PURE__ */ import_react118.default.createElement(import_react118.default.Fragment, null, /* @__PURE__ */ import_react118.default.createElement(ScreenshareToggle, null), /* @__PURE__ */ import_react118.default.createElement(RaiseHand, null), elements?.chat && /* @__PURE__ */ import_react118.default.createElement(ChatToggle, null), /* @__PURE__ */ import_react118.default.createElement(MoreSettings, { elements, screenType })) : /* @__PURE__ */ import_react118.default.createElement(import_react118.default.Fragment, null, /* @__PURE__ */ import_react118.default.createElement(ScreenshareToggle, null), /* @__PURE__ */ import_react118.default.createElement(RaiseHand, null), screenType !== "hls_live_streaming" && /* @__PURE__ */ import_react118.default.createElement(CaptionIcon, null), elements?.emoji_reactions && /* @__PURE__ */ import_react118.default.createElement(EmojiReaction, null), /* @__PURE__ */ import_react118.default.createElement(LeaveRoom, { screenType }))
        ),
        /* @__PURE__ */ import_react118.default.createElement(Footer.Right, null, /* @__PURE__ */ import_react118.default.createElement(WhiteboardToggle, null), showPolls && /* @__PURE__ */ import_react118.default.createElement(PollsToggle, null), !isMobile && elements?.chat && /* @__PURE__ */ import_react118.default.createElement(ChatToggle, null), elements?.participant_list && /* @__PURE__ */ import_react118.default.createElement(ParticipantCount, null), /* @__PURE__ */ import_react118.default.createElement(MoreSettings, { elements, screenType }))
      );
    };
  }
});

// src/Prebuilt/components/Notifications/HLSFailureModal.tsx
function HLSFailureModal() {
  const hlsError = (0, import_react_sdk64.useHMSStore)(import_react_sdk64.selectHLSState).error || false;
  const [openModal, setOpenModal] = (0, import_react119.useState)(!!hlsError);
  const hmsActions = (0, import_react_sdk64.useHMSActions)();
  const { isRTMPRunning } = (0, import_react_sdk64.useRecordingStreaming)();
  const [isHLSStarted, setHLSStarted] = useSetAppDataByKey(APP_DATA.hlsStarted);
  const startHLS = (0, import_react119.useCallback)(async () => {
    try {
      if (isHLSStarted || isRTMPRunning) {
        return;
      }
      setHLSStarted(true);
      await hmsActions.startHLSStreaming({});
    } catch (error) {
      console.error(error);
      setHLSStarted(false);
    }
  }, [hmsActions, isHLSStarted, setHLSStarted, isRTMPRunning]);
  return hlsError ? /* @__PURE__ */ import_react119.default.createElement(
    Dialog.Root,
    {
      open: openModal,
      onOpenChange: (value) => {
        if (!value) {
          setOpenModal(false);
        }
      }
    },
    /* @__PURE__ */ import_react119.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react119.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react119.default.createElement(Dialog.Content, { css: { w: "min(360px, 90%)" } }, /* @__PURE__ */ import_react119.default.createElement(
      Dialog.Title,
      {
        css: {
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          borderBottom: "1px solid $border_default",
          mt: "$4"
        }
      },
      /* @__PURE__ */ import_react119.default.createElement(Text, { variant: "h6", css: { fontWeight: "$semiBold" } }, "Failed to Go Live")
    ), /* @__PURE__ */ import_react119.default.createElement(Text, { variant: "sm", css: { mb: "$10", color: "$on_surface_medium" } }, "Something went wrong and your live broadcast failed. Please try again."), /* @__PURE__ */ import_react119.default.createElement(Flex, { align: "center", justify: "between", css: { w: "100%", gap: "$8" } }, /* @__PURE__ */ import_react119.default.createElement(Button, { outlined: true, variant: "standard", css: { w: "100%" }, onClick: () => setOpenModal(false) }, "Dismiss"), /* @__PURE__ */ import_react119.default.createElement(Button, { css: { w: "100%" }, onClick: startHLS }, "Go Live"))))
  ) : null;
}
var import_react119, import_react_sdk64;
var init_HLSFailureModal = __esm({
  "src/Prebuilt/components/Notifications/HLSFailureModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react119 = __toESM(require("react"));
    import_react_sdk64 = require("@100mslive/react-sdk");
    init_Button2();
    init_Layout();
    init_Modal();
    init_Text2();
    init_useUISettings();
    init_constants();
  }
});

// src/Prebuilt/components/Streaming/Common.jsx
var import_react120, import_react_sdk65, import_react_icons51, ContentHeader, Container3, ErrorText;
var init_Common = __esm({
  "src/Prebuilt/components/Streaming/Common.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react120 = __toESM(require("react"));
    import_react_sdk65 = require("@100mslive/react-sdk");
    import_react_icons51 = require("@100mslive/react-icons");
    init_src();
    ContentHeader = ({ onBack, onClose, title = "", content }) => {
      return /* @__PURE__ */ import_react120.default.createElement(
        Flex,
        {
          css: { w: "100%", py: "$8", px: "$10", cursor: "pointer", borderBottom: "1px solid $border_bright", mb: "$8" }
        },
        onBack ? /* @__PURE__ */ import_react120.default.createElement(
          Flex,
          {
            align: "center",
            css: {
              mr: "$8",
              color: "$on_surface_high"
            },
            onClick: onBack,
            "data-testid": "go_back"
          },
          /* @__PURE__ */ import_react120.default.createElement(import_react_icons51.ChevronLeftIcon, null)
        ) : null,
        /* @__PURE__ */ import_react120.default.createElement(Box, { css: { flex: "1 1 0", display: "flex", alignItems: "center" } }, title ? /* @__PURE__ */ import_react120.default.createElement(
          Text,
          {
            variant: "tiny",
            css: {
              textTransform: "uppercase",
              fontWeight: "$semiBold",
              color: "$on_surface_medium"
            }
          },
          title
        ) : null, /* @__PURE__ */ import_react120.default.createElement(Text, { variant: "h6" }, content)),
        onClose ? /* @__PURE__ */ import_react120.default.createElement(IconButton, { onClick: onClose, css: { alignSelf: "flex-start" }, "data-testid": "close_stream_section" }, /* @__PURE__ */ import_react120.default.createElement(import_react_icons51.CrossIcon, null)) : null
      );
    };
    Container3 = ({ children, rounded = false }) => {
      return /* @__PURE__ */ import_react120.default.createElement(
        Box,
        {
          css: {
            size: "100%",
            zIndex: 2,
            position: "absolute",
            top: 0,
            left: 0,
            bg: "$surface_dim",
            transform: "translateX(10%)",
            animation: `${slideLeftAndFade("10%")} 100ms ease-out forwards`,
            display: "flex",
            flexDirection: "column",
            borderRadius: rounded ? "$2" : "0"
          }
        },
        children
      );
    };
    ErrorText = ({ error }) => {
      if (!error) {
        return null;
      }
      return /* @__PURE__ */ import_react120.default.createElement(Text, { variant: "sm", css: { my: "$4", color: "$alert_error_default" } }, error);
    };
  }
});

// src/Prebuilt/components/Polls/common/StatusIndicator.tsx
var import_react121, statusMap, StatusIndicator;
var init_StatusIndicator = __esm({
  "src/Prebuilt/components/Polls/common/StatusIndicator.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react121 = __toESM(require("react"));
    init_src();
    statusMap = {
      created: "DRAFT" /* DRAFT */,
      started: "LIVE" /* LIVE */,
      stopped: "ENDED" /* ENDED */
    };
    StatusIndicator = ({ status }) => {
      if (!status) return null;
      return /* @__PURE__ */ import_react121.default.createElement(Flex, { align: "center" }, /* @__PURE__ */ import_react121.default.createElement(
        Flex,
        {
          css: {
            backgroundColor: statusMap[status] === "LIVE" /* LIVE */ ? "$alert_error_default" : "$secondary_default",
            p: "$2 $4",
            borderRadius: "$0"
          }
        },
        /* @__PURE__ */ import_react121.default.createElement(
          Text,
          {
            variant: "caption",
            css: {
              fontWeight: "$semiBold",
              color: "$on_primary_high"
            }
          },
          statusMap[status]
        )
      ));
    };
  }
});

// src/Prebuilt/components/Polls/CreatePollQuiz/PollsQuizMenu.tsx
function InteractionSelectionCard({
  title,
  icon,
  active,
  onClick
}) {
  const activeBorderStyle = active ? "$space$px solid $primary_default" : "$space$px solid $border_bright";
  return /* @__PURE__ */ import_react122.default.createElement(
    Flex,
    {
      onClick,
      css: {
        border: activeBorderStyle,
        p: "$4",
        r: "$2",
        w: "100%",
        cursor: "pointer"
      },
      align: "center"
    },
    /* @__PURE__ */ import_react122.default.createElement(
      Flex,
      {
        css: {
          border: activeBorderStyle,
          p: "$4",
          bg: "$surface_bright",
          c: "$on_surface_high",
          r: "$0"
        }
      },
      icon
    ),
    /* @__PURE__ */ import_react122.default.createElement(Text, { variant: "sub1", css: { ml: "$md" } }, title)
  );
}
var import_react122, import_react_sdk66, import_react_icons52, PollsQuizMenu, AddMenu, PrevMenu, InteractionCard;
var init_PollsQuizMenu = __esm({
  "src/Prebuilt/components/Polls/CreatePollQuiz/PollsQuizMenu.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react122 = __toESM(require("react"));
    import_react_sdk66 = require("@100mslive/react-sdk");
    import_react_icons52 = require("@100mslive/react-icons");
    init_src();
    init_Common();
    init_useSidepane();
    init_useUISettings();
    init_utils2();
    init_StatusIndicator();
    init_constants();
    PollsQuizMenu = () => {
      const togglePollView = usePollViewToggle();
      const permissions = (0, import_react_sdk66.useHMSStore)(import_react_sdk66.selectPermissions);
      return /* @__PURE__ */ import_react122.default.createElement(Container3, { rounded: true }, /* @__PURE__ */ import_react122.default.createElement(ContentHeader, { content: "Polls and Quizzes", onClose: togglePollView }), /* @__PURE__ */ import_react122.default.createElement(Flex, { direction: "column", css: { px: "$10", pb: "$10", overflowY: "auto" } }, permissions?.pollWrite && /* @__PURE__ */ import_react122.default.createElement(AddMenu, null), /* @__PURE__ */ import_react122.default.createElement(PrevMenu, null)));
    };
    AddMenu = () => {
      const actions = (0, import_react_sdk66.useHMSActions)();
      const [title, setTitle] = (0, import_react122.useState)("");
      const localPeerRoleName = (0, import_react_sdk66.useHMSStore)(import_react_sdk66.selectLocalPeerRoleName);
      const [hideVoteCount, setHideVoteCount] = (0, import_react122.useState)(false);
      const [error, setError] = (0, import_react122.useState)();
      const [titleError, setTitleError] = (0, import_react122.useState)("");
      const { setPollState } = usePollViewState();
      const [interactionType, setInteractionType] = (0, import_react122.useState)("Poll" /* POLL */);
      const inputRef = (0, import_react122.useRef)(null);
      (0, import_react122.useEffect)(() => {
        if (inputRef.current) {
          inputRef.current.focus();
        }
      }, [interactionType]);
      const handleCreate = (id) => {
        setPollState({
          [POLL_STATE.pollInView]: id,
          [POLL_STATE.view]: POLL_VIEWS.CREATE_QUESTIONS
        });
      };
      const validateTitle = (0, import_react122.useMemo)(() => {
        if (!isValidTextInput(title)) {
          if (title) {
            setTitleError("The title should have between 2-100 characters");
          }
          return true;
        } else {
          setTitleError("");
          return false;
        }
      }, [title]);
      return /* @__PURE__ */ import_react122.default.createElement(import_react122.default.Fragment, null, /* @__PURE__ */ import_react122.default.createElement(Text, { variant: "caption", css: { c: "$on_surface_medium", mb: "$md" } }, "Select the type you want to continue with"), /* @__PURE__ */ import_react122.default.createElement(Flex, { css: { w: "100%", gap: "$10", mb: "$md" } }, /* @__PURE__ */ import_react122.default.createElement(
        InteractionSelectionCard,
        {
          title: "Poll" /* POLL */,
          icon: /* @__PURE__ */ import_react122.default.createElement(import_react_icons52.StatsIcon, { width: 32, height: 32 }),
          onClick: () => setInteractionType("Poll" /* POLL */),
          active: interactionType === "Poll" /* POLL */
        }
      ), /* @__PURE__ */ import_react122.default.createElement(
        InteractionSelectionCard,
        {
          title: "Quiz" /* QUIZ */,
          icon: /* @__PURE__ */ import_react122.default.createElement(import_react_icons52.QuestionIcon, { width: 32, height: 32 }),
          onClick: () => setInteractionType("Quiz" /* QUIZ */),
          active: interactionType === "Quiz" /* QUIZ */
        }
      )), /* @__PURE__ */ import_react122.default.createElement(Flex, { direction: "column", css: { mb: "$10" } }, /* @__PURE__ */ import_react122.default.createElement(Text, { variant: "body2", css: { mb: "$4" } }, `Name this ${interactionType.toLowerCase()}`), /* @__PURE__ */ import_react122.default.createElement(
        Input,
        {
          ref: inputRef,
          type: "text",
          placeholder: "Enter a name to continue",
          value: title,
          onChange: (event) => setTitle(event.target.value.trimStart()),
          css: {
            backgroundColor: "$surface_bright",
            border: "1px solid $border_default"
          }
        }
      ), /* @__PURE__ */ import_react122.default.createElement(Flex, { align: "center", css: { mt: "$10" } }, /* @__PURE__ */ import_react122.default.createElement(Switch, { onCheckedChange: (value) => setHideVoteCount(value), css: { mr: "$6" } }), /* @__PURE__ */ import_react122.default.createElement(Text, { variant: "body2", css: { c: "$on_surface_medium" } }, "Hide Vote Count")), /* @__PURE__ */ import_react122.default.createElement(
        Button,
        {
          variant: "primary",
          disabled: validateTitle,
          css: { mt: "$10" },
          onClick: async () => {
            const id = Date.now().toString();
            await actions.interactivityCenter.createPoll({
              id,
              title,
              anonymous: false,
              rolesThatCanViewResponses: hideVoteCount && localPeerRoleName ? [localPeerRoleName] : void 0,
              // @ts-ignore
              type: interactionType.toLowerCase()
            }).then(() => handleCreate(id)).catch((err) => setError(err.message));
          }
        },
        "Create ",
        interactionType
      ), /* @__PURE__ */ import_react122.default.createElement(ErrorText, { error: error || titleError })));
    };
    PrevMenu = () => {
      const hmsActions = (0, import_react_sdk66.useHMSActions)();
      const polls = (0, import_react_sdk66.useHMSStore)(import_react_sdk66.selectPolls);
      const sortedPolls = (0, import_react122.useMemo)(
        () => polls?.sort((a, b) => (b?.createdAt?.getTime?.() || 0) - (a?.createdAt?.getTime?.() || 0))?.sort((a, b) => (b?.state === "started" ? 1 : 0) - (a?.state === "started" ? 1 : 0)),
        [polls]
      );
      const permissions = (0, import_react_sdk66.useHMSStore)(import_react_sdk66.selectPermissions);
      (0, import_react122.useEffect)(() => {
        const updatePolls = async () => {
          await hmsActions.interactivityCenter.getPolls();
        };
        updatePolls();
      }, [hmsActions.interactivityCenter]);
      return polls?.length ? /* @__PURE__ */ import_react122.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            width: "100%",
            ...permissions?.pollWrite ? { borderTop: "$space$px solid $border_bright", paddingTop: "$10" } : {}
          }
        },
        /* @__PURE__ */ import_react122.default.createElement(Text, { variant: "h6", css: { c: "$on_surface_high" } }, "Previous Polls and Quizzes"),
        /* @__PURE__ */ import_react122.default.createElement(Flex, { direction: "column", css: { gap: "$10", mt: "$8" } }, sortedPolls?.map((poll) => /* @__PURE__ */ import_react122.default.createElement(InteractionCard, { key: poll.id, id: poll.id, title: poll.title, status: poll.state })))
      ) : null;
    };
    InteractionCard = ({ id, title, status }) => {
      const { setPollState } = usePollViewState();
      return /* @__PURE__ */ import_react122.default.createElement(Flex, { direction: "column", css: { backgroundColor: "$surface_bright", borderRadius: "$1", p: "$8" } }, /* @__PURE__ */ import_react122.default.createElement(Flex, { css: { w: "100%", justifyContent: "space-between", mb: "$sm" } }, /* @__PURE__ */ import_react122.default.createElement(Text, { variant: "sub1", css: { c: "$on_surface_high", fontWeight: "$semiBold" } }, title), /* @__PURE__ */ import_react122.default.createElement(StatusIndicator, { status })), /* @__PURE__ */ import_react122.default.createElement(Flex, { css: { w: "100%", gap: "$4" }, justify: "end" }, /* @__PURE__ */ import_react122.default.createElement(
        Button,
        {
          variant: "primary",
          onClick: () => setPollState({
            [POLL_STATE.pollInView]: id,
            [POLL_STATE.view]: status === "created" ? POLL_VIEWS.CREATE_QUESTIONS : POLL_VIEWS.VOTE
          })
        },
        "View"
      )));
    };
  }
});

// src/Prebuilt/components/Polls/CreateQuestions/DeleteQuestionModal.tsx
var import_react123, import_react_icons53, DeleteQuestionModal;
var init_DeleteQuestionModal = __esm({
  "src/Prebuilt/components/Polls/CreateQuestions/DeleteQuestionModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react123 = __toESM(require("react"));
    import_react_icons53 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Modal();
    init_Text2();
    DeleteQuestionModal = ({
      open,
      setOpen,
      removeQuestion
    }) => {
      return /* @__PURE__ */ import_react123.default.createElement(Dialog.Root, { open }, /* @__PURE__ */ import_react123.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react123.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react123.default.createElement(Dialog.Content, { css: { p: "$10" } }, /* @__PURE__ */ import_react123.default.createElement(Box, null, /* @__PURE__ */ import_react123.default.createElement(
        Flex,
        {
          css: {
            color: "$alert_error_default",
            display: "flex",
            alignItems: "center"
          }
        },
        /* @__PURE__ */ import_react123.default.createElement(import_react_icons53.AlertTriangleIcon, { style: { marginRight: "0.5rem" } }),
        /* @__PURE__ */ import_react123.default.createElement(Text, { variant: "lg", css: { color: "inherit", fontWeight: "$semiBold" } }, "Delete Question?"),
        /* @__PURE__ */ import_react123.default.createElement(
          Box,
          {
            css: {
              ml: "auto",
              color: "$on_surface_medium",
              "&:hover": { color: "$on_surface_high", cursor: "pointer" }
            },
            onClick: () => setOpen(false)
          },
          /* @__PURE__ */ import_react123.default.createElement(import_react_icons53.CrossIcon, null)
        )
      ), /* @__PURE__ */ import_react123.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", mb: "$8", mt: "$4" } }, "The question will be deleted. You can't undo this action."), /* @__PURE__ */ import_react123.default.createElement(Flex, { css: { w: "100%", mt: "$12", gap: "$md" } }, /* @__PURE__ */ import_react123.default.createElement(
        Button,
        {
          variant: "standard",
          outlined: true,
          onClick: () => setOpen(false),
          css: { w: "100%", fontSize: "$md", fontWeight: "$semiBold" }
        },
        "Cancel"
      ), /* @__PURE__ */ import_react123.default.createElement(
        Button,
        {
          css: { w: "100%", fontSize: "$md", fontWeight: "$semiBold" },
          variant: "danger",
          onClick: () => {
            removeQuestion();
            setOpen(false);
          }
        },
        "Delete"
      ))))));
    };
  }
});

// src/Prebuilt/components/Polls/common/Line.tsx
var import_react124, Line;
var init_Line = __esm({
  "src/Prebuilt/components/Polls/common/Line.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react124 = __toESM(require("react"));
    init_Layout();
    Line = () => /* @__PURE__ */ import_react124.default.createElement(Flex, { css: { w: "100%", borderBottom: "1px solid $border_bright", h: "1px", my: "$8" } });
  }
});

// src/Prebuilt/components/Polls/common/OptionInputWithDelete.tsx
var import_react125, import_react_icons54, OptionInputWithDelete;
var init_OptionInputWithDelete = __esm({
  "src/Prebuilt/components/Polls/common/OptionInputWithDelete.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react125 = __toESM(require("react"));
    import_react_icons54 = require("@100mslive/react-icons");
    init_Input2();
    init_IconButton3();
    OptionInputWithDelete = ({
      index,
      option,
      handleOptionTextChange,
      removeOption
    }) => {
      return /* @__PURE__ */ import_react125.default.createElement(import_react125.default.Fragment, null, /* @__PURE__ */ import_react125.default.createElement(
        Input,
        {
          placeholder: `Option ${index + 1}`,
          css: {
            w: "100%",
            backgroundColor: "$surface_bright",
            border: "1px solid $border_bright"
          },
          value: option?.text || "",
          key: index,
          onChange: (event) => handleOptionTextChange(index, event.target.value.trimStart()),
          maxLength: 250
        }
      ), /* @__PURE__ */ import_react125.default.createElement(IconButton_default, { onClick: () => removeOption(index), css: { bg: "transparent", border: "none" } }, /* @__PURE__ */ import_react125.default.createElement(import_react_icons54.TrashIcon, null)));
    };
  }
});

// src/Prebuilt/components/Polls/common/VoteCount.tsx
var import_react126, VoteCount;
var init_VoteCount = __esm({
  "src/Prebuilt/components/Polls/common/VoteCount.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react126 = __toESM(require("react"));
    init_src();
    VoteCount = ({ voteCount }) => {
      return /* @__PURE__ */ import_react126.default.createElement(Flex, { css: { alignItems: "center" } }, voteCount ? /* @__PURE__ */ import_react126.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium" } }, voteCount, "\xA0", voteCount === 1 ? "vote" : "votes") : null);
    };
  }
});

// src/Prebuilt/components/Polls/common/VoteProgress.tsx
var import_react127, VoteProgress;
var init_VoteProgress = __esm({
  "src/Prebuilt/components/Polls/common/VoteProgress.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react127 = __toESM(require("react"));
    init_src();
    VoteProgress = ({ option, totalResponses }) => {
      const showProgress = typeof option.voteCount === "number" && typeof totalResponses === "number" && totalResponses > 0;
      const progressValue = 100 * (option.voteCount || 0) / totalResponses;
      return showProgress ? /* @__PURE__ */ import_react127.default.createElement(Progress.Root, { value: progressValue, css: { mt: "$4" } }, /* @__PURE__ */ import_react127.default.createElement(
        Progress.Content,
        {
          style: {
            transform: `translateX(-${100 - progressValue}%)`
          }
        }
      )) : null;
    };
  }
});

// src/Prebuilt/components/Polls/common/MultipleChoiceOptions.jsx
var import_react128, import_react_icons55, MultipleChoiceOptions, MultipleChoiceOptionInputs;
var init_MultipleChoiceOptions = __esm({
  "src/Prebuilt/components/Polls/common/MultipleChoiceOptions.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react128 = __toESM(require("react"));
    import_react_icons55 = require("@100mslive/react-icons");
    init_src();
    init_OptionInputWithDelete();
    init_VoteCount();
    init_VoteProgress();
    MultipleChoiceOptions = ({
      questionIndex,
      options,
      canRespond,
      totalResponses,
      selectedOptions,
      setSelectedOptions,
      showVoteCount,
      isQuiz,
      correctOptionIndexes,
      localPeerResponse,
      isStopped
    }) => {
      const handleCheckedChange = (checked, index) => {
        const newSelected = new Set(selectedOptions);
        if (checked) {
          newSelected.add(index);
        } else {
          newSelected.delete(index);
        }
        setSelectedOptions(newSelected);
      };
      return /* @__PURE__ */ import_react128.default.createElement(Flex, { direction: "column", css: { gap: "$md", w: "100%", mb: "$md" } }, options.map((option) => {
        return /* @__PURE__ */ import_react128.default.createElement(Flex, { align: "center", key: `${questionIndex}-${option.index}`, css: { w: "100%", gap: "$4" } }, !isStopped || !isQuiz ? /* @__PURE__ */ import_react128.default.createElement(
          Checkbox.Root,
          {
            id: `${questionIndex}-${option.index}`,
            disabled: !canRespond,
            checked: localPeerResponse?.options?.includes(option.index),
            onCheckedChange: (checked) => handleCheckedChange(checked, option.index),
            css: {
              cursor: canRespond ? "pointer" : "not-allowed",
              flexShrink: 0
            }
          },
          /* @__PURE__ */ import_react128.default.createElement(Checkbox.Indicator, null, /* @__PURE__ */ import_react128.default.createElement(import_react_icons55.CheckIcon, { width: 16, height: 16 }))
        ) : null, isStopped && correctOptionIndexes?.includes(option.index) ? /* @__PURE__ */ import_react128.default.createElement(Flex, { align: "center", css: { color: "$on_surface_high" } }, /* @__PURE__ */ import_react128.default.createElement(import_react_icons55.CheckCircleIcon, { height: 20, width: 20 })) : null, /* @__PURE__ */ import_react128.default.createElement(Flex, { direction: "column", css: { flexGrow: "1" } }, /* @__PURE__ */ import_react128.default.createElement(Flex, { css: { w: "100%" } }, /* @__PURE__ */ import_react128.default.createElement(Text, { css: { display: "flex", flexGrow: "1" } }, /* @__PURE__ */ import_react128.default.createElement(Label3, { htmlFor: `${questionIndex}-${option.index}` }, option.text)), showVoteCount && /* @__PURE__ */ import_react128.default.createElement(VoteCount, { voteCount: option.voteCount })), showVoteCount && /* @__PURE__ */ import_react128.default.createElement(VoteProgress, { option, totalResponses })), isStopped && isQuiz && localPeerResponse?.options.includes(option.index) ? /* @__PURE__ */ import_react128.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", maxWidth: "max-content" } }, "Your Answer") : null);
      }));
    };
    MultipleChoiceOptionInputs = ({ isQuiz, options, selectAnswer, handleOptionTextChange, removeOption }) => {
      return /* @__PURE__ */ import_react128.default.createElement(Flex, { direction: "column", css: { gap: "$md", w: "100%", mb: "$md" } }, options.map((option, index) => {
        return /* @__PURE__ */ import_react128.default.createElement(Flex, { align: "center", key: index, css: { w: "100%", gap: "$4" } }, isQuiz && /* @__PURE__ */ import_react128.default.createElement(
          Checkbox.Root,
          {
            onCheckedChange: (checked) => selectAnswer(checked, index),
            checked: option.isCorrectAnswer,
            css: {
              cursor: "pointer",
              width: "$9"
            }
          },
          /* @__PURE__ */ import_react128.default.createElement(Checkbox.Indicator, null, /* @__PURE__ */ import_react128.default.createElement(import_react_icons55.CheckIcon, { width: 16, height: 16 }))
        ), /* @__PURE__ */ import_react128.default.createElement(
          OptionInputWithDelete,
          {
            index,
            option,
            handleOptionTextChange,
            removeOption
          }
        ));
      }));
    };
  }
});

// src/Prebuilt/components/Polls/common/SingleChoiceOptions.jsx
var import_react129, import_react_icons56, SingleChoiceOptions, SingleChoiceOptionInputs;
var init_SingleChoiceOptions = __esm({
  "src/Prebuilt/components/Polls/common/SingleChoiceOptions.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react129 = __toESM(require("react"));
    import_react_icons56 = require("@100mslive/react-icons");
    init_src();
    init_OptionInputWithDelete();
    init_VoteCount();
    init_VoteProgress();
    SingleChoiceOptions = ({
      questionIndex,
      options,
      canRespond,
      setAnswer,
      totalResponses,
      showVoteCount,
      correctOptionIndex,
      isStopped,
      isQuiz,
      localPeerResponse
    }) => {
      return /* @__PURE__ */ import_react129.default.createElement(RadioGroup.Root, { value: localPeerResponse?.option, onValueChange: (value) => setAnswer(value) }, /* @__PURE__ */ import_react129.default.createElement(Flex, { direction: "column", css: { gap: "$md", w: "100%", mb: "$md" } }, options.map((option) => {
        return /* @__PURE__ */ import_react129.default.createElement(Flex, { align: "center", key: `${questionIndex}-${option.index}`, css: { w: "100%", gap: "$4" } }, !isStopped || !isQuiz ? /* @__PURE__ */ import_react129.default.createElement(
          RadioGroup.Item,
          {
            css: {
              background: "none",
              h: "$9",
              w: "$9",
              border: "2px solid",
              borderColor: "$on_surface_high",
              display: "flex",
              flexShrink: 0,
              pt: "$1",
              justifyContent: "center",
              alignItems: "center",
              cursor: canRespond ? "pointer" : "not-allowed",
              '&[data-state="checked"]': {
                borderColor: "$primary_bright",
                borderWidth: "2px"
              }
            },
            disabled: !canRespond,
            value: option.index,
            id: `${questionIndex}-${option.index}`
          },
          /* @__PURE__ */ import_react129.default.createElement(
            RadioGroup.Indicator,
            {
              css: {
                h: "80%",
                w: "80%",
                background: "$primary_bright",
                borderRadius: "$round"
              }
            }
          )
        ) : null, isStopped && correctOptionIndex === option.index && isQuiz ? /* @__PURE__ */ import_react129.default.createElement(Flex, { css: { color: "$on_surface_high" } }, /* @__PURE__ */ import_react129.default.createElement(import_react_icons56.CheckCircleIcon, { height: 20, width: 20 })) : null, /* @__PURE__ */ import_react129.default.createElement(Flex, { direction: "column", css: { flexGrow: "1" } }, /* @__PURE__ */ import_react129.default.createElement(Flex, { css: { w: "100%" } }, /* @__PURE__ */ import_react129.default.createElement(Text, { css: { display: "flex", flexGrow: "1", color: "$on_surface_high" } }, /* @__PURE__ */ import_react129.default.createElement(Label3, { style: { color: "inherit" }, htmlFor: `${questionIndex}-${option.index}` }, option.text)), showVoteCount && /* @__PURE__ */ import_react129.default.createElement(VoteCount, { voteCount: option.voteCount })), showVoteCount && /* @__PURE__ */ import_react129.default.createElement(VoteProgress, { option, totalResponses })), isStopped && isQuiz && localPeerResponse?.option === option.index ? /* @__PURE__ */ import_react129.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", maxWidth: "max-content" } }, "Your Answer") : null);
      })));
    };
    SingleChoiceOptionInputs = ({ isQuiz, options, selectAnswer, handleOptionTextChange, removeOption }) => {
      const correctOptionIndex = options.findIndex((option) => option.isCorrectAnswer);
      return /* @__PURE__ */ import_react129.default.createElement(RadioGroup.Root, { value: correctOptionIndex, onValueChange: selectAnswer }, /* @__PURE__ */ import_react129.default.createElement(Flex, { direction: "column", css: { gap: "$md", w: "100%", mb: "$md" } }, options.map((option, index) => {
        return /* @__PURE__ */ import_react129.default.createElement(Flex, { align: "center", key: `option-${index}`, css: { w: "100%", gap: "$4" } }, isQuiz && /* @__PURE__ */ import_react129.default.createElement(
          RadioGroup.Item,
          {
            css: {
              background: "none",
              w: "$9",
              border: "2px solid",
              borderColor: "$on_surface_high",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              cursor: "pointer",
              '&[data-state="checked"]': {
                borderColor: "$primary_bright",
                borderWidth: "2px"
              }
            },
            value: index
          },
          /* @__PURE__ */ import_react129.default.createElement(
            RadioGroup.Indicator,
            {
              css: {
                h: "80%",
                w: "80%",
                background: "$primary_bright",
                borderRadius: "$round"
              }
            }
          )
        ), /* @__PURE__ */ import_react129.default.createElement(
          OptionInputWithDelete,
          {
            index,
            option,
            handleOptionTextChange,
            removeOption
          }
        ));
      })));
    };
  }
});

// src/Prebuilt/components/Polls/CreateQuestions/QuestionForm.tsx
var import_react130, import_react_icons57, QuestionForm, isValidQuestion;
var init_QuestionForm = __esm({
  "src/Prebuilt/components/Polls/CreateQuestions/QuestionForm.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react130 = __toESM(require("react"));
    import_react_icons57 = require("@100mslive/react-icons");
    init_src();
    init_DropdownTrigger();
    init_DeleteQuestionModal();
    init_useDropdownSelection();
    init_utils2();
    init_Line();
    init_MultipleChoiceOptions();
    init_SingleChoiceOptions();
    init_constants();
    QuestionForm = ({
      question,
      index,
      length,
      onSave,
      removeQuestion,
      isQuiz
    }) => {
      const ref = (0, import_react130.useRef)(null);
      const selectionBg = useDropdownSelection();
      const [openDelete, setOpenDelete] = (0, import_react130.useState)(false);
      const [open, setOpen] = (0, import_react130.useState)(false);
      const [type, setType] = (0, import_react130.useState)(question.type || "single-choice" /* SINGLE_CHOICE */);
      const [text, setText] = (0, import_react130.useState)(question.text);
      const [weight, setWeight] = (0, import_react130.useState)(isQuiz ? 10 : 1);
      const [options, setOptions] = (0, import_react130.useState)(
        question?.options || [
          { text: "", isCorrectAnswer: false },
          { text: "", isCorrectAnswer: false }
        ]
      );
      const isValid = isValidQuestion({
        text,
        type,
        options,
        weight,
        isQuiz
      });
      const handleOptionTextChange = (0, import_react130.useCallback)(
        (index2, text2) => {
          setOptions((options2) => [...options2.slice(0, index2), { ...options2[index2], text: text2 }, ...options2.slice(index2 + 1)]);
        },
        [setOptions]
      );
      const removeOption = (0, import_react130.useCallback)(
        (index2) => setOptions((options2) => {
          const newOptions = [...options2];
          newOptions.splice(index2, 1);
          return newOptions;
        }),
        [setOptions]
      );
      const selectSingleChoiceAnswer = (0, import_react130.useCallback)(
        (answerIndex) => {
          if (!isQuiz) {
            return;
          }
          setOptions(
            (options2) => options2.map((option, index2) => ({
              ...option,
              isCorrectAnswer: index2 === answerIndex
            }))
          );
        },
        [setOptions, isQuiz]
      );
      const selectMultipleChoiceAnswer = (0, import_react130.useCallback)(
        (checked, index2) => {
          if (!isQuiz) {
            return;
          }
          setOptions((options2) => [
            ...options2.slice(0, index2),
            { ...options2[index2], isCorrectAnswer: checked },
            ...options2.slice(index2 + 1)
          ]);
        },
        [setOptions, isQuiz]
      );
      return /* @__PURE__ */ import_react130.default.createElement(import_react130.default.Fragment, null, /* @__PURE__ */ import_react130.default.createElement(Text, { variant: "overline", css: { c: "$on_surface_low", textTransform: "uppercase" } }, "Question ", index + 1, " of ", length), /* @__PURE__ */ import_react130.default.createElement(Text, { variant: "body2", css: { mt: "$4", mb: "$md" } }, "Question Type"), /* @__PURE__ */ import_react130.default.createElement(Dropdown.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react130.default.createElement(
        DialogDropdownTrigger,
        {
          ref,
          title: QUESTION_TYPE_TITLE[type],
          css: {
            backgroundColor: "$surface_bright",
            border: "1px solid $border_bright"
          },
          open
        }
      ), /* @__PURE__ */ import_react130.default.createElement(Dropdown.Portal, null, /* @__PURE__ */ import_react130.default.createElement(Dropdown.Content, { align: "start", sideOffset: 8, css: { w: ref.current?.clientWidth, zIndex: 1e3 } }, Object.keys(QUESTION_TYPE_TITLE).map((value) => {
        return /* @__PURE__ */ import_react130.default.createElement(
          Dropdown.Item,
          {
            key: value,
            onSelect: () => setType(value),
            css: {
              px: "$9",
              bg: type === value ? selectionBg : void 0
            }
          },
          QUESTION_TYPE_TITLE[value]
        );
      })))), /* @__PURE__ */ import_react130.default.createElement(
        TextArea,
        {
          maxLength: 1024,
          placeholder: "Ask a question",
          css: {
            mt: "$md",
            backgroundColor: "$surface_bright",
            border: "1px solid $border_bright",
            minHeight: "$14",
            resize: "vertical",
            maxHeight: "$32"
          },
          value: text,
          onChange: (event) => setText(event.target.value.trimStart())
        }
      ), /* @__PURE__ */ import_react130.default.createElement(Text, { variant: "xs", css: { color: "$on_surface_medium", textAlign: "end", mt: "$4" } }, text?.length || 0, "/1024"), /* @__PURE__ */ import_react130.default.createElement(Line, null), type === "single-choice" /* SINGLE_CHOICE */ || type === "multiple-choice" /* MULTIPLE_CHOICE */ ? /* @__PURE__ */ import_react130.default.createElement(import_react130.default.Fragment, null, /* @__PURE__ */ import_react130.default.createElement(Text, { variant: "body2", css: { mb: "$6", c: "$on_surface_medium" } }, "Options"), isQuiz && /* @__PURE__ */ import_react130.default.createElement(Text, { variant: "xs", css: { c: "$on_surface_medium", mb: "$md" } }, type === "single-choice" /* SINGLE_CHOICE */ ? "Use the radio buttons to indicate the correct answer" : "Use the checkboxes to indicate the correct answer(s)"), type === "single-choice" /* SINGLE_CHOICE */ && /* @__PURE__ */ import_react130.default.createElement(
        SingleChoiceOptionInputs,
        {
          isQuiz,
          options,
          selectAnswer: selectSingleChoiceAnswer,
          handleOptionTextChange,
          removeOption
        }
      ), type === "multiple-choice" /* MULTIPLE_CHOICE */ && /* @__PURE__ */ import_react130.default.createElement(
        MultipleChoiceOptionInputs,
        {
          isQuiz,
          options,
          selectAnswer: selectMultipleChoiceAnswer,
          handleOptionTextChange,
          removeOption
        }
      ), options?.length < 20 && /* @__PURE__ */ import_react130.default.createElement(
        Flex,
        {
          css: {
            c: "$on_surface_medium",
            cursor: "pointer",
            "&:hover": { c: "$on_surface_high" }
          },
          onClick: () => setOptions([...options, { text: "", isCorrectAnswer: false }])
        },
        /* @__PURE__ */ import_react130.default.createElement(import_react_icons57.AddCircleIcon, { style: { position: "relative", left: "-2px" } }),
        /* @__PURE__ */ import_react130.default.createElement(
          Text,
          {
            variant: "sm",
            css: {
              ml: "$4",
              c: "inherit"
            }
          },
          "Add an option"
        )
      ), /* @__PURE__ */ import_react130.default.createElement(Line, null), isQuiz ? /* @__PURE__ */ import_react130.default.createElement(import_react130.default.Fragment, null, /* @__PURE__ */ import_react130.default.createElement(Flex, { justify: "between", align: "center", css: { gap: "$6", w: "100%" } }, /* @__PURE__ */ import_react130.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium" } }, "Point Weightage"), /* @__PURE__ */ import_react130.default.createElement(
        Input,
        {
          type: "number",
          value: weight,
          min: 1,
          max: 999,
          onChange: (e) => setWeight(Math.min(Number(e.target.value), 999)),
          css: {
            backgroundColor: "$surface_bright",
            border: "1px solid $border_bright",
            maxWidth: "$20"
          }
        }
      ))) : null) : null, /* @__PURE__ */ import_react130.default.createElement(Flex, { justify: "end", align: "center", css: { mt: "$12", gap: "$8" } }, /* @__PURE__ */ import_react130.default.createElement(IconButton, { css: { border: "1px solid $border_bright" } }, /* @__PURE__ */ import_react130.default.createElement(import_react_icons57.TrashIcon, { onClick: () => setOpenDelete(!open) })), /* @__PURE__ */ import_react130.default.createElement(
        Tooltip,
        {
          disabled: isValid,
          title: options.length < 2 ? "At least two options must be added" : `Please fill all the fields ${isQuiz ? "and mark the correct answer(s)" : ""} to continue`,
          boxCss: { maxWidth: "$40" }
        },
        /* @__PURE__ */ import_react130.default.createElement(
          Button,
          {
            variant: "standard",
            disabled: !isValid,
            onClick: () => {
              onSave({
                saved: true,
                text,
                type,
                options,
                skippable: false,
                draftID: question.draftID,
                weight
              });
            }
          },
          "Save"
        )
      )), /* @__PURE__ */ import_react130.default.createElement(DeleteQuestionModal, { open: openDelete, setOpen: setOpenDelete, removeQuestion }));
    };
    isValidQuestion = ({
      text,
      type,
      options,
      weight,
      isQuiz = false
    }) => {
      if (!isValidTextInput(text) || !type) {
        return false;
      }
      const everyOptionHasText = options.length > 1 && options.every((option) => option && isValidTextInput(option.text, 1));
      const hasCorrectAnswer = options.some((option) => option.isCorrectAnswer);
      if (!isQuiz) {
        return everyOptionHasText;
      }
      if (isQuiz && weight < 1) {
        return false;
      }
      return everyOptionHasText && hasCorrectAnswer;
    };
  }
});

// src/Prebuilt/components/Polls/CreateQuestions/SavedQuestion.tsx
var import_react131, import_react_icons58, SavedQuestion;
var init_SavedQuestion = __esm({
  "src/Prebuilt/components/Polls/CreateQuestions/SavedQuestion.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react131 = __toESM(require("react"));
    import_react_icons58 = require("@100mslive/react-icons");
    init_src();
    init_constants();
    SavedQuestion = ({
      question,
      index,
      length,
      convertToDraft
    }) => {
      const answerArray = (0, import_react131.useMemo)(() => {
        const updatedAnswerArray = [];
        const { option, options } = question?.answer ?? {};
        if (option) {
          updatedAnswerArray.push(option);
        }
        if (options) {
          updatedAnswerArray.push(...options);
        }
        return updatedAnswerArray;
      }, [question?.answer]);
      return /* @__PURE__ */ import_react131.default.createElement(import_react131.default.Fragment, null, /* @__PURE__ */ import_react131.default.createElement(Text, { variant: "overline", css: { c: "$on_surface_low", textTransform: "uppercase" } }, "Question ", index + 1, " of ", length, ": ", QUESTION_TYPE_TITLE[question.type]), /* @__PURE__ */ import_react131.default.createElement(Text, { variant: "body2", css: { mt: "$4", mb: "$md" } }, question.text), question.options?.map((option, index2) => /* @__PURE__ */ import_react131.default.createElement(Flex, { key: `${option.text}-${index2}`, css: { alignItems: "center", my: "$xs" } }, /* @__PURE__ */ import_react131.default.createElement(Text, { variant: "body2", css: { c: "$on_surface_medium" } }, option.text), (answerArray.includes(index2 + 1) || option.isCorrectAnswer) && /* @__PURE__ */ import_react131.default.createElement(Flex, { css: { color: "$alert_success", mx: "$xs" } }, /* @__PURE__ */ import_react131.default.createElement(import_react_icons58.CheckCircleIcon, { height: 24, width: 24 })))), question.skippable ? /* @__PURE__ */ import_react131.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_low", my: "$md" } }, "Not required to answer") : null, /* @__PURE__ */ import_react131.default.createElement(Flex, { justify: "end", css: { w: "100%", alignItems: "center" } }, /* @__PURE__ */ import_react131.default.createElement(Button, { variant: "standard", css: { fontWeight: "$semiBold" }, onClick: () => convertToDraft(question.draftID) }, "Edit")));
    };
  }
});

// src/Prebuilt/components/Polls/CreateQuestions/CreateQuestions.jsx
function CreateQuestions() {
  const actions = (0, import_react_sdk67.useHMSActions)();
  const { isHLSRunning } = (0, import_react_sdk67.useRecordingStreaming)();
  const togglePollView = usePollViewToggle();
  const { pollInView: id, setPollView } = usePollViewState();
  const interaction = (0, import_react_sdk67.useHMSStore)((0, import_react_sdk67.selectPollByID)(id));
  const [questions, setQuestions] = (0, import_react132.useState)(
    interaction.questions?.length ? getEditableFormat(interaction.questions) : [{ draftID: (0, import_uuid3.v4)() }]
  );
  const isValidPoll = (0, import_react132.useMemo)(() => questions.length > 0 && questions.every(isValidQuestion), [questions]);
  const launchPoll = async () => {
    await actions.interactivityCenter.startPoll(id);
    await sendTimedMetadata(id);
    setPollView(POLL_VIEWS.VOTE);
  };
  const sendTimedMetadata = async (poll_id) => {
    if (poll_id && isHLSRunning) {
      try {
        await actions.sendHLSTimedMetadata([
          {
            payload: `poll:${poll_id}`,
            duration: 100
          }
        ]);
      } catch (e) {
        console.error(e);
      }
    }
  };
  const headingTitle = interaction?.type ? interaction?.type?.[0]?.toUpperCase() + interaction?.type?.slice(1) : "Polls and Quizzes";
  const isQuiz = interaction?.type === "quiz";
  return /* @__PURE__ */ import_react132.default.createElement(Container3, { rounded: true }, /* @__PURE__ */ import_react132.default.createElement(
    ContentHeader,
    {
      content: headingTitle,
      onClose: togglePollView,
      onBack: () => setPollView(POLL_VIEWS.CREATE_POLL_QUIZ)
    }
  ), /* @__PURE__ */ import_react132.default.createElement(Flex, { direction: "column", css: { p: "$10", overflowY: "auto" } }, /* @__PURE__ */ import_react132.default.createElement(Flex, { direction: "column" }, questions.map((question, index) => /* @__PURE__ */ import_react132.default.createElement(
    QuestionCard,
    {
      key: question.draftID,
      question,
      index,
      length: questions.length,
      onSave: async (questionParams) => {
        const updatedQuestions = [...questions.slice(0, index), questionParams, ...questions.slice(index + 1)];
        setQuestions(updatedQuestions);
        const validQuestions = updatedQuestions.filter((question2) => isValidQuestion(question2));
        await actions.interactivityCenter.addQuestionsToPoll(id, validQuestions);
      },
      isQuiz,
      removeQuestion: async (questionID) => {
        const updatedQuestions = questions.filter((questionFromSet) => questionID !== questionFromSet?.draftID);
        setQuestions(updatedQuestions);
        const validQuestions = updatedQuestions.filter((question2) => isValidQuestion(question2));
        await actions.interactivityCenter.addQuestionsToPoll(id, validQuestions);
      },
      convertToDraft: (questionID) => setQuestions((prev) => {
        const copyOfQuestions = [...prev];
        copyOfQuestions.forEach((question2) => {
          if (questionID && question2.draftID === questionID) {
            question2.saved = false;
          }
        });
        return copyOfQuestions;
      })
    }
  ))), /* @__PURE__ */ import_react132.default.createElement(
    Flex,
    {
      css: {
        c: "$on_surface_low",
        my: "$sm",
        cursor: "pointer",
        "&:hover": { c: "$on_surface_medium" }
      },
      onClick: () => setQuestions([...questions, { draftID: (0, import_uuid3.v4)() }])
    },
    /* @__PURE__ */ import_react132.default.createElement(import_react_icons59.AddCircleIcon, null),
    /* @__PURE__ */ import_react132.default.createElement(Text, { variant: "body1", css: { ml: "$md", c: "$inherit" } }, "Add another question")
  ), /* @__PURE__ */ import_react132.default.createElement(Flex, { css: { w: "100%" }, justify: "end" }, /* @__PURE__ */ import_react132.default.createElement(Button, { disabled: !isValidPoll, onClick: async () => launchPoll() }, "Launch ", interaction?.type))));
}
var import_react132, import_uuid3, import_react_sdk67, import_react_icons59, getEditableFormat, QuestionCard;
var init_CreateQuestions = __esm({
  "src/Prebuilt/components/Polls/CreateQuestions/CreateQuestions.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react132 = __toESM(require("react"));
    import_uuid3 = require("uuid");
    import_react_sdk67 = require("@100mslive/react-sdk");
    import_react_icons59 = require("@100mslive/react-icons");
    init_src();
    init_Common();
    init_QuestionForm();
    init_SavedQuestion();
    init_useSidepane();
    init_useUISettings();
    init_constants();
    getEditableFormat = (questions) => {
      const editableQuestions = questions.map((question) => {
        return { ...question, saved: true, draftID: (0, import_uuid3.v4)() };
      });
      return editableQuestions;
    };
    QuestionCard = ({ question, onSave, index, length, removeQuestion, isQuiz, convertToDraft }) => {
      return /* @__PURE__ */ import_react132.default.createElement(Flex, { direction: "column", css: { p: "$md", bg: "$surface_default", r: "$1", mb: "$sm" } }, question.saved ? /* @__PURE__ */ import_react132.default.createElement(SavedQuestion, { question, index, length, convertToDraft }) : /* @__PURE__ */ import_react132.default.createElement(
        QuestionForm,
        {
          question,
          removeQuestion: () => removeQuestion(question.draftID),
          onSave: (params) => onSave(params),
          index,
          length,
          isQuiz
        }
      ));
    };
  }
});

// src/Prebuilt/components/Polls/common/utils.ts
var getFormattedTime;
var init_utils4 = __esm({
  "src/Prebuilt/components/Polls/common/utils.ts"() {
    "use strict";
    init_cjs_shims();
    getFormattedTime = (milliseconds, precise = true) => {
      if (!milliseconds) return "-";
      const totalSeconds = milliseconds / 1e3;
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor(totalSeconds % 3600 / 60);
      const seconds = totalSeconds % 60;
      let formattedTime = "";
      if (hours) {
        formattedTime += `${hours}h `;
      }
      if (minutes || hours) {
        formattedTime += `${minutes}m `;
      }
      if (!precise && (hours || minutes)) {
        return formattedTime;
      }
      formattedTime += `${precise ? seconds.toFixed(3) : Math.floor(seconds)}s`;
      return formattedTime;
    };
  }
});

// src/Prebuilt/components/Polls/Voting/LeaderboardEntry.tsx
var import_react133, import_react_icons60, positionColorMap, LeaderboardEntry;
var init_LeaderboardEntry = __esm({
  "src/Prebuilt/components/Polls/Voting/LeaderboardEntry.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react133 = __toESM(require("react"));
    import_react_icons60 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_utils4();
    positionColorMap = { 1: "#D69516", 2: "#3E3E3E", 3: "#583B0F" };
    LeaderboardEntry = ({
      position,
      score,
      questionCount,
      correctResponses,
      userName,
      maxPossibleScore,
      duration
    }) => {
      return /* @__PURE__ */ import_react133.default.createElement(Flex, { align: "center", justify: "between", css: { my: "$8" } }, /* @__PURE__ */ import_react133.default.createElement(Flex, { align: "center", css: { gap: "$6" } }, /* @__PURE__ */ import_react133.default.createElement(
        Flex,
        {
          align: "center",
          justify: "center",
          css: {
            backgroundColor: positionColorMap[position] || "",
            h: "$10",
            w: "$10",
            borderRadius: "$round",
            color: position > 3 ? "$on_surface_low" : "#FFF",
            fontSize: "$xs",
            fontWeight: "$semiBold"
          }
        },
        position
      ), /* @__PURE__ */ import_react133.default.createElement(Box, null, /* @__PURE__ */ import_react133.default.createElement(Text, { variant: "sm", css: { fontWeight: "$semiBold", color: "$on_surface_high" } }, userName), /* @__PURE__ */ import_react133.default.createElement(Text, { variant: "sm", css: { mt: "$1" } }, score, " / ", maxPossibleScore, " points"))), /* @__PURE__ */ import_react133.default.createElement(Flex, { align: "center", css: { gap: "$4", color: "$on_surface_medium" } }, position === 1 && score ? /* @__PURE__ */ import_react133.default.createElement(import_react_icons60.TrophyFilledIcon, { height: 16, width: 16 }) : null, questionCount ? /* @__PURE__ */ import_react133.default.createElement(import_react133.default.Fragment, null, /* @__PURE__ */ import_react133.default.createElement(import_react_icons60.CheckCircleIcon, { height: 16, width: 16 }), /* @__PURE__ */ import_react133.default.createElement(Text, { variant: "xs" }, correctResponses, "/", questionCount)) : null, duration ? /* @__PURE__ */ import_react133.default.createElement(Flex, { align: "center", css: { gap: "$2", color: "$on_surface_medium" } }, /* @__PURE__ */ import_react133.default.createElement(import_react_icons60.ClockIcon, { height: 16, width: 16 }), /* @__PURE__ */ import_react133.default.createElement(Text, { variant: "xs" }, getFormattedTime(duration))) : null));
    };
  }
});

// src/Prebuilt/components/Polls/Voting/StatisticBox.tsx
var import_react134, StatisticBox;
var init_StatisticBox = __esm({
  "src/Prebuilt/components/Polls/Voting/StatisticBox.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react134 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    StatisticBox = ({ title, value = 0 }) => {
      if (!value && !(typeof value === "number")) {
        return /* @__PURE__ */ import_react134.default.createElement(import_react134.default.Fragment, null);
      }
      return /* @__PURE__ */ import_react134.default.createElement(Box, { css: { p: "$8", background: "$surface_default", borderRadius: "$1", w: "100%" } }, /* @__PURE__ */ import_react134.default.createElement(
        Text,
        {
          variant: "tiny",
          css: { textTransform: "uppercase", color: "$on_surface_medium", fontWeight: "$semiBold", my: "$4" }
        },
        title
      ), /* @__PURE__ */ import_react134.default.createElement(Text, { css: { fontWeight: "$semiBold" } }, value));
    };
  }
});

// src/Prebuilt/components/Polls/Voting/useQuizSummary.tsx
var import_react135, import_react_sdk68, useQuizSummary;
var init_useQuizSummary = __esm({
  "src/Prebuilt/components/Polls/Voting/useQuizSummary.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react135 = require("react");
    import_react_sdk68 = require("@100mslive/react-sdk");
    useQuizSummary = (quizID) => {
      const hmsActions = (0, import_react_sdk68.useHMSActions)();
      const quiz = (0, import_react_sdk68.useHMSStore)((0, import_react_sdk68.selectPollByID)(quizID));
      const [quizLeaderboard, setQuizLeaderboard] = (0, import_react135.useState)();
      const summary = quizLeaderboard?.summary || {
        totalUsers: 0,
        votedUsers: 0,
        avgScore: 0,
        avgTime: 0,
        correctUsers: 0
      };
      const [calculations, setCalculations] = (0, import_react135.useState)({ maxPossibleScore: 0, totalResponses: 0 });
      (0, import_react135.useEffect)(() => {
        const fetchLeaderboardData = async () => {
          if (!quizLeaderboard && quiz && !quiz?.anonymous && quiz.state === "stopped") {
            const leaderboardData = await hmsActions.interactivityCenter.fetchLeaderboard(quiz.id, 0, 50);
            const { maxPossibleScore, totalResponses } = quiz?.questions?.reduce((accumulator, question) => {
              accumulator.maxPossibleScore += question.weight || 0;
              accumulator.totalResponses += question?.responses?.length || 0;
              return accumulator;
            }, calculations) || calculations;
            setQuizLeaderboard(leaderboardData);
            setCalculations({ maxPossibleScore, totalResponses });
          }
        };
        fetchLeaderboardData();
      }, [quiz, hmsActions.interactivityCenter, quizLeaderboard, calculations]);
      return {
        quizLeaderboard,
        summary,
        maxPossibleScore: calculations.maxPossibleScore,
        totalResponses: calculations.totalResponses
      };
    };
  }
});

// src/Prebuilt/components/Polls/Voting/PeerParticipationSummary.tsx
var import_react136, import_react_sdk69, PeerParticipationSummary;
var init_PeerParticipationSummary = __esm({
  "src/Prebuilt/components/Polls/Voting/PeerParticipationSummary.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react136 = __toESM(require("react"));
    import_react_sdk69 = require("@100mslive/react-sdk");
    init_Layout();
    init_Text2();
    init_StatisticBox();
    init_useQuizSummary();
    init_utils4();
    PeerParticipationSummary = ({ quiz }) => {
      const localPeerId = (0, import_react_sdk69.useHMSStore)(import_react_sdk69.selectLocalPeerID);
      const { quizLeaderboard, summary } = useQuizSummary(quiz.id);
      if (quiz.state !== "stopped") {
        return /* @__PURE__ */ import_react136.default.createElement(import_react136.default.Fragment, null);
      }
      const isLocalPeerQuizCreator = localPeerId === quiz.startedBy;
      const peerEntry = quizLeaderboard?.entries.find((entry) => entry.peer?.peerid === localPeerId);
      const boxes = isLocalPeerQuizCreator ? [
        {
          title: "Voted",
          value: `${summary.totalUsers ? (100 * summary.votedUsers / summary.totalUsers).toFixed(0) : 0}% (${summary.votedUsers}/${summary.totalUsers})`
        },
        {
          title: "Correct Answers",
          value: `${summary.totalUsers ? (100 * summary.correctUsers / summary.totalUsers).toFixed(0) : 0}% (${summary.correctUsers}/${summary.totalUsers})`
        },
        // Time in ms
        { title: "Avg. Time Taken", value: getFormattedTime(summary.avgTime) },
        {
          title: "Avg. Score",
          value: Number.isInteger(summary.avgScore) ? summary.avgScore : summary.avgScore.toFixed(2)
        }
      ] : [
        { title: "Your rank", value: peerEntry?.position || "-" },
        { title: "Points", value: peerEntry?.score || 0 },
        // Time in ms
        { title: "Time Taken", value: getFormattedTime(peerEntry?.duration) },
        {
          title: "Correct Answers",
          value: peerEntry?.totalResponses ? `${peerEntry?.correctResponses}/${peerEntry.totalResponses}` : "-"
        }
      ];
      return /* @__PURE__ */ import_react136.default.createElement(Box, null, /* @__PURE__ */ import_react136.default.createElement(Text, { css: { fontWeight: "$semiBold", my: "$8" } }, "Participation Summary"), /* @__PURE__ */ import_react136.default.createElement(Box, { css: { display: "grid", gridTemplateColumns: "1fr 1fr", gap: "$4" } }, boxes.map((box) => /* @__PURE__ */ import_react136.default.createElement(StatisticBox, { key: box.title, title: box.title, value: box.value }))));
    };
  }
});

// src/Prebuilt/components/Polls/Voting/LeaderboardSummary.tsx
var import_react137, import_react_sdk70, import_react_icons61, LeaderboardSummary;
var init_LeaderboardSummary = __esm({
  "src/Prebuilt/components/Polls/Voting/LeaderboardSummary.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react137 = __toESM(require("react"));
    import_react_sdk70 = require("@100mslive/react-sdk");
    import_react_icons61 = require("@100mslive/react-icons");
    init_Layout();
    init_Loading2();
    init_Text2();
    init_Common();
    init_LeaderboardEntry();
    init_PeerParticipationSummary();
    init_useSidepane();
    init_useUISettings();
    init_useQuizSummary();
    init_StatusIndicator();
    init_constants();
    LeaderboardSummary = ({ pollID }) => {
      const quiz = (0, import_react_sdk70.useHMSStore)((0, import_react_sdk70.selectPollByID)(pollID));
      const { quizLeaderboard, maxPossibleScore } = useQuizSummary(pollID);
      const [viewAllEntries, setViewAllEntries] = (0, import_react137.useState)(false);
      const { setPollView } = usePollViewState();
      const toggleSidepane = useSidepaneToggle();
      if (!quiz || !quizLeaderboard)
        return /* @__PURE__ */ import_react137.default.createElement(Flex, { align: "center", justify: "center", css: { size: "100%" } }, /* @__PURE__ */ import_react137.default.createElement(Loading, null));
      const questionCount = quiz.questions?.length || 0;
      return /* @__PURE__ */ import_react137.default.createElement(Container3, { rounded: true }, /* @__PURE__ */ import_react137.default.createElement(Flex, { direction: "column", css: { size: "100%", p: "$8" } }, /* @__PURE__ */ import_react137.default.createElement(Flex, { justify: "between", align: "center", css: { pb: "$6", borderBottom: "1px solid $border_bright", mb: "$8" } }, /* @__PURE__ */ import_react137.default.createElement(Flex, { align: "center", css: { gap: "$4" } }, /* @__PURE__ */ import_react137.default.createElement(
        Flex,
        {
          css: { color: "$on_surface_medium", "&:hover": { color: "$on_surface_high", cursor: "pointer" } },
          onClick: () => setPollView(POLL_VIEWS.VOTE)
        },
        /* @__PURE__ */ import_react137.default.createElement(import_react_icons61.ChevronLeftIcon, null)
      ), /* @__PURE__ */ import_react137.default.createElement(Text, { variant: "lg", css: { fontWeight: "$semiBold" } }, quiz.title), /* @__PURE__ */ import_react137.default.createElement(StatusIndicator, { status: quiz.state })), /* @__PURE__ */ import_react137.default.createElement(
        Flex,
        {
          css: { color: "$on_surface_medium", "&:hover": { color: "$on_surface_high", cursor: "pointer" } },
          onClick: toggleSidepane
        },
        /* @__PURE__ */ import_react137.default.createElement(import_react_icons61.CrossIcon, null)
      )), /* @__PURE__ */ import_react137.default.createElement(Box, { css: { overflowY: "auto", mr: "-$4", pr: "$4" } }, !viewAllEntries ? /* @__PURE__ */ import_react137.default.createElement(PeerParticipationSummary, { quiz }) : null, /* @__PURE__ */ import_react137.default.createElement(Text, { variant: "sm", css: { fontWeight: "$semiBold", mt: "$4" } }, "Leaderboard"), /* @__PURE__ */ import_react137.default.createElement(Text, { variant: "xs", css: { color: "$on_surface_medium" } }, "Based on score and time taken to cast the correct answer"), /* @__PURE__ */ import_react137.default.createElement(
        Box,
        {
          css: {
            mt: "$8",
            overflowY: "auto",
            flex: viewAllEntries ? "1 1 0" : "unset",
            mr: viewAllEntries ? "-$6" : "unset",
            px: viewAllEntries ? "0" : "$4",
            pr: viewAllEntries ? "$6" : "$4",
            backgroundColor: viewAllEntries ? "" : "$surface_default",
            borderRadius: "$1"
          }
        },
        quizLeaderboard?.entries && quizLeaderboard.entries.slice(0, viewAllEntries ? void 0 : 5).map((question) => /* @__PURE__ */ import_react137.default.createElement(
          LeaderboardEntry,
          {
            key: question.position,
            position: question.position,
            score: question.score,
            questionCount,
            correctResponses: question.correctResponses,
            userName: question.peer.username || "",
            maxPossibleScore,
            duration: question.duration
          }
        )),
        quizLeaderboard?.entries?.length > 5 && !viewAllEntries ? /* @__PURE__ */ import_react137.default.createElement(
          Flex,
          {
            align: "center",
            justify: "end",
            css: {
              w: "100%",
              borderTop: "1px solid $border_bright",
              cursor: "pointer",
              color: "$on_surface_high",
              p: "$6 $2"
            },
            onClick: () => setViewAllEntries(true)
          },
          /* @__PURE__ */ import_react137.default.createElement(Text, { variant: "sm" }, "View All"),
          " ",
          /* @__PURE__ */ import_react137.default.createElement(import_react_icons61.ChevronRightIcon, null)
        ) : null
      ))));
    };
  }
});

// src/Prebuilt/components/Polls/Voting/QuestionCard.jsx
var import_react138, import_ts_pattern9, import_react_sdk71, import_react_icons62, QuestionCard2, QuestionActions;
var init_QuestionCard = __esm({
  "src/Prebuilt/components/Polls/Voting/QuestionCard.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react138 = __toESM(require("react"));
    import_ts_pattern9 = require("ts-pattern");
    import_react_sdk71 = require("@100mslive/react-sdk");
    import_react_icons62 = require("@100mslive/react-icons");
    init_src();
    init_utils2();
    init_MultipleChoiceOptions();
    init_SingleChoiceOptions();
    QuestionCard2 = ({
      pollID,
      isQuiz,
      startedBy,
      pollState,
      index,
      totalQuestions,
      result,
      type,
      text,
      options = [],
      answer,
      localPeerResponse,
      updateSavedResponses,
      rolesThatCanViewResponses
    }) => {
      const actions = (0, import_react_sdk71.useHMSActions)();
      const localPeer = (0, import_react_sdk71.useHMSStore)(import_react_sdk71.selectLocalPeer);
      const isLocalPeerCreator = localPeer?.id === startedBy;
      const localPeerRoleName = (0, import_react_sdk71.useHMSStore)(import_react_sdk71.selectLocalPeerRoleName);
      const roleCanViewResponse = !rolesThatCanViewResponses || rolesThatCanViewResponses.length === 0 || rolesThatCanViewResponses.includes(localPeerRoleName || "");
      const [localPeerChoice, setLocalPeerChoice] = (0, import_react138.useState)(localPeerResponse);
      (0, import_react138.useEffect)(() => {
        setLocalPeerChoice(localPeerResponse);
      }, [localPeerResponse]);
      const showVoteCount = roleCanViewResponse && (localPeerChoice || isLocalPeerCreator && pollState === "stopped") && !isQuiz;
      const isLive = pollState === "started";
      const pollEnded = pollState === "stopped";
      const canRespond = isLive && !localPeerChoice;
      const startTime = (0, import_react138.useRef)(Date.now());
      const isCorrectAnswer = checkCorrectAnswer(answer, localPeerChoice, type);
      const [singleOptionAnswer, setSingleOptionAnswer] = (0, import_react138.useState)();
      const [multipleOptionAnswer, setMultipleOptionAnswer] = (0, import_react138.useState)(/* @__PURE__ */ new Set());
      const [showOptions, setShowOptions] = (0, import_react138.useState)(true);
      const respondedToQuiz = isQuiz && localPeerChoice && !localPeerChoice.skipped;
      const isValidVote = (0, import_react138.useMemo)(() => {
        if (type === "single-choice" /* SINGLE_CHOICE */) {
          return singleOptionAnswer !== void 0;
        } else if (type === "multiple-choice" /* MULTIPLE_CHOICE */) {
          return multipleOptionAnswer.size > 0;
        }
      }, [singleOptionAnswer, multipleOptionAnswer, type]);
      const handleVote = (0, import_react138.useCallback)(async () => {
        if (!isValidVote) {
          return;
        }
        const submittedResponse = {
          questionIndex: index,
          option: singleOptionAnswer,
          options: Array.from(multipleOptionAnswer),
          duration: Date.now() - startTime.current
        };
        await actions.interactivityCenter.addResponsesToPoll(pollID, [submittedResponse]);
        updateSavedResponses((prev) => {
          const prevCopy = { ...prev };
          prevCopy[index] = { option: singleOptionAnswer, options: Array.from(multipleOptionAnswer) };
          return prevCopy;
        });
        startTime.current = Date.now();
      }, [
        isValidVote,
        index,
        singleOptionAnswer,
        multipleOptionAnswer,
        actions.interactivityCenter,
        pollID,
        updateSavedResponses
      ]);
      return /* @__PURE__ */ import_react138.default.createElement(
        Box,
        {
          css: {
            backgroundColor: "$surface_bright",
            borderRadius: "$1",
            p: "$md",
            mt: "$md",
            border: respondedToQuiz && !isLive ? `1px solid ${isCorrectAnswer ? "$alert_success" : "$alert_error_default"}` : "none"
          }
        },
        /* @__PURE__ */ import_react138.default.createElement(Flex, { align: "center", justify: "between" }, /* @__PURE__ */ import_react138.default.createElement(
          Text,
          {
            variant: "caption",
            css: {
              color: (0, import_ts_pattern9.match)({ respondedToQuiz, isLive, isCorrectAnswer }).when(
                ({ respondedToQuiz: respondedToQuiz2, isLive: isLive2 }) => respondedToQuiz2 && !isLive2,
                ({ isCorrectAnswer: isCorrectAnswer2 }) => isCorrectAnswer2 ? "$alert_success" : "$alert_error_default"
              ).otherwise(() => "$on_surface_low"),
              fontWeight: "$semiBold",
              display: "flex",
              alignItems: "center",
              gap: "$4"
            }
          },
          (0, import_ts_pattern9.match)({ respondedToQuiz, pollEnded, isCorrectAnswer }).when(
            ({ respondedToQuiz: respondedToQuiz2, pollEnded: pollEnded2 }) => respondedToQuiz2 && pollEnded2,
            ({ isCorrectAnswer: isCorrectAnswer2 }) => {
              return isCorrectAnswer2 ? /* @__PURE__ */ import_react138.default.createElement(import_react_icons62.CheckCircleIcon, { height: 16, width: 16 }) : /* @__PURE__ */ import_react138.default.createElement(import_react_icons62.CrossCircleIcon, { height: 16, width: 16 });
            }
          ).otherwise(() => null),
          "QUESTION ",
          index,
          " OF ",
          totalQuestions,
          ": ",
          type.toUpperCase()
        )),
        /* @__PURE__ */ import_react138.default.createElement(Flex, { justify: "between", css: { my: "$md" } }, /* @__PURE__ */ import_react138.default.createElement(Text, { css: { color: "$on_surface_high" } }, text), /* @__PURE__ */ import_react138.default.createElement(
          Box,
          {
            css: { color: "$on_surface_medium", "&:hover": { color: "$on_surface_high", cursor: "pointer" } },
            onClick: () => setShowOptions((prev) => !prev)
          },
          /* @__PURE__ */ import_react138.default.createElement(
            import_react_icons62.ChevronDownIcon,
            {
              style: { transform: showOptions ? "rotate(180deg)" : "rotate(0deg)", transition: "transform 0.3s ease" }
            }
          )
        )),
        /* @__PURE__ */ import_react138.default.createElement(
          Box,
          {
            css: { maxHeight: showOptions ? "$80" : "0", transition: "max-height 0.3s ease", overflowY: "auto", mb: "$4" }
          },
          type === "single-choice" /* SINGLE_CHOICE */ ? /* @__PURE__ */ import_react138.default.createElement(
            SingleChoiceOptions,
            {
              key: index,
              questionIndex: index,
              isQuiz,
              canRespond,
              correctOptionIndex: answer?.option,
              options,
              setAnswer: setSingleOptionAnswer,
              totalResponses: result?.totalResponses,
              showVoteCount,
              localPeerResponse: localPeerChoice,
              isStopped: pollState === "stopped"
            }
          ) : null,
          type === "multiple-choice" /* MULTIPLE_CHOICE */ ? /* @__PURE__ */ import_react138.default.createElement(
            MultipleChoiceOptions,
            {
              questionIndex: index,
              isQuiz,
              canRespond,
              correctOptionIndexes: answer?.options,
              options,
              selectedOptions: multipleOptionAnswer,
              setSelectedOptions: setMultipleOptionAnswer,
              totalResponses: result?.totalResponses,
              showVoteCount,
              localPeerResponse: localPeerChoice,
              isStopped: pollState === "stopped"
            }
          ) : null
        ),
        isLive && /* @__PURE__ */ import_react138.default.createElement(QuestionActions, { isValidVote, onVote: handleVote, response: localPeerChoice, isQuiz })
      );
    };
    QuestionActions = ({ isValidVote, response, isQuiz, onVote }) => {
      return /* @__PURE__ */ import_react138.default.createElement(Flex, { align: "center", justify: "end", css: { gap: "$4", w: "100%" } }, response ? /* @__PURE__ */ import_react138.default.createElement(Text, { css: { fontWeight: "$semiBold", color: "$on_surface_medium" } }, response.skipped ? "Skipped" : null, isQuiz && !response.skipped ? "Answered" : null, !isQuiz && !response.skipped ? "Voted" : null) : /* @__PURE__ */ import_react138.default.createElement(Button, { css: { p: "$xs $10", fontWeight: "$semiBold" }, disabled: !isValidVote, onClick: onVote }, isQuiz ? "Answer" : "Vote"));
    };
  }
});

// src/Prebuilt/components/Polls/Voting/StandardVoting.tsx
var import_react139, StandardView;
var init_StandardVoting = __esm({
  "src/Prebuilt/components/Polls/Voting/StandardVoting.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react139 = __toESM(require("react"));
    init_PeerParticipationSummary();
    init_QuestionCard();
    StandardView = ({
      poll,
      localPeerResponses,
      updateSavedResponses
    }) => {
      if (!poll?.questions) {
        return null;
      }
      const isQuiz = poll.type === "quiz";
      const isStopped = poll.state === "stopped";
      return /* @__PURE__ */ import_react139.default.createElement(import_react139.default.Fragment, null, isQuiz && isStopped ? /* @__PURE__ */ import_react139.default.createElement(PeerParticipationSummary, { quiz: poll }) : null, poll.questions?.map((question, index) => /* @__PURE__ */ import_react139.default.createElement(
        QuestionCard2,
        {
          pollID: poll.id,
          isQuiz,
          startedBy: poll.startedBy,
          pollState: poll.state,
          key: `${question.text}-${index}`,
          index: question.index,
          text: question.text,
          type: question.type,
          result: question.result,
          totalQuestions: poll.questions?.length || 0,
          options: question.options,
          localPeerResponse: localPeerResponses?.[question.index],
          answer: question.answer,
          updateSavedResponses,
          rolesThatCanViewResponses: poll.rolesThatCanViewResponses
        }
      )));
    };
  }
});

// src/Prebuilt/components/Polls/Voting/TimedVoting.tsx
var import_react140, TimedView;
var init_TimedVoting = __esm({
  "src/Prebuilt/components/Polls/Voting/TimedVoting.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react140 = __toESM(require("react"));
    init_QuestionCard();
    init_utils2();
    TimedView = ({
      poll,
      localPeerResponses,
      updateSavedResponses
    }) => {
      const [currentIndex, setCurrentIndex] = (0, import_react140.useState)(getIndexToShow(localPeerResponses));
      const activeQuestion = poll.questions?.find((question) => question.index === currentIndex);
      const attemptedAll = (poll.questions?.length || 0) < currentIndex;
      (0, import_react140.useEffect)(() => {
        setCurrentIndex(getIndexToShow(localPeerResponses));
      }, [localPeerResponses]);
      if (!activeQuestion && !attemptedAll || !poll.questions?.length) {
        return null;
      }
      return /* @__PURE__ */ import_react140.default.createElement(import_react140.default.Fragment, null, poll.questions.map((question) => {
        return attemptedAll || activeQuestion?.index === question.index ? /* @__PURE__ */ import_react140.default.createElement(
          QuestionCard2,
          {
            key: question.index,
            pollID: poll.id,
            isQuiz: poll.type === "quiz",
            startedBy: poll.startedBy,
            pollState: poll.state,
            index: question.index,
            text: question.text,
            type: question.type,
            result: question?.result,
            totalQuestions: poll.questions?.length || 0,
            options: question.options,
            localPeerResponse: localPeerResponses?.[question.index],
            answer: question.answer,
            rolesThatCanViewResponses: poll.rolesThatCanViewResponses,
            updateSavedResponses
          }
        ) : null;
      }));
    };
  }
});

// src/Prebuilt/components/Polls/Voting/Voting.tsx
var import_react141, import_react_sdk72, import_react_icons63, Voting;
var init_Voting = __esm({
  "src/Prebuilt/components/Polls/Voting/Voting.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react141 = __toESM(require("react"));
    import_react_sdk72 = require("@100mslive/react-sdk");
    import_react_icons63 = require("@100mslive/react-icons");
    init_src();
    init_Common();
    init_StandardVoting();
    init_TimedVoting();
    init_useUISettings();
    init_utils2();
    init_StatusIndicator();
    init_constants();
    Voting = ({ id, toggleVoting }) => {
      const actions = (0, import_react_sdk72.useHMSActions)();
      const poll = (0, import_react_sdk72.useHMSStore)((0, import_react_sdk72.selectPollByID)(id));
      const pollCreatorName = (0, import_react_sdk72.useHMSStore)((0, import_react_sdk72.selectPeerNameByID)(poll?.createdBy));
      const permissions = (0, import_react_sdk72.useHMSStore)(import_react_sdk72.selectPermissions);
      const canEndActivity = !!permissions?.pollWrite;
      const { setPollView } = usePollViewState();
      const showSingleView = poll?.type === "quiz" && poll.state === "started";
      const fetchedInitialResponses = (0, import_react141.useRef)(false);
      const [savedResponses, setSavedResponses] = (0, import_react141.useState)({});
      const localPeer = (0, import_react_sdk72.useHMSStore)(import_react_sdk72.selectLocalPeer);
      const localPeerId = localPeer?.id;
      const customerUserId = localPeer?.customerUserId;
      (0, import_react141.useEffect)(() => {
        fetchedInitialResponses.current = false;
        setSavedResponses({});
      }, [id, setSavedResponses]);
      (0, import_react141.useEffect)(() => {
        const getResponses = async () => {
          if (poll && actions.interactivityCenter && !fetchedInitialResponses.current) {
            await actions.interactivityCenter.getPollResponses(poll, true);
            fetchedInitialResponses.current = true;
          }
        };
        getResponses();
      }, [poll, actions.interactivityCenter]);
      (0, import_react141.useEffect)(() => {
        if (poll?.questions) {
          const localPeerResponses = getPeerResponses(poll.questions, localPeerId, customerUserId);
          localPeerResponses?.forEach((response) => {
            if (response) {
              setSavedResponses((prev) => {
                const prevCopy = { ...prev };
                prevCopy[response[0]?.questionIndex] = { option: response[0]?.option, options: response[0]?.options };
                return prevCopy;
              });
            }
          });
        }
      }, [localPeerId, poll?.questions, id, customerUserId]);
      if (!poll) {
        return null;
      }
      const canViewLeaderboard = poll.type === "quiz" && poll.state === "stopped" && !poll.anonymous;
      return /* @__PURE__ */ import_react141.default.createElement(Container3, { rounded: true }, /* @__PURE__ */ import_react141.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            gap: "$4",
            py: "$6",
            px: "$8",
            my: "$4",
            w: "100%",
            color: "$on_surface_high",
            borderBottom: "1px solid $border_default"
          }
        },
        /* @__PURE__ */ import_react141.default.createElement(
          Flex,
          {
            onClick: () => setPollView(POLL_VIEWS.CREATE_POLL_QUIZ),
            css: { cursor: "pointer", c: "$on_surface_medium", "&:hover": { color: "$on_surface_high" } }
          },
          /* @__PURE__ */ import_react141.default.createElement(import_react_icons63.ChevronLeftIcon, null)
        ),
        /* @__PURE__ */ import_react141.default.createElement(Text, { variant: "h6" }, poll.title),
        /* @__PURE__ */ import_react141.default.createElement(StatusIndicator, { status: poll.state }),
        /* @__PURE__ */ import_react141.default.createElement(
          Box,
          {
            css: {
              marginLeft: "auto",
              cursor: "pointer",
              "&:hover": { opacity: "0.8" },
              height: "fit-content"
            }
          },
          /* @__PURE__ */ import_react141.default.createElement(import_react_icons63.CrossIcon, { onClick: toggleVoting })
        )
      ), /* @__PURE__ */ import_react141.default.createElement(Flex, { direction: "column", css: { p: "$8 $10", flex: "1 1 0", overflowY: "auto" } }, poll.state === "started" ? /* @__PURE__ */ import_react141.default.createElement(Text, { css: { color: "$on_surface_medium", fontWeight: "$semiBold" } }, pollCreatorName || "Participant", " started a ", poll.type) : null, showSingleView ? /* @__PURE__ */ import_react141.default.createElement(TimedView, { poll, localPeerResponses: savedResponses, updateSavedResponses: setSavedResponses }) : /* @__PURE__ */ import_react141.default.createElement(StandardView, { poll, localPeerResponses: savedResponses, updateSavedResponses: setSavedResponses })), /* @__PURE__ */ import_react141.default.createElement(
        Flex,
        {
          css: { w: "100%", justifyContent: "end", alignItems: "center", p: "$8", borderTop: "1px solid $border_bright" }
        },
        poll.state === "started" && canEndActivity && /* @__PURE__ */ import_react141.default.createElement(
          Button,
          {
            variant: "danger",
            css: { fontWeight: "$semiBold", w: "max-content" },
            onClick: () => actions.interactivityCenter.stopPoll(id)
          },
          "End ",
          poll.type
        ),
        canViewLeaderboard ? /* @__PURE__ */ import_react141.default.createElement(Button, { css: { fontWeight: "$semiBold", w: "max-content" }, onClick: () => setPollView(POLL_VIEWS.RESULTS) }, "View Leaderboard") : null
      ));
    };
  }
});

// src/Prebuilt/components/Polls/Polls.tsx
var import_react142, Polls;
var init_Polls = __esm({
  "src/Prebuilt/components/Polls/Polls.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react142 = __toESM(require("react"));
    init_PollsQuizMenu();
    init_CreateQuestions();
    init_LeaderboardSummary();
    init_Voting();
    init_useSidepane();
    init_useUISettings();
    init_constants();
    Polls = () => {
      const togglePollView = usePollViewToggle();
      const { pollInView: pollID, view } = usePollViewState();
      if (view === POLL_VIEWS.CREATE_POLL_QUIZ) {
        return /* @__PURE__ */ import_react142.default.createElement(PollsQuizMenu, null);
      } else if (view === POLL_VIEWS.CREATE_QUESTIONS) {
        return /* @__PURE__ */ import_react142.default.createElement(CreateQuestions, null);
      } else if (view === POLL_VIEWS.VOTE) {
        return /* @__PURE__ */ import_react142.default.createElement(Voting, { toggleVoting: togglePollView, id: pollID });
      } else if (view === POLL_VIEWS.RESULTS) {
        return /* @__PURE__ */ import_react142.default.createElement(LeaderboardSummary, { pollID });
      } else {
        return null;
      }
    };
  }
});

// src/Prebuilt/components/Header/HeaderComponents.jsx
var import_react143, import_react_sdk73, import_react_icons64, SpeakerTag, LogoImg, Logo;
var init_HeaderComponents = __esm({
  "src/Prebuilt/components/Header/HeaderComponents.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react143 = __toESM(require("react"));
    import_react_sdk73 = require("@100mslive/react-sdk");
    import_react_icons64 = require("@100mslive/react-icons");
    init_src();
    init_roomLayoutProvider();
    SpeakerTag = () => {
      const dominantSpeaker = (0, import_react_sdk73.useHMSStore)(import_react_sdk73.selectDominantSpeaker);
      return dominantSpeaker && dominantSpeaker.name && /* @__PURE__ */ import_react143.default.createElement(
        Flex,
        {
          align: "center",
          justify: "center",
          css: { flex: "1 1 0", color: "$on_surface_high", "@md": { display: "none" } }
        },
        /* @__PURE__ */ import_react143.default.createElement(import_react_icons64.VolumeOneIcon, null),
        /* @__PURE__ */ import_react143.default.createElement(Text, { variant: "sm", css: { ...textEllipsis(200), ml: "$2" }, title: dominantSpeaker.name }, dominantSpeaker.name)
      );
    };
    LogoImg = styled("img", {
      maxHeight: "$14",
      w: "auto",
      objectFit: "contain",
      "@md": {
        maxHeight: "$12"
      }
    });
    Logo = () => {
      const roomLayout = useRoomLayout();
      const logo = roomLayout?.logo?.url;
      const [hideImage, setHideImage] = (0, import_react143.useState)(false);
      (0, import_react143.useEffect)(() => {
        if (hideImage) {
          setHideImage(false);
        }
      }, [logo]);
      return logo && !hideImage ? /* @__PURE__ */ import_react143.default.createElement(
        LogoImg,
        {
          src: logo,
          alt: "Brand Logo",
          onError: (e) => {
            e.target.onerror = null;
            setHideImage(true);
          }
        }
      ) : null;
    };
  }
});

// src/Prebuilt/components/RoomDetails/Duration.tsx
var import_react144, Duration;
var init_Duration = __esm({
  "src/Prebuilt/components/RoomDetails/Duration.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react144 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    init_utils4();
    Duration = ({ timestamp }) => {
      const [elapsedTime, setElapsedTime] = (0, import_react144.useState)(getFormattedTime(Date.now() - timestamp.getTime(), false));
      (0, import_react144.useEffect)(() => {
        const timerAdded = setInterval(() => {
          setElapsedTime(getFormattedTime(Date.now() - timestamp.getTime(), false));
        }, 1e3);
        return () => {
          clearInterval(timerAdded);
        };
      }, [timestamp]);
      return /* @__PURE__ */ import_react144.default.createElement(Flex, { css: { color: "$on_surface_medium" } }, /* @__PURE__ */ import_react144.default.createElement(Text, { variant: "xs", css: { color: "inherit" } }, "Started ", elapsedTime, " ago"));
    };
  }
});

// src/Prebuilt/components/RoomDetails/RoomDetailsRow.tsx
var import_react145, RoomDetailsRow;
var init_RoomDetailsRow = __esm({
  "src/Prebuilt/components/RoomDetails/RoomDetailsRow.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react145 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    init_Duration();
    RoomDetailsRow = ({ details }) => {
      return /* @__PURE__ */ import_react145.default.createElement(Flex, { align: "center", css: { w: "100%" } }, details.map((detail, index) => /* @__PURE__ */ import_react145.default.createElement(import_react145.default.Fragment, { key: detail.toString() }, index > 0 && /* @__PURE__ */ import_react145.default.createElement(Box, { css: { h: "$2", w: "$2", r: "$round", bg: "$on_surface_medium", m: "0 $2" } }), typeof detail !== "string" ? /* @__PURE__ */ import_react145.default.createElement(Duration, { timestamp: detail }) : /* @__PURE__ */ import_react145.default.createElement(Text, { variant: "xs", css: { c: "$on_surface_medium" } }, detail))));
    };
  }
});

// src/Prebuilt/components/RoomDetails/RoomDetailsPane.tsx
var import_react146, import_react_icons65, RoomDetailsPane, ShowRoomDetailHeader;
var init_RoomDetailsPane = __esm({
  "src/Prebuilt/components/RoomDetails/RoomDetailsPane.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react146 = __toESM(require("react"));
    import_react_icons65 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_HeaderComponents();
    init_RoomDetailsRow();
    init_useRoomLayoutScreen();
    init_useSidepane();
    init_hooks();
    init_constants();
    RoomDetailsPane = () => {
      const { description } = useRoomLayoutHeader();
      const isMwebHLSStream = useMobileHLSStream();
      return /* @__PURE__ */ import_react146.default.createElement(Box, { css: { flex: "1 1 0", position: "relative" } }, isMwebHLSStream ? /* @__PURE__ */ import_react146.default.createElement(Flex, { direction: "row", align: "center", gap: "2" }, /* @__PURE__ */ import_react146.default.createElement(Logo, null), /* @__PURE__ */ import_react146.default.createElement(ShowRoomDetailHeader, null)) : /* @__PURE__ */ import_react146.default.createElement(ShowRoomDetailHeader, null), /* @__PURE__ */ import_react146.default.createElement(Box, { css: { mt: "$10" } }, /* @__PURE__ */ import_react146.default.createElement(Text, { css: { color: "$on_surface_high", fontWeight: "$semiBold", display: isMwebHLSStream ? "none" : "" } }, "Description"), /* @__PURE__ */ import_react146.default.createElement(Text, { variant: "sm", css: { c: "$on_surface_medium" } }, description)));
    };
    ShowRoomDetailHeader = () => {
      const { title, details } = useRoomLayoutHeader();
      const toggleDetailsPane = useSidepaneToggle(SIDE_PANE_OPTIONS.ROOM_DETAILS);
      const isMwebHLSStream = useMobileHLSStream();
      return /* @__PURE__ */ import_react146.default.createElement(Flex, { direction: "column", css: { position: "sticky", top: 0, bg: "$surface_dim" } }, /* @__PURE__ */ import_react146.default.createElement(Flex, { justify: "between", align: "center", css: { w: "100%" } }, /* @__PURE__ */ import_react146.default.createElement(Text, { variant: "h6" }, title), !isMwebHLSStream && /* @__PURE__ */ import_react146.default.createElement(
        Flex,
        {
          onClick: toggleDetailsPane,
          css: {
            color: "$on_surface_high",
            cursor: "pointer",
            "&:hover": { opacity: "0.8" }
          }
        },
        /* @__PURE__ */ import_react146.default.createElement(import_react_icons65.CrossIcon, null)
      )), /* @__PURE__ */ import_react146.default.createElement(RoomDetailsRow, { details }));
    };
  }
});

// src/Prebuilt/components/Chat/ChatSelector.tsx
var import_react147, import_react_use22, import_react_sdk74, import_react_icons66, ChatDotIcon, SelectorItem, SelectorHeader, Everyone, RoleItem, PeerItem, VirtualizedSelectItemList, ChatSelector;
var init_ChatSelector = __esm({
  "src/Prebuilt/components/Chat/ChatSelector.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react147 = __toESM(require("react"));
    import_react_use22 = require("react-use");
    import_react_sdk74 = require("@100mslive/react-sdk");
    import_react_icons66 = require("@100mslive/react-icons");
    init_src();
    init_Theme();
    init_ParticipantList();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_hooks();
    init_constants();
    ChatDotIcon = () => {
      return /* @__PURE__ */ import_react147.default.createElement(Box, { css: { size: "$6", bg: "$primary_default", mx: "$2", r: "$round" } });
    };
    SelectorItem = ({
      value,
      active,
      onClick,
      unreadCount,
      icon = void 0
    }) => {
      const isMobile = (0, import_react_use22.useMedia)(config.media.md);
      const Root28 = !isMobile ? Dropdown.Item : ({ children, ...rest }) => /* @__PURE__ */ import_react147.default.createElement(Flex, { ...rest, css: { p: "$6 $8", ...rest.css } }, children);
      return /* @__PURE__ */ import_react147.default.createElement(
        Root28,
        {
          "data-testid": "chat_members",
          css: { align: "center", px: "$10", py: "$4", bg: "$surface_default" },
          onClick
        },
        /* @__PURE__ */ import_react147.default.createElement(
          Text,
          {
            variant: "sm",
            css: { display: "flex", alignItems: "center", gap: "$4", fontWeight: "$semiBold", color: "$on_surface_high" }
          },
          icon,
          value
        ),
        /* @__PURE__ */ import_react147.default.createElement(Flex, { align: "center", css: { ml: "auto", color: "$on_primary_high" } }, unreadCount > 0 && /* @__PURE__ */ import_react147.default.createElement(Tooltip, { title: `${unreadCount} unread` }, /* @__PURE__ */ import_react147.default.createElement(Box, { css: { mr: active ? "$3" : 0 } }, /* @__PURE__ */ import_react147.default.createElement(ChatDotIcon, null))), active && /* @__PURE__ */ import_react147.default.createElement(import_react_icons66.CheckIcon, { width: 16, height: 16 }))
      );
    };
    SelectorHeader = import_react147.default.memo(
      ({ isHorizontalDivider = true, children }) => {
        return /* @__PURE__ */ import_react147.default.createElement(Box, { css: { flexShrink: 0 } }, isHorizontalDivider && /* @__PURE__ */ import_react147.default.createElement(HorizontalDivider, { space: 4 }), /* @__PURE__ */ import_react147.default.createElement(
          Text,
          {
            variant: "overline",
            css: { p: "$4 $10", fontWeight: "$semiBold", textTransform: "uppercase", color: "$on_surface_medium" }
          },
          children
        ));
      }
    );
    Everyone = import_react147.default.memo(({ active }) => {
      const unreadCount = (0, import_react_sdk74.useHMSStore)(import_react_sdk74.selectUnreadHMSMessagesCount);
      const [, setPeerSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.PEER);
      const [, setRoleSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.ROLE);
      return /* @__PURE__ */ import_react147.default.createElement(
        SelectorItem,
        {
          value: "Everyone",
          icon: /* @__PURE__ */ import_react147.default.createElement(import_react_icons66.PeopleIcon, null),
          active,
          unreadCount,
          onClick: () => {
            setPeerSelector({});
            setRoleSelector("");
          }
        }
      );
    });
    RoleItem = import_react147.default.memo(({ role, active }) => {
      const unreadCount = (0, import_react_sdk74.useHMSStore)((0, import_react_sdk74.selectMessagesUnreadCountByRole)(role));
      const [, setPeerSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.PEER);
      const [, setRoleSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.ROLE);
      return /* @__PURE__ */ import_react147.default.createElement(
        SelectorItem,
        {
          value: role,
          active,
          unreadCount,
          onClick: () => {
            setPeerSelector({});
            setRoleSelector(role);
          }
        }
      );
    });
    PeerItem = ({ peerId, name, active }) => {
      const unreadCount = (0, import_react_sdk74.useHMSStore)((0, import_react_sdk74.selectMessagesUnreadCountByPeerID)(peerId));
      const [, setPeerSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.PEER);
      const [, setRoleSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.ROLE);
      return /* @__PURE__ */ import_react147.default.createElement(
        SelectorItem,
        {
          value: name,
          active,
          unreadCount,
          onClick: () => {
            setPeerSelector({ id: peerId, name });
            setRoleSelector("");
          }
        }
      );
    };
    VirtualizedSelectItemList = ({
      peers,
      selectedRole,
      selectedPeerId,
      searchValue,
      isPublicChatEnabled
    }) => {
      const roles = useFilteredRoles();
      const filteredPeers = (0, import_react147.useMemo)(
        () => peers.filter(
          // search should be empty or search phrase should be included in name
          (peer) => (!searchValue || peer.name.toLowerCase().includes(searchValue.toLowerCase())) && peer.type !== import_react_sdk74.HMSPeerType.SIP
        ),
        [peers, searchValue]
      );
      const listItems = (0, import_react147.useMemo)(() => {
        let selectItems = [];
        if (isPublicChatEnabled && !searchValue) {
          selectItems = [/* @__PURE__ */ import_react147.default.createElement(Everyone, { active: !selectedRole && !selectedPeerId })];
        }
        if (roles.length > 0 && !searchValue) {
          selectItems.push(/* @__PURE__ */ import_react147.default.createElement(SelectorHeader, { isHorizontalDivider: isPublicChatEnabled }, "Roles"));
          roles.forEach(
            (userRole) => selectItems.push(/* @__PURE__ */ import_react147.default.createElement(RoleItem, { key: userRole, active: selectedRole === userRole, role: userRole }))
          );
        }
        if (filteredPeers.length > 0) {
          selectItems.push(
            /* @__PURE__ */ import_react147.default.createElement(SelectorHeader, { isHorizontalDivider: isPublicChatEnabled || roles.length > 0 }, "Participants")
          );
        }
        filteredPeers.forEach(
          (peer) => selectItems.push(
            /* @__PURE__ */ import_react147.default.createElement(PeerItem, { key: peer.id, name: peer.name, peerId: peer.id, active: peer.id === selectedPeerId })
          )
        );
        return selectItems;
      }, [isPublicChatEnabled, searchValue, selectedRole, selectedPeerId, roles, filteredPeers]);
      return /* @__PURE__ */ import_react147.default.createElement(Dropdown.Group, { css: { overflowY: "auto", maxHeight: "$64", bg: "$surface_default" } }, listItems.map((item, index) => /* @__PURE__ */ import_react147.default.createElement(Box, { key: index }, item)));
    };
    ChatSelector = ({ role, peerId }) => {
      const { elements } = useRoomLayoutConferencingScreen();
      const peers = (0, import_react_sdk74.useHMSStore)(import_react_sdk74.selectRemotePeers);
      const [search, setSearch] = (0, import_react147.useState)("");
      const isPrivateChatEnabled = !!elements?.chat?.private_chat_enabled;
      const isPublicChatEnabled = !!elements?.chat?.public_chat_enabled;
      return /* @__PURE__ */ import_react147.default.createElement(import_react147.default.Fragment, null, peers.length > 0 && isPrivateChatEnabled && /* @__PURE__ */ import_react147.default.createElement(Box, { css: { px: "$4" } }, /* @__PURE__ */ import_react147.default.createElement(ParticipantSearch, { onSearch: setSearch, placeholder: "Search for participants" })), /* @__PURE__ */ import_react147.default.createElement(
        VirtualizedSelectItemList,
        {
          selectedRole: role,
          selectedPeerId: peerId,
          peers: isPrivateChatEnabled ? peers : [],
          isPublicChatEnabled,
          searchValue: search
        }
      ));
    };
  }
});

// src/Prebuilt/components/Chat/ChatSelectorContainer.tsx
var import_react148, import_react_use23, import_react_icons67, ChatSelectorContainer;
var init_ChatSelectorContainer = __esm({
  "src/Prebuilt/components/Chat/ChatSelectorContainer.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react148 = __toESM(require("react"));
    import_react_use23 = require("react-use");
    import_react_icons67 = require("@100mslive/react-icons");
    init_Dropdown2();
    init_Layout();
    init_Sheet2();
    init_Text2();
    init_Theme();
    init_ChatSelector();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_hooks();
    init_constants();
    ChatSelectorContainer = () => {
      const [open, setOpen] = (0, import_react148.useState)(false);
      const isMobile = (0, import_react_use23.useMedia)(config.media.md);
      const { elements } = useRoomLayoutConferencingScreen();
      const isPrivateChatEnabled = !!elements?.chat?.private_chat_enabled;
      const isPublicChatEnabled = !!elements?.chat?.public_chat_enabled;
      const roles = useFilteredRoles();
      const selectedPeer = useSubscribeChatSelector(CHAT_SELECTOR.PEER);
      const selectedRole = useSubscribeChatSelector(CHAT_SELECTOR.ROLE);
      const defaultSelection = useDefaultChatSelection();
      const selection = selectedPeer.name || selectedRole || defaultSelection;
      if (!(isPrivateChatEnabled || isPublicChatEnabled || roles.length > 0) && !isPrivateChatEnabled && !selection) {
        return null;
      }
      return /* @__PURE__ */ import_react148.default.createElement(import_react148.default.Fragment, null, /* @__PURE__ */ import_react148.default.createElement(Flex, { align: "center", css: { mb: "$8", flex: "1 1 0", pl: "$2" } }, /* @__PURE__ */ import_react148.default.createElement(Text, { variant: "xs", css: { color: "$on_surface_medium" } }, selection ? "To" : "Choose Participant"), isMobile ? /* @__PURE__ */ import_react148.default.createElement(
        Flex,
        {
          align: "center",
          css: { c: "$on_surface_medium", border: "1px solid $border_bright", r: "$0", p: "$1 $2", ml: "$6" },
          gap: "1",
          onClick: (e) => {
            setOpen((value) => !value);
            e.stopPropagation();
          }
        },
        /* @__PURE__ */ import_react148.default.createElement(
          Text,
          {
            variant: "caption",
            css: {
              c: "$on_surface_high",
              pr: "$2",
              display: "flex",
              alignItems: "center",
              gap: "$1",
              textTransform: selection !== selectedPeer.name ? "capitalize" : void 0
            }
          },
          selection === CHAT_SELECTOR.EVERYONE ? /* @__PURE__ */ import_react148.default.createElement(import_react_icons67.GroupIcon, { width: 16, height: 16 }) : /* @__PURE__ */ import_react148.default.createElement(import_react_icons67.PersonIcon, { width: 16, height: 16 }),
          selection || "Search"
        ),
        selection && (open ? /* @__PURE__ */ import_react148.default.createElement(import_react_icons67.ChevronUpIcon, { width: 16, height: 16 }) : /* @__PURE__ */ import_react148.default.createElement(import_react_icons67.ChevronDownIcon, { width: 16, height: 16 }))
      ) : /* @__PURE__ */ import_react148.default.createElement(Dropdown.Root, { open, onOpenChange: (value) => setOpen(value) }, /* @__PURE__ */ import_react148.default.createElement(
        Dropdown.Trigger,
        {
          asChild: true,
          "data-testid": "participant_list_filter",
          css: {
            background: "$primary_default",
            r: "$0",
            p: "$1 $2",
            ml: "$6"
          },
          tabIndex: 0
        },
        /* @__PURE__ */ import_react148.default.createElement(Flex, { align: "center", css: { c: "$on_surface_medium" }, gap: "1" }, /* @__PURE__ */ import_react148.default.createElement(
          Text,
          {
            variant: "caption",
            css: {
              c: "$on_surface_high",
              pr: "$2",
              display: "flex",
              alignItems: "center",
              gap: "$1",
              textTransform: selection !== selectedPeer.name ? "capitalize" : void 0
            }
          },
          selection === CHAT_SELECTOR.EVERYONE ? /* @__PURE__ */ import_react148.default.createElement(import_react_icons67.GroupIcon, { width: 16, height: 16 }) : /* @__PURE__ */ import_react148.default.createElement(import_react_icons67.PersonIcon, { width: 16, height: 16 }),
          selection || "Search"
        ), selection && /* @__PURE__ */ import_react148.default.createElement(
          import_react_icons67.ChevronDownIcon,
          {
            style: { transform: open ? "rotate(180deg)" : "rotate(0deg)", transition: "transform 150ms ease" },
            width: 12,
            height: 12
          }
        ))
      ), /* @__PURE__ */ import_react148.default.createElement(
        Dropdown.Content,
        {
          css: {
            w: "$64",
            overflow: "hidden",
            maxHeight: "unset",
            bg: "$surface_default"
          },
          align: "start",
          sideOffset: 8
        },
        /* @__PURE__ */ import_react148.default.createElement(ChatSelector, { role: selectedRole, peerId: selectedPeer.id })
      ))), isMobile ? /* @__PURE__ */ import_react148.default.createElement(Sheet.Root, { open, onOpenChange: (value) => setOpen(value) }, /* @__PURE__ */ import_react148.default.createElement(Sheet.Content, { css: { pt: "$8" } }, /* @__PURE__ */ import_react148.default.createElement(
        Sheet.Title,
        {
          css: {
            display: "flex",
            w: "100%",
            justifyContent: "space-between",
            px: "$10",
            pb: "$4",
            mb: "$8",
            borderBottom: "1px solid $border_bright"
          }
        },
        /* @__PURE__ */ import_react148.default.createElement(Text, { css: { color: "$on_surface_medium", fontWeight: "$semiBold" } }, "Chat with"),
        /* @__PURE__ */ import_react148.default.createElement(Sheet.Close, { css: { color: "$on_surface_medium" } }, /* @__PURE__ */ import_react148.default.createElement(import_react_icons67.CrossIcon, null))
      ), /* @__PURE__ */ import_react148.default.createElement(
        Box,
        {
          onClick: () => {
            setOpen(false);
          }
        },
        /* @__PURE__ */ import_react148.default.createElement(ChatSelector, { role: selectedRole, peerId: selectedPeer.id })
      ))) : null);
    };
  }
});

// src/Prebuilt/components/AppData/useChatState.js
var import_react149, import_react_sdk75, useChatDraftMessage;
var init_useChatState = __esm({
  "src/Prebuilt/components/AppData/useChatState.js"() {
    "use strict";
    init_cjs_shims();
    import_react149 = require("react");
    import_react_sdk75 = require("@100mslive/react-sdk");
    init_constants();
    useChatDraftMessage = () => {
      const hmsActions = (0, import_react_sdk75.useHMSActions)();
      let chatDraftMessage = (0, import_react_sdk75.useHMSStore)((0, import_react_sdk75.selectAppData)(APP_DATA.chatDraft));
      if (chatDraftMessage === void 0 || chatDraftMessage === null) {
        chatDraftMessage = "";
      }
      const setDraftMessage = (0, import_react149.useCallback)(
        (message) => {
          hmsActions.setAppData(APP_DATA.chatDraft, message, true);
        },
        [hmsActions]
      );
      return [chatDraftMessage, setDraftMessage];
    };
  }
});

// src/Prebuilt/components/Chat/useEmojiPickerStyles.js
var import_react150, useEmojiPickerStyles;
var init_useEmojiPickerStyles = __esm({
  "src/Prebuilt/components/Chat/useEmojiPickerStyles.js"() {
    "use strict";
    init_cjs_shims();
    import_react150 = require("react");
    useEmojiPickerStyles = (showing) => {
      const ref = (0, import_react150.useRef)(null);
      (0, import_react150.useEffect)(() => {
        if (showing) {
          setTimeout(() => {
            const root = ref.current?.querySelector("em-emoji-picker")?.shadowRoot;
            const style = document.createElement("style");
            style.textContent = `
          #root {
            --em-rgb-color: var(--hms-ui-colors-on_surface_high);
            --em-rgb-input: var(--hms-ui-colors-on_primary_high);
            --em-color-border: var(--hms-ui-colors-surface_bright);
            --color-b: var(--hms-ui-colors-on_surface_high);
            --rgb-background: transparent;
            color: var(--hms-ui-colors-on_surface_high);
            font-family: var(--hms-ui-fonts-sans);
          }
          .sticky {
            top: 0.25rem;
            background-color: var(--hms-ui-colors-surface_bright);
            margin-top: 0.5rem;
          }
        `;
            root?.appendChild(style);
          }, 0);
        }
      }, [showing]);
      return ref;
    };
  }
});

// src/Prebuilt/components/Chat/ChatFooter.tsx
function EmojiPicker({ onSelect }) {
  const [showEmoji, setShowEmoji] = (0, import_react151.useState)(false);
  const ref = useEmojiPickerStyles(showEmoji);
  return /* @__PURE__ */ import_react151.default.createElement(Popover2.Root, { open: showEmoji, onOpenChange: setShowEmoji }, /* @__PURE__ */ import_react151.default.createElement(Popover2.Trigger, { asChild: true, css: { appearance: "none" } }, /* @__PURE__ */ import_react151.default.createElement(IconButton, { as: "div" }, /* @__PURE__ */ import_react151.default.createElement(import_react_icons68.EmojiIcon, null))), /* @__PURE__ */ import_react151.default.createElement(Popover2.Portal, null, /* @__PURE__ */ import_react151.default.createElement(
    Popover2.Content,
    {
      alignOffset: -40,
      sideOffset: 16,
      align: "end",
      css: {
        p: 0
      }
    },
    /* @__PURE__ */ import_react151.default.createElement(
      Box,
      {
        css: {
          minWidth: 352,
          minHeight: 435
        },
        ref
      },
      /* @__PURE__ */ import_react151.default.createElement(import_react152.default, { onEmojiSelect: onSelect, data: import_data.default, previewPosition: "none", skinPosition: "search" })
    )
  )));
}
var import_react151, import_react_use24, import_data, import_react152, import_react_sdk76, import_react_icons68, TextArea2, ChatFooter;
var init_ChatFooter = __esm({
  "src/Prebuilt/components/Chat/ChatFooter.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react151 = __toESM(require("react"));
    import_react_use24 = require("react-use");
    import_data = __toESM(require("@emoji-mart/data"));
    import_react152 = __toESM(require("@emoji-mart/react"));
    import_react_sdk76 = require("@100mslive/react-sdk");
    import_react_icons68 = require("@100mslive/react-icons");
    init_src();
    init_IconButton2();
    init_MoreSettings();
    init_RaiseHand();
    init_ToastManager();
    init_ChatSelectorContainer();
    init_useRoomLayoutScreen();
    init_useChatState();
    init_useUISettings();
    init_useChatBlacklist();
    init_useEmojiPickerStyles();
    init_hooks();
    init_utils3();
    init_constants();
    TextArea2 = styled("textarea", {
      width: "100%",
      bg: "transparent",
      color: "$on_primary_high",
      resize: "none",
      lineHeight: "1rem",
      position: "relative",
      fontFamily: "$sans",
      fontSize: "100%",
      margin: 0,
      padding: 0,
      top: "$3",
      "&:focus": {
        boxShadow: "none",
        outline: "none"
      }
    });
    ChatFooter = ({ onSend, children }) => {
      const hmsActions = (0, import_react_sdk76.useHMSActions)();
      const inputRef = (0, import_react151.useRef)(null);
      const [draftMessage, setDraftMessage] = useChatDraftMessage();
      const isMobile = (0, import_react_use24.useMedia)(config.media.md);
      const { elements, screenType } = useRoomLayoutConferencingScreen();
      const message_placeholder = elements?.chat?.message_placeholder || "Send a message";
      const localPeer = (0, import_react_sdk76.useHMSStore)(import_react_sdk76.selectLocalPeer);
      const isOverlayChat = elements?.chat?.is_overlay;
      const canDisableChat = !!elements?.chat?.real_time_controls?.can_disable_chat;
      const selectedPeer = useSubscribeChatSelector(CHAT_SELECTOR.PEER);
      const [selectedRole, setRoleSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.ROLE);
      const defaultSelection = useDefaultChatSelection();
      const selection = selectedPeer.name || selectedRole || defaultSelection;
      const isLocalPeerBlacklisted = useIsPeerBlacklisted({ local: true });
      const isMwebHLSStream = useMobileHLSStream();
      const [messageLengthExceeded, setMessageLengthExceeded] = (0, import_react151.useState)(false);
      const isLandscapeHLSStream = useLandscapeHLSStream();
      (0, import_react151.useEffect)(() => {
        if (!selectedPeer.id && !selectedRole && !["Everyone", ""].includes(defaultSelection)) {
          setRoleSelector(defaultSelection);
        } else {
          if (!(isMobile || isLandscapeHLSStream) && !elements?.chat?.disable_autofocus) {
            inputRef.current?.focus();
          }
        }
      }, [defaultSelection, selectedPeer, selectedRole, setRoleSelector, isMobile, isLandscapeHLSStream, elements?.chat]);
      const resetInputHeight = (0, import_react151.useCallback)(() => {
        if (inputRef.current) {
          inputRef.current.style.height = `${Math.max(
            32,
            inputRef.current.value ? Math.min(inputRef.current.scrollHeight, 24 * 4) : 0
          )}px`;
        }
      }, []);
      const updateInputHeight = (0, import_react151.useCallback)(() => {
        if (inputRef.current) {
          inputRef.current.style.height = `${Math.max(32, Math.min(inputRef.current.scrollHeight, 24 * 4))}px`;
        }
      }, []);
      const sendMessage = (0, import_react151.useCallback)(async () => {
        const message = inputRef?.current?.value;
        if (!message || !message.trim().length) {
          return;
        }
        try {
          if (selectedRole) {
            await hmsActions.sendGroupMessage(message, [selectedRole]);
          } else if (selectedPeer.id) {
            await hmsActions.sendDirectMessage(message, selectedPeer.id);
          } else {
            await hmsActions.sendBroadcastMessage(message);
          }
          inputRef.current.value = "";
          resetInputHeight();
          setTimeout(() => {
            onSend(1);
          }, 0);
        } catch (error) {
          const err = error;
          ToastManager.addToast({
            title: err.message.startsWith("Invalid peer") ? `${selectedPeer.name} is not in this room` : err.message
          });
        }
      }, [selectedRole, selectedPeer, hmsActions, onSend]);
      (0, import_react151.useEffect)(() => {
        const messageElement = inputRef.current;
        if (messageElement) {
          messageElement.value = draftMessage;
          updateInputHeight();
          setMessageLengthExceeded(draftMessage.length > CHAT_MESSAGE_LIMIT);
        }
      }, [draftMessage]);
      (0, import_react151.useEffect)(() => {
        const messageElement = inputRef.current;
        return () => {
          setDraftMessage(messageElement?.value || "");
        };
      }, [setDraftMessage]);
      if (isLocalPeerBlacklisted) {
        return null;
      }
      return /* @__PURE__ */ import_react151.default.createElement(Box, { css: { position: "relative" } }, /* @__PURE__ */ import_react151.default.createElement(Flex, null, /* @__PURE__ */ import_react151.default.createElement(ChatSelectorContainer, null), canDisableChat && isMobile && isOverlayChat ? /* @__PURE__ */ import_react151.default.createElement(Flex, { align: "center", justify: "end", css: { mb: "$4" }, onClick: (e) => e.stopPropagation() }, /* @__PURE__ */ import_react151.default.createElement(Popover2.Root, null, /* @__PURE__ */ import_react151.default.createElement(Popover2.Trigger, { asChild: true }, /* @__PURE__ */ import_react151.default.createElement(IconButton, { css: { border: "1px solid $border_bright" } }, /* @__PURE__ */ import_react151.default.createElement(import_react_icons68.VerticalMenuIcon, { height: "16", width: "16" }))), /* @__PURE__ */ import_react151.default.createElement(Popover2.Portal, null, /* @__PURE__ */ import_react151.default.createElement(
        Popover2.Content,
        {
          align: "end",
          side: "top",
          onClick: () => {
            const chatState = {
              enabled: false,
              updatedBy: {
                peerId: localPeer?.id,
                userId: localPeer?.customerUserId,
                userName: localPeer?.name
              },
              updatedAt: Date.now()
            };
            hmsActions.sessionStore.set("chatState" /* CHAT_STATE */, chatState);
          },
          css: {
            backgroundColor: "$surface_default",
            display: "flex",
            alignItems: "center",
            gap: "$4",
            borderRadius: "$1",
            color: "$on_surface_high",
            cursor: "pointer",
            "&:hover": { backgroundColor: "$surface_dim" }
          }
        },
        /* @__PURE__ */ import_react151.default.createElement(import_react_icons68.PauseCircleIcon, null),
        /* @__PURE__ */ import_react151.default.createElement(Text, { variant: "sm", css: { fontWeight: "$semiBold" } }, "Pause Chat")
      )))) : null), selection && /* @__PURE__ */ import_react151.default.createElement(Flex, { align: inputRef.current?.scrollHeight === 32 ? "center" : "end", css: { gap: "$4", w: "100%" } }, /* @__PURE__ */ import_react151.default.createElement(
        Flex,
        {
          align: "end",
          css: {
            bg: isOverlayChat && isMobile ? "$surface_dim" : "$surface_default",
            minHeight: "$16",
            position: "relative",
            py: isOverlayChat && isMobile ? "$2" : "$6",
            pl: "$8",
            flexGrow: 1,
            r: "$1",
            "@md": {
              minHeight: "$14",
              boxSizing: "border-box"
            },
            ...isLandscapeHLSStream ? { minHeight: "$14", py: 0 } : {}
          }
        },
        children,
        /* @__PURE__ */ import_react151.default.createElement(
          TextArea2,
          {
            maxLength: CHAT_MESSAGE_LIMIT + 10,
            css: {
              c: "$on_surface_high",
              "&:valid ~ .send-msg": { color: "$on_surface_high" },
              "& ~ .send-msg": { color: "$on_surface_low" },
              "&::placeholder": { color: "$on_surface_medium" },
              border: "none"
            },
            placeholder: message_placeholder,
            ref: inputRef,
            required: true,
            autoFocus: !(isMobile || isLandscapeHLSStream),
            onKeyPress: async (event) => {
              if (event.key === "Enter") {
                if (!event.shiftKey && !messageLengthExceeded) {
                  event.preventDefault();
                  await sendMessage();
                }
              }
            },
            autoComplete: "off",
            "aria-autocomplete": "none",
            onChange: (e) => {
              updateInputHeight();
              setMessageLengthExceeded(e.target.value.length > CHAT_MESSAGE_LIMIT);
            },
            onBlur: resetInputHeight,
            onPaste: (e) => e.stopPropagation(),
            onCut: (e) => e.stopPropagation(),
            onCopy: (e) => e.stopPropagation()
          }
        ),
        !isMobile && !isLandscapeHLSStream ? /* @__PURE__ */ import_react151.default.createElement(
          EmojiPicker,
          {
            onSelect: (emoji) => {
              if (inputRef.current) {
                inputRef.current.value += ` ${emoji.native} `;
              }
            }
          }
        ) : null,
        /* @__PURE__ */ import_react151.default.createElement(
          IconButton,
          {
            className: "send-msg",
            onClick: sendMessage,
            disabled: messageLengthExceeded,
            css: {
              ml: "auto",
              height: "max-content",
              mr: "$4",
              "&:hover": { c: isMobile ? "" : "$on_surface_medium" }
            },
            "data-testid": "send_msg_btn"
          },
          /* @__PURE__ */ import_react151.default.createElement(import_react_icons68.SendIcon, null)
        )
      ), (isMwebHLSStream || isLandscapeHLSStream) && /* @__PURE__ */ import_react151.default.createElement(import_react151.default.Fragment, null, /* @__PURE__ */ import_react151.default.createElement(
        Flex,
        {
          css: {
            alignItems: "center"
          },
          gap: "2"
        },
        /* @__PURE__ */ import_react151.default.createElement(RaiseHand, { css: { bg: "$surface_default" } }),
        /* @__PURE__ */ import_react151.default.createElement(MoreSettings, { elements, screenType })
      ))), messageLengthExceeded && /* @__PURE__ */ import_react151.default.createElement(Text, { variant: "xs", css: { color: "$alert_error_default", fontWeight: "$semiBold", mt: "$1", ml: "$7" } }, "Message cannot exceed 2000 characters"));
    };
  }
});

// src/Prebuilt/components/Chat/ChatStates.tsx
var import_react153, import_react_sdk77, ChatPaused, ChatBlocked;
var init_ChatStates = __esm({
  "src/Prebuilt/components/Chat/ChatStates.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react153 = __toESM(require("react"));
    import_react_sdk77 = require("@100mslive/react-sdk");
    init_Button2();
    init_Layout();
    init_Text2();
    init_useRoomLayoutScreen();
    init_useChatBlacklist();
    ChatPaused = () => {
      const hmsActions = (0, import_react_sdk77.useHMSActions)();
      const { elements } = useRoomLayoutConferencingScreen();
      const can_disable_chat = !!elements?.chat?.real_time_controls?.can_disable_chat;
      const { enabled: isChatEnabled = true, updatedBy: chatStateUpdatedBy = "" } = (0, import_react_sdk77.useHMSStore)((0, import_react_sdk77.selectSessionStore)("chatState" /* CHAT_STATE */)) || {};
      const localPeer = (0, import_react_sdk77.useHMSStore)(import_react_sdk77.selectLocalPeer);
      const unPauseChat = (0, import_react153.useCallback)(
        async () => await hmsActions.sessionStore.set("chatState" /* CHAT_STATE */, {
          enabled: true,
          updatedBy: { userName: localPeer?.name, userId: localPeer?.customerUserId, peerId: localPeer?.id },
          updatedAt: Date.now()
        }),
        [hmsActions, localPeer]
      );
      return isChatEnabled ? null : /* @__PURE__ */ import_react153.default.createElement(
        Flex,
        {
          align: "center",
          justify: "between",
          css: { borderRadius: "$1", bg: "$surface_default", p: "$2 $4 $2 $8", w: "100%" }
        },
        /* @__PURE__ */ import_react153.default.createElement(Box, null, /* @__PURE__ */ import_react153.default.createElement(Text, { variant: "sm", css: { fontWeight: "$semiBold", color: "$on_surface_high" } }, "Chat paused"), /* @__PURE__ */ import_react153.default.createElement(
          Text,
          {
            variant: "xs",
            css: { color: "$on_surface_medium", maxWidth: "100%", overflow: "hidden", textOverflow: "ellipsis" }
          },
          "Chat has been paused by ",
          chatStateUpdatedBy?.peerId === localPeer?.id ? "you" : chatStateUpdatedBy?.userName
        )),
        can_disable_chat ? /* @__PURE__ */ import_react153.default.createElement(Button, { css: { fontWeight: "$semiBold", fontSize: "$sm", borderRadius: "$2" }, onClick: unPauseChat }, "Resume") : /* @__PURE__ */ import_react153.default.createElement(import_react153.default.Fragment, null)
      );
    };
    ChatBlocked = () => {
      const isLocalPeerBlacklisted = useIsPeerBlacklisted({ local: true });
      if (!isLocalPeerBlacklisted) {
        return null;
      }
      return /* @__PURE__ */ import_react153.default.createElement(
        Flex,
        {
          align: "center",
          justify: "between",
          css: { borderRadius: "$1", bg: "$surface_default", p: "$4 $4 $4 $8", w: "100%" }
        },
        /* @__PURE__ */ import_react153.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", textAlign: "center", w: "100%" } }, "You've been blocked from sending messages")
      );
    };
  }
});

// src/Prebuilt/components/Chat/ArrowNavigation.tsx
var import_react154, import_react_icons69, ArrowNavigation;
var init_ArrowNavigation = __esm({
  "src/Prebuilt/components/Chat/ArrowNavigation.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react154 = __toESM(require("react"));
    import_react_icons69 = require("@100mslive/react-icons");
    init_Layout();
    ArrowNavigation = ({
      total,
      index,
      showPrevious,
      showNext
    }) => {
      if (total < 2) {
        return null;
      }
      return /* @__PURE__ */ import_react154.default.createElement(Flex, { direction: "column", css: { gap: "$1" } }, /* @__PURE__ */ import_react154.default.createElement(
        Flex,
        {
          onClick: showPrevious,
          css: index === 0 ? { cursor: "not-allowed", color: "$on_surface_low" } : { cursor: "pointer", color: "$on_surface_medium" }
        },
        /* @__PURE__ */ import_react154.default.createElement(import_react_icons69.ChevronUpIcon, { height: 20, width: 20 })
      ), /* @__PURE__ */ import_react154.default.createElement(
        Flex,
        {
          onClick: showNext,
          css: index === total - 1 ? { cursor: "not-allowed", color: "$on_surface_low" } : { cursor: "pointer", color: "$on_surface_medium" }
        },
        /* @__PURE__ */ import_react154.default.createElement(import_react_icons69.ChevronDownIcon, { height: 20, width: 20 })
      ));
    };
  }
});

// src/Prebuilt/components/Chat/StickIndicator.tsx
var import_react155, StickIndicator;
var init_StickIndicator = __esm({
  "src/Prebuilt/components/Chat/StickIndicator.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react155 = __toESM(require("react"));
    init_Layout();
    StickIndicator = ({ total, index }) => {
      const sticksCount = Math.min(3, total);
      if (total < 2) {
        return null;
      }
      return /* @__PURE__ */ import_react155.default.createElement(Flex, { direction: "column", css: { gap: "$1" } }, [...Array(sticksCount)].map((_, i) => /* @__PURE__ */ import_react155.default.createElement(
        Box,
        {
          css: {
            borderLeft: "2px solid",
            height: "$4",
            borderColor: i === index ? "$on_surface_high" : "$on_surface_low"
          }
        }
      )));
    };
  }
});

// src/Prebuilt/components/Chat/PinnedMessage.tsx
var import_react156, import_react_swipeable, import_react_use25, import_react_sdk78, import_react_icons70, PINNED_MESSAGE_LENGTH, PinnedMessage;
var init_PinnedMessage = __esm({
  "src/Prebuilt/components/Chat/PinnedMessage.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react156 = __toESM(require("react"));
    import_react_swipeable = require("react-swipeable");
    import_react_use25 = require("react-use");
    import_react_sdk78 = require("@100mslive/react-sdk");
    import_react_icons70 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_Theme();
    init_ArrowNavigation();
    init_ChatBody();
    init_StickIndicator();
    init_useRoomLayoutScreen();
    init_usePinnedMessages();
    PINNED_MESSAGE_LENGTH = 75;
    PinnedMessage = () => {
      const pinnedMessages = (0, import_react_sdk78.useHMSStore)((0, import_react_sdk78.selectSessionStore)("pinnedMessages" /* PINNED_MESSAGES */));
      const [pinnedMessageIndex, setPinnedMessageIndex] = (0, import_react156.useState)(0);
      const { removePinnedMessage } = usePinnedMessages();
      const isMobile = (0, import_react_use25.useMedia)(config.media.md);
      const { elements } = useRoomLayoutConferencingScreen();
      const canUnpinMessage = !!elements?.chat?.allow_pinning_messages;
      const [hideOverflow, setHideOverflow] = (0, import_react156.useState)(true);
      const currentPinnedMessage = pinnedMessages?.[pinnedMessageIndex]?.text || "";
      const canOverflow = currentPinnedMessage.length > PINNED_MESSAGE_LENGTH;
      const showPreviousPinnedMessage = () => {
        const previousIndex = Math.max(pinnedMessageIndex - 1, 0);
        setHideOverflow(pinnedMessages[previousIndex].text.length > PINNED_MESSAGE_LENGTH);
        setPinnedMessageIndex(previousIndex);
      };
      const showNextPinnedMessage = () => {
        const nextIndex = Math.min(pinnedMessageIndex + 1, pinnedMessages.length - 1);
        setHideOverflow(pinnedMessages[nextIndex].text.length > PINNED_MESSAGE_LENGTH);
        setPinnedMessageIndex(nextIndex);
      };
      const swipeHandlers = (0, import_react_swipeable.useSwipeable)({
        onSwipedUp: () => showNextPinnedMessage(),
        onSwipedDown: () => showPreviousPinnedMessage()
      });
      (0, import_react156.useEffect)(() => {
        const count = pinnedMessages?.length || 1;
        if (pinnedMessageIndex >= count) {
          setPinnedMessageIndex(count - 1);
        }
      }, [pinnedMessageIndex, pinnedMessages]);
      if (!pinnedMessages || pinnedMessages.length === 0) {
        return null;
      }
      return /* @__PURE__ */ import_react156.default.createElement(Flex, { align: "center", css: { w: "100%", gap: "$4" } }, !isMobile ? /* @__PURE__ */ import_react156.default.createElement(
        ArrowNavigation,
        {
          index: pinnedMessageIndex,
          total: pinnedMessages.length,
          showPrevious: showPreviousPinnedMessage,
          showNext: showNextPinnedMessage
        }
      ) : null, /* @__PURE__ */ import_react156.default.createElement(
        Flex,
        {
          css: {
            p: "$4",
            color: "$on_surface_high",
            bg: isMobile && elements?.chat?.is_overlay ? "rgba(0, 0, 0, 0.64)" : "$surface_brighter",
            r: "$1",
            gap: "$4",
            mb: "$8",
            mt: "$8",
            flexGrow: 1,
            border: "1px solid $border_bright"
          },
          align: "center",
          justify: "between"
        },
        isMobile ? /* @__PURE__ */ import_react156.default.createElement(StickIndicator, { index: pinnedMessageIndex, total: pinnedMessages.length }) : null,
        /* @__PURE__ */ import_react156.default.createElement(
          Box,
          {
            css: {
              w: "100%",
              maxHeight: "$18",
              overflowY: "auto",
              overflowX: "hidden",
              wordBreak: "break-word",
              "& p span": {
                color: "$primary_default"
              }
            }
          },
          /* @__PURE__ */ import_react156.default.createElement(
            Text,
            {
              variant: "sm",
              css: { color: "$on_surface_high" },
              ...swipeHandlers,
              title: pinnedMessages[pinnedMessageIndex]?.text
            },
            /* @__PURE__ */ import_react156.default.createElement(
              AnnotisedMessage,
              {
                message: currentPinnedMessage,
                length: hideOverflow ? PINNED_MESSAGE_LENGTH : currentPinnedMessage.length
              }
            ),
            canOverflow ? /* @__PURE__ */ import_react156.default.createElement("span", { style: { cursor: "pointer" }, onClick: () => setHideOverflow((prev) => !prev) }, "\xA0", hideOverflow ? "... See more" : "Collapse") : null
          )
        ),
        canUnpinMessage ? /* @__PURE__ */ import_react156.default.createElement(
          Flex,
          {
            onClick: () => {
              removePinnedMessage(pinnedMessageIndex);
              setPinnedMessageIndex(Math.max(0, pinnedMessageIndex - 1));
            },
            css: {
              cursor: "pointer",
              color: "$on_surface_medium",
              "&:hover": { color: "$on_surface_high" },
              "&:hover .hide-on-hover": { display: "none !important" },
              "&:hover .show-on-hover": { display: "block !important" }
            },
            title: "Unpin Message"
          },
          /* @__PURE__ */ import_react156.default.createElement(import_react_icons70.UnpinIcon, { className: "show-on-hover", style: { display: "none" }, height: 20, width: 20 }),
          /* @__PURE__ */ import_react156.default.createElement(import_react_icons70.PinIcon, { className: "hide-on-hover", style: { display: "block" }, height: 20, width: 20 })
        ) : null
      ));
    };
  }
});

// src/Prebuilt/components/Chat/Chat.tsx
var import_react157, import_react_use26, import_hms_video_store3, import_ts_pattern10, import_react_sdk79, import_react_icons71, Chat, NewMessageIndicator;
var init_Chat = __esm({
  "src/Prebuilt/components/Chat/Chat.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react157 = __toESM(require("react"));
    import_react_use26 = require("react-use");
    import_hms_video_store3 = require("@100mslive/hms-video-store");
    import_ts_pattern10 = require("ts-pattern");
    import_react_sdk79 = require("@100mslive/react-sdk");
    import_react_icons71 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Theme();
    init_EmojiReaction();
    init_MoreSettings();
    init_RaiseHand();
    init_ChatBody();
    init_ChatFooter();
    init_ChatStates();
    init_PinnedMessage();
    init_useRoomLayoutScreen();
    init_useSidepaneResetOnLayoutUpdate();
    init_useChatBlacklist();
    init_hooks();
    init_constants();
    Chat = () => {
      const { elements, screenType } = useRoomLayoutConferencingScreen();
      const listRef = (0, import_react157.useRef)(null);
      const hmsActions = (0, import_react_sdk79.useHMSActions)();
      const vanillaStore = (0, import_react_sdk79.useHMSVanillaStore)();
      const { enabled: isChatEnabled = true } = (0, import_react_sdk79.useHMSStore)((0, import_hms_video_store3.selectSessionStore)("chatState" /* CHAT_STATE */)) || {};
      const isMobile = (0, import_react_use26.useMedia)(config.media.md);
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeStream = useLandscapeHLSStream();
      useSidepaneResetOnLayoutUpdate("chat", SIDE_PANE_OPTIONS.CHAT);
      const isLocalPeerBlacklisted = useIsPeerBlacklisted({ local: true });
      const scrollToBottom = (0, import_react157.useCallback)(
        (unreadCount = 0) => {
          if (listRef.current && listRef.current.scrollToItem && unreadCount > 0) {
            const messagesCount = vanillaStore.getState(import_react_sdk79.selectHMSMessagesCount);
            listRef.current?.scrollToItem(messagesCount, "end");
            requestAnimationFrame(() => {
              listRef.current?.scrollToItem(messagesCount, "end");
            });
            hmsActions.setMessageRead(true);
          }
        },
        [hmsActions, vanillaStore]
      );
      const streaming = isMobileHLSStream || isLandscapeStream;
      return /* @__PURE__ */ import_react157.default.createElement(
        Flex,
        {
          direction: "column",
          justify: "end",
          css: {
            size: "100%",
            gap: "$4"
          }
        },
        isMobile && elements?.chat?.is_overlay && !streaming ? null : /* @__PURE__ */ import_react157.default.createElement(PinnedMessage, null),
        /* @__PURE__ */ import_react157.default.createElement(ChatBody, { ref: listRef, scrollToBottom }),
        /* @__PURE__ */ import_react157.default.createElement(Flex, { align: "center", css: { w: "100%", gap: "$2" } }, /* @__PURE__ */ import_react157.default.createElement(ChatPaused, null), /* @__PURE__ */ import_react157.default.createElement(ChatBlocked, null), streaming && (!isChatEnabled || isLocalPeerBlacklisted) && /* @__PURE__ */ import_react157.default.createElement(import_react157.default.Fragment, null, /* @__PURE__ */ import_react157.default.createElement(RaiseHand, { css: { bg: "$surface_default" } }), /* @__PURE__ */ import_react157.default.createElement(MoreSettings, { elements, screenType }))),
        isMobile && elements?.chat?.is_overlay && !streaming ? /* @__PURE__ */ import_react157.default.createElement(PinnedMessage, null) : null,
        isChatEnabled ? /* @__PURE__ */ import_react157.default.createElement(ChatFooter, { onSend: scrollToBottom }, /* @__PURE__ */ import_react157.default.createElement(NewMessageIndicator, { scrollToBottom, listRef })) : null,
        streaming && /* @__PURE__ */ import_react157.default.createElement(
          Box,
          {
            css: {
              position: "absolute",
              ...(0, import_ts_pattern10.match)({ isLandscapeStream, isMobileHLSStream, isChatEnabled, isLocalPeerBlacklisted }).with(
                {
                  isLandscapeStream: true,
                  isChatEnabled: true
                },
                () => ({ bottom: "$19", right: "$10" })
              ).with(
                {
                  isLandscapeStream: true,
                  isChatEnabled: false
                },
                () => ({ bottom: "$20", right: "$10" })
              ).with(
                {
                  isMobileHLSStream: true,
                  isChatEnabled: false
                },
                () => ({ bottom: "$19", right: "$8" })
              ).with(
                {
                  isMobileHLSStream: true,
                  isChatEnabled: true,
                  isLocalPeerBlacklisted: false
                },
                () => ({ bottom: "$17", right: "$8" })
              ).with(
                {
                  isLandscapeStream: false,
                  isChatEnabled: true,
                  isLocalPeerBlacklisted: true
                },
                () => ({ bottom: "$18", right: "$8" })
              ).with(
                {
                  isMobileHLSStream: true,
                  isLocalPeerBlacklisted: true
                },
                () => ({ bottom: "$20", right: "$8" })
              ).otherwise(() => ({}))
            }
          },
          /* @__PURE__ */ import_react157.default.createElement(EmojiReaction, null)
        )
      );
    };
    NewMessageIndicator = ({
      scrollToBottom,
      listRef
    }) => {
      const unreadCount = (0, import_react_sdk79.useHMSStore)(import_hms_video_store3.selectUnreadHMSMessagesCount);
      if (!unreadCount || !listRef.current) {
        return null;
      }
      const outerElement = listRef.current._outerRef;
      if (outerElement && outerElement.clientHeight + outerElement.scrollTop + outerElement.offsetTop >= outerElement.scrollHeight) {
        return null;
      }
      return /* @__PURE__ */ import_react157.default.createElement(
        Flex,
        {
          justify: "center",
          css: {
            width: "100%",
            left: 0,
            bottom: "$28",
            position: "absolute"
          }
        },
        /* @__PURE__ */ import_react157.default.createElement(
          Button,
          {
            variant: "standard",
            onClick: () => {
              scrollToBottom(unreadCount);
            },
            icon: true,
            css: {
              p: "$3 $4",
              pl: "$6",
              "& > svg": { ml: "$4" },
              borderRadius: "$round",
              fontSize: "$xs",
              fontWeight: "$semiBold",
              c: "$on_secondary_high"
            }
          },
          "New ",
          unreadCount === 1 ? "message" : "messages",
          /* @__PURE__ */ import_react157.default.createElement(import_react_icons71.ChevronDownIcon, { height: 16, width: 16 })
        )
      );
    };
  }
});

// src/Prebuilt/components/Footer/PaginatedParticipants.tsx
var import_react158, import_react_intersection_observer, import_react_use27, import_react_window3, import_react_sdk80, import_react_icons72, LoadMoreParticipants, VirtualizedParticipantItem2, PaginatedParticipants;
var init_PaginatedParticipants = __esm({
  "src/Prebuilt/components/Footer/PaginatedParticipants.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react158 = __toESM(require("react"));
    import_react_intersection_observer = require("react-intersection-observer");
    import_react_use27 = require("react-use");
    import_react_window3 = require("react-window");
    import_react_sdk80 = require("@100mslive/react-sdk");
    import_react_icons72 = require("@100mslive/react-icons");
    init_IconButton2();
    init_Layout();
    init_Loading2();
    init_Text2();
    init_ParticipantList();
    init_RoleAccordion();
    init_useSidepane();
    init_utils2();
    LoadMoreParticipants = ({
      hasNext,
      loadMore,
      style
    }) => {
      const { ref, inView } = (0, import_react_intersection_observer.useInView)();
      const [inProgress, setInProgress] = (0, import_react158.useState)(false);
      (0, import_react158.useEffect)(() => {
        if (hasNext && inView && !inProgress) {
          setInProgress(true);
          loadMore().catch(console.error).finally(() => setInProgress(false));
        }
      }, [hasNext, loadMore, inView, inProgress]);
      return /* @__PURE__ */ import_react158.default.createElement(Flex, { ref, style, align: "center", justify: "center" }, inProgress ? /* @__PURE__ */ import_react158.default.createElement(Loading, { size: 16 }) : null);
    };
    VirtualizedParticipantItem2 = import_react158.default.memo(
      ({
        index,
        data: data3,
        style
      }) => {
        if (!data3.peerList[index]) {
          return /* @__PURE__ */ import_react158.default.createElement(LoadMoreParticipants, { hasNext: data3.hasNext, loadMore: data3.loadMorePeers, style });
        }
        return /* @__PURE__ */ import_react158.default.createElement(
          Participant,
          {
            key: data3.peerList[index].id,
            peer: data3.peerList[index],
            isConnected: data3.isConnected,
            style
          }
        );
      }
    );
    PaginatedParticipants = ({ roleName, onBack }) => {
      const { peers, total, hasNext, loadPeers, loadMorePeers } = (0, import_react_sdk80.usePaginatedParticipants)({ role: roleName, limit: 20 });
      const [search, setSearch] = (0, import_react158.useState)("");
      const filteredPeers = peers.filter((p) => p.name?.toLowerCase().includes(search?.toLowerCase()));
      const isConnected = (0, import_react_sdk80.useHMSStore)(import_react_sdk80.selectIsConnectedToRoom);
      const [ref, { width }] = (0, import_react_use27.useMeasure)();
      const height = ROW_HEIGHT * (filteredPeers.length + 1);
      const resetSidePane = useSidepaneReset();
      (0, import_react158.useEffect)(() => {
        loadPeers();
      }, []);
      return /* @__PURE__ */ import_react158.default.createElement(Flex, { ref, direction: "column", css: { size: "100%", gap: "$4" } }, /* @__PURE__ */ import_react158.default.createElement(Flex, { align: "center" }, /* @__PURE__ */ import_react158.default.createElement(Flex, { align: "center", css: { flex: "1 1 0", cursor: "pointer" }, onClick: onBack }, /* @__PURE__ */ import_react158.default.createElement(import_react_icons72.ChevronLeftIcon, null), /* @__PURE__ */ import_react158.default.createElement(Text, { variant: "lg", css: { flex: "1 1 0" } }, "Participants")), /* @__PURE__ */ import_react158.default.createElement(
        IconButton,
        {
          onClick: (e) => {
            e.stopPropagation();
            resetSidePane();
          },
          "data-testid": "close_sidepane"
        },
        /* @__PURE__ */ import_react158.default.createElement(import_react_icons72.CrossIcon, null)
      )), /* @__PURE__ */ import_react158.default.createElement(ParticipantSearch, { onSearch: (search2) => setSearch(search2), placeholder: `Search for ${roleName}` }), /* @__PURE__ */ import_react158.default.createElement(Flex, { direction: "column", css: { border: "1px solid $border_default", borderRadius: "$1", flex: "1 1 0" } }, /* @__PURE__ */ import_react158.default.createElement(Flex, { align: "center", css: { height: ROW_HEIGHT, borderBottom: "1px solid $border_default", px: "$8" } }, /* @__PURE__ */ import_react158.default.createElement(Text, { css: { fontSize: "$space$7" } }, roleName, "(", getFormattedCount(peers.length), "/", getFormattedCount(total), ")")), /* @__PURE__ */ import_react158.default.createElement(Box, { css: { flex: "1 1 0", overflowY: "auto", overflowX: "hidden", mr: "-$10" } }, /* @__PURE__ */ import_react158.default.createElement(
        import_react_window3.VariableSizeList,
        {
          itemSize: (index) => index === filteredPeers.length + 1 ? 16 : ROW_HEIGHT,
          itemData: { peerList: filteredPeers, hasNext: hasNext(), loadMorePeers, isConnected: isConnected === true },
          itemKey,
          itemCount: filteredPeers.length + 1,
          width,
          height
        },
        VirtualizedParticipantItem2
      ))));
    };
  }
});

// src/Prebuilt/components/ChatSettings.tsx
var import_react159, import_react_sdk81, import_react_icons73, ChatSettings;
var init_ChatSettings = __esm({
  "src/Prebuilt/components/ChatSettings.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react159 = __toESM(require("react"));
    import_react_sdk81 = require("@100mslive/react-sdk");
    import_react_icons73 = require("@100mslive/react-icons");
    init_Layout();
    init_Popover();
    init_Text2();
    init_useRoomLayoutScreen();
    ChatSettings = () => {
      const hmsActions = (0, import_react_sdk81.useHMSActions)();
      const localPeer = (0, import_react_sdk81.useHMSStore)(import_react_sdk81.selectLocalPeer);
      const { elements } = useRoomLayoutConferencingScreen();
      const canPauseChat = !!elements?.chat?.real_time_controls?.can_disable_chat;
      const { enabled: isChatEnabled = true } = (0, import_react_sdk81.useHMSStore)((0, import_react_sdk81.selectSessionStore)("chatState" /* CHAT_STATE */)) || {};
      const showPause = canPauseChat && isChatEnabled;
      if (!showPause) {
        return null;
      }
      return /* @__PURE__ */ import_react159.default.createElement(Popover2.Root, null, /* @__PURE__ */ import_react159.default.createElement(Popover2.Trigger, { asChild: true, css: { px: "$4" } }, /* @__PURE__ */ import_react159.default.createElement(
        Flex,
        {
          align: "center",
          css: { color: "$on_surface_medium", "&:hover": { color: "$on_surface_high" }, cursor: "pointer" }
        },
        /* @__PURE__ */ import_react159.default.createElement(import_react_icons73.SettingsIcon, null)
      )), /* @__PURE__ */ import_react159.default.createElement(Popover2.Portal, null, /* @__PURE__ */ import_react159.default.createElement(
        Popover2.Content,
        {
          align: "end",
          side: "bottom",
          sideOffset: 2,
          onClick: () => {
            const chatState = {
              enabled: false,
              updatedBy: {
                peerId: localPeer?.id,
                userId: localPeer?.customerUserId,
                userName: localPeer?.name
              },
              updatedAt: Date.now()
            };
            hmsActions.sessionStore.set("chatState" /* CHAT_STATE */, chatState);
          },
          css: {
            backgroundColor: "$surface_default",
            display: "flex",
            alignItems: "center",
            gap: "$4",
            borderRadius: "$1",
            color: "$on_surface_high",
            cursor: "pointer",
            "&:hover": { backgroundColor: "$surface_dim" }
          }
        },
        /* @__PURE__ */ import_react159.default.createElement(import_react_icons73.PauseCircleIcon, null),
        /* @__PURE__ */ import_react159.default.createElement(Text, { variant: "sm", css: { fontWeight: "$semiBold" } }, "Pause Chat")
      )));
    };
  }
});

// src/Prebuilt/components/SidePaneTabs.tsx
var import_react160, import_react_use28, import_ts_pattern11, import_react_sdk82, import_react_icons74, tabTriggerCSS, ParticipantCount2, SidePaneTabs;
var init_SidePaneTabs = __esm({
  "src/Prebuilt/components/SidePaneTabs.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react160 = __toESM(require("react"));
    import_react_use28 = require("react-use");
    import_ts_pattern11 = require("ts-pattern");
    import_react_sdk82 = require("@100mslive/react-sdk");
    import_react_icons74 = require("@100mslive/react-icons");
    init_Chat();
    init_PaginatedParticipants();
    init_ParticipantList();
    init_src();
    init_Tooltip2();
    init_ChatSettings();
    init_useRoomLayoutScreen();
    init_useSidepane();
    init_utils2();
    init_constants();
    tabTriggerCSS = {
      color: "$on_surface_low",
      p: "$4",
      fontWeight: "$semiBold",
      fontSize: "$sm",
      w: "100%",
      justifyContent: "center",
      '&[data-state="active"]': {
        color: "$on_surface_high"
      }
    };
    ParticipantCount2 = ({ count }) => {
      return count < 1e3 ? /* @__PURE__ */ import_react160.default.createElement("span", null, "(", count, ")") : /* @__PURE__ */ import_react160.default.createElement(Tooltip, { title: count }, /* @__PURE__ */ import_react160.default.createElement("span", null, "(", getFormattedCount(count), ")"));
    };
    SidePaneTabs = import_react160.default.memo(({ active = SIDE_PANE_OPTIONS.CHAT, hideTab = false }) => {
      const toggleChat = useSidepaneToggle(SIDE_PANE_OPTIONS.CHAT);
      const toggleParticipants = useSidepaneToggle(SIDE_PANE_OPTIONS.PARTICIPANTS);
      const resetSidePane = useSidepaneReset();
      const [activeTab, setActiveTab] = (0, import_react160.useState)(active);
      const [activeRole, setActiveRole] = (0, import_react160.useState)("");
      const peerCount = (0, import_react_sdk82.useHMSStore)(import_react_sdk82.selectPeerCount);
      const { elements, screenType } = useRoomLayoutConferencingScreen();
      const chat_title = elements?.chat?.chat_title || "Chat";
      const showChat = !!elements?.chat;
      const showParticipants = !!elements?.participant_list;
      const hideTabs = !(showChat && showParticipants) || hideTab;
      const isMobile = (0, import_react_use28.useMedia)(config.media.md);
      const isOverlayChat = !!elements?.chat?.is_overlay && isMobile;
      const { off_stage_roles = [] } = elements?.on_stage_exp || {};
      const isChatOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.CHAT);
      const showChatSettings = showChat && isChatOpen && (!isMobile || !isOverlayChat);
      (0, import_react160.useEffect)(() => {
        (0, import_ts_pattern11.match)({ activeTab, showChat, showParticipants }).with({ activeTab: SIDE_PANE_OPTIONS.CHAT, showChat: false, showParticipants: true }, () => {
          setActiveTab(SIDE_PANE_OPTIONS.PARTICIPANTS);
        }).with({ activeTab: SIDE_PANE_OPTIONS.PARTICIPANTS, showChat: true, showParticipants: false }, () => {
          setActiveTab(SIDE_PANE_OPTIONS.CHAT);
        }).with({ showChat: false, showParticipants: false }, () => {
          resetSidePane();
        });
      }, [showChat, activeTab, showParticipants, resetSidePane]);
      (0, import_react160.useEffect)(() => {
        setActiveTab(active);
      }, [active]);
      if (activeRole) {
        return /* @__PURE__ */ import_react160.default.createElement(
          Flex,
          {
            direction: "column",
            css: {
              color: "$on_primary_high",
              h: "100%",
              transition: "margin 0.3s ease-in-out",
              position: "relative"
            }
          },
          /* @__PURE__ */ import_react160.default.createElement(Box, { css: { position: "absolute", left: 0, top: 0, size: "100%", zIndex: 21, bg: "$surface_dim" } }, /* @__PURE__ */ import_react160.default.createElement(PaginatedParticipants, { roleName: activeRole, onBack: () => setActiveRole("") }))
        );
      }
      return /* @__PURE__ */ import_react160.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            color: "$on_primary_high",
            h: "100%",
            transition: "margin 0.3s ease-in-out"
          }
        },
        (0, import_ts_pattern11.match)({ isOverlayChat, isChatOpen, showChat, hideTabs }).with({ isOverlayChat: true, isChatOpen: true, showChat: true }, () => /* @__PURE__ */ import_react160.default.createElement(Chat, null)).with({ hideTabs: true }, () => {
          return /* @__PURE__ */ import_react160.default.createElement(import_react160.default.Fragment, null, /* @__PURE__ */ import_react160.default.createElement(Flex, { justify: "between", css: { w: "100%", "&:empty": { display: "none" } } }, /* @__PURE__ */ import_react160.default.createElement(
            Text,
            {
              variant: "sm",
              css: {
                fontWeight: "$semiBold",
                p: "$4",
                c: "$on_surface_high",
                pr: "$12",
                "&:empty": { display: "none" }
              }
            },
            activeTab === SIDE_PANE_OPTIONS.CHAT ? screenType !== "hls_live_streaming" && chat_title : /* @__PURE__ */ import_react160.default.createElement("span", null, "Participants\xA0", /* @__PURE__ */ import_react160.default.createElement(ParticipantCount2, { count: peerCount }))
          ), /* @__PURE__ */ import_react160.default.createElement(Flex, null, showChatSettings ? /* @__PURE__ */ import_react160.default.createElement(ChatSettings, null) : null, isOverlayChat && isChatOpen ? null : /* @__PURE__ */ import_react160.default.createElement(
            IconButton,
            {
              css: {
                my: "$1",
                color: "$on_surface_medium",
                "&:hover": { color: "$on_surface_high" },
                "&:empty": { display: "none" }
              },
              onClick: (e) => {
                e.stopPropagation();
                if (activeTab === SIDE_PANE_OPTIONS.CHAT) {
                  toggleChat();
                } else {
                  toggleParticipants();
                }
              },
              "data-testid": "close_chat"
            },
            screenType === "hls_live_streaming" && isChatOpen ? null : /* @__PURE__ */ import_react160.default.createElement(import_react_icons74.CrossIcon, null)
          ))), activeTab === SIDE_PANE_OPTIONS.CHAT ? /* @__PURE__ */ import_react160.default.createElement(Chat, null) : /* @__PURE__ */ import_react160.default.createElement(ParticipantList, { offStageRoles: off_stage_roles, onActive: setActiveRole }));
        }).otherwise(() => {
          return /* @__PURE__ */ import_react160.default.createElement(
            Tabs.Root,
            {
              value: activeTab,
              onValueChange: setActiveTab,
              css: {
                flexDirection: "column",
                size: "100%"
              }
            },
            /* @__PURE__ */ import_react160.default.createElement(Flex, { css: { w: "100%" } }, /* @__PURE__ */ import_react160.default.createElement(Tabs.List, { css: { flexGrow: 1, borderRadius: "$2", bg: "$surface_default" } }, /* @__PURE__ */ import_react160.default.createElement(Tabs.Trigger, { value: SIDE_PANE_OPTIONS.CHAT, onClick: toggleChat, css: tabTriggerCSS }, chat_title), /* @__PURE__ */ import_react160.default.createElement(Tabs.Trigger, { value: SIDE_PANE_OPTIONS.PARTICIPANTS, onClick: toggleParticipants, css: tabTriggerCSS }, "Participants\xA0", /* @__PURE__ */ import_react160.default.createElement(ParticipantCount2, { count: peerCount }))), showChatSettings ? /* @__PURE__ */ import_react160.default.createElement(ChatSettings, null) : null, isOverlayChat && isChatOpen ? null : /* @__PURE__ */ import_react160.default.createElement(
              IconButton,
              {
                css: { my: "$1", color: "$on_surface_medium", "&:hover": { color: "$on_surface_high" } },
                onClick: (e) => {
                  e.stopPropagation();
                  if (activeTab === SIDE_PANE_OPTIONS.CHAT) {
                    toggleChat();
                  } else {
                    toggleParticipants();
                  }
                },
                "data-testid": "close_chat"
              },
              /* @__PURE__ */ import_react160.default.createElement(import_react_icons74.CrossIcon, null)
            )),
            /* @__PURE__ */ import_react160.default.createElement(Tabs.Content, { value: SIDE_PANE_OPTIONS.PARTICIPANTS, css: { p: 0 } }, /* @__PURE__ */ import_react160.default.createElement(ParticipantList, { offStageRoles: off_stage_roles, onActive: setActiveRole })),
            /* @__PURE__ */ import_react160.default.createElement(Tabs.Content, { value: SIDE_PANE_OPTIONS.CHAT, css: { p: 0 } }, /* @__PURE__ */ import_react160.default.createElement(Chat, null))
          );
        })
      );
    });
  }
});

// src/Prebuilt/components/Connection/TileConnection.tsx
var import_react161, import_react_sdk83, import_react_icons75, TileConnection, IconWrapper, Wrapper2, TileConnection_default;
var init_TileConnection = __esm({
  "src/Prebuilt/components/Connection/TileConnection.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react161 = __toESM(require("react"));
    import_react_sdk83 = require("@100mslive/react-sdk");
    import_react_icons75 = require("@100mslive/react-icons");
    init_src();
    init_ConnectionIndicator();
    TileConnection = ({
      name,
      peerId,
      hideLabel,
      width,
      pinned
    }) => {
      const spotlighted = (0, import_react_sdk83.useHMSStore)((0, import_react_sdk83.selectSessionStore)("spotlight" /* SPOTLIGHT */)) === peerId;
      const isPeerScreenSharing = !!(0, import_react_sdk83.useHMSStore)((0, import_react_sdk83.selectScreenShareByPeerID)(peerId));
      const peerType = (0, import_react_sdk83.useHMSStore)((0, import_react_sdk83.selectPeerTypeByID)(peerId));
      return /* @__PURE__ */ import_react161.default.createElement(Wrapper2, null, !hideLabel ? /* @__PURE__ */ import_react161.default.createElement(import_react161.default.Fragment, null, name ? /* @__PURE__ */ import_react161.default.createElement(Flex, { align: "center" }, peerType === import_react_sdk83.HMSPeerType.SIP && /* @__PURE__ */ import_react161.default.createElement(IconWrapper, null, /* @__PURE__ */ import_react161.default.createElement(import_react_icons75.CallIcon, { width: "15", height: "15" })), isPeerScreenSharing && /* @__PURE__ */ import_react161.default.createElement(IconWrapper, null, /* @__PURE__ */ import_react161.default.createElement(import_react_icons75.ShareScreenIcon, { width: "15", height: "15" })), pinned && /* @__PURE__ */ import_react161.default.createElement(IconWrapper, null, /* @__PURE__ */ import_react161.default.createElement(import_react_icons75.PinIcon, { width: "15", height: "15" })), spotlighted && /* @__PURE__ */ import_react161.default.createElement(IconWrapper, null, /* @__PURE__ */ import_react161.default.createElement(import_react_icons75.SpotlightIcon, { width: "15", height: "15" })), /* @__PURE__ */ import_react161.default.createElement(
        Text,
        {
          css: {
            c: "$on_surface_high",
            verticalAlign: "baseline",
            ...width ? textEllipsis(width - 60) : {}
          },
          variant: "xs"
        },
        name
      )) : null, /* @__PURE__ */ import_react161.default.createElement(ConnectionIndicator, { isTile: true, peerId, hideBg: true })) : null);
    };
    IconWrapper = styled("div", { c: "$on_surface_high", ml: "$3", mt: "$1", display: "flex" });
    Wrapper2 = styled("div", {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      position: "absolute",
      bottom: "$2",
      left: "$2",
      backgroundColor: "$background_dim",
      borderRadius: "$1",
      maxWidth: "85%",
      zIndex: 1,
      "& p,span": {
        p: "$2 $3"
      }
    });
    TileConnection_default = TileConnection;
  }
});

// src/Prebuilt/components/TileMenu/utils.ts
var getDragClassName;
var init_utils5 = __esm({
  "src/Prebuilt/components/TileMenu/utils.ts"() {
    "use strict";
    init_cjs_shims();
    getDragClassName = () => {
      return navigator?.maxTouchPoints > 0 ? "__cancel-drag-event" : "";
    };
  }
});

// src/Prebuilt/components/TileMenu/TileMenuContent.tsx
var import_react162, import_react_use29, import_react_sdk84, import_react_icons76, isSameTile, spacingCSS, SpotlightActions, PinActions, MinimiseInset, SimulcastLayers, TileMenuContent;
var init_TileMenuContent = __esm({
  "src/Prebuilt/components/TileMenu/TileMenuContent.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react162 = __toESM(require("react"));
    import_react_use29 = require("react-use");
    import_react_sdk84 = require("@100mslive/react-sdk");
    import_react_icons76 = require("@100mslive/react-icons");
    init_Layout();
    init_Slider2();
    init_Text2();
    init_Theme();
    init_TileMenu();
    init_AppContext();
    init_ToastManager();
    init_useUISettings();
    init_useDropdownSelection();
    init_utils5();
    init_constants();
    isSameTile = ({
      trackId,
      videoTrackID,
      audioTrackID
    }) => !!trackId && (!!videoTrackID && videoTrackID === trackId || !!audioTrackID && audioTrackID === trackId);
    spacingCSS = { "@md": { my: "$8", fontWeight: "$semiBold", fontSize: "sm" } };
    SpotlightActions = ({
      peerId,
      onSpotLightClick = () => {
        return;
      }
    }) => {
      const hmsActions = (0, import_react_sdk84.useHMSActions)();
      const spotlightPeerId = (0, import_react_sdk84.useHMSStore)((0, import_react_sdk84.selectSessionStore)("spotlight" /* SPOTLIGHT */));
      const isTileSpotlighted = spotlightPeerId === peerId;
      const dragClassName = getDragClassName();
      const setSpotlightPeerId = (peerIdToSpotlight) => hmsActions.sessionStore.set("spotlight" /* SPOTLIGHT */, peerIdToSpotlight).catch((err) => ToastManager.addToast({ title: err.description }));
      return /* @__PURE__ */ import_react162.default.createElement(
        StyledMenuTile.ItemButton,
        {
          className: dragClassName,
          css: spacingCSS,
          onClick: () => {
            if (isTileSpotlighted) {
              setSpotlightPeerId();
            } else {
              setSpotlightPeerId(peerId);
            }
            onSpotLightClick();
          }
        },
        /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.StarIcon, { height: 20, width: 20 }),
        /* @__PURE__ */ import_react162.default.createElement("span", null, isTileSpotlighted ? "Remove from Spotlight" : "Spotlight Tile for everyone")
      );
    };
    PinActions = ({ audioTrackID, videoTrackID }) => {
      const [pinnedTrackId, setPinnedTrackId] = useSetAppDataByKey(APP_DATA.pinnedTrackId);
      const dragClassName = getDragClassName();
      const isTilePinned = isSameTile({
        trackId: pinnedTrackId,
        videoTrackID,
        audioTrackID
      });
      return /* @__PURE__ */ import_react162.default.createElement(import_react162.default.Fragment, null, /* @__PURE__ */ import_react162.default.createElement(
        StyledMenuTile.ItemButton,
        {
          className: dragClassName,
          css: spacingCSS,
          onClick: () => isTilePinned ? setPinnedTrackId() : setPinnedTrackId(videoTrackID || audioTrackID)
        },
        /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.PinIcon, { height: 20, width: 20 }),
        /* @__PURE__ */ import_react162.default.createElement("span", null, isTilePinned ? "Unpin" : "Pin", " Tile for myself")
      ));
    };
    MinimiseInset = () => {
      const [minimised, setMinimised] = useSetAppDataByKey(APP_DATA.minimiseInset);
      const dragClassName = getDragClassName();
      return /* @__PURE__ */ import_react162.default.createElement(import_react162.default.Fragment, null, /* @__PURE__ */ import_react162.default.createElement(StyledMenuTile.ItemButton, { className: dragClassName, css: spacingCSS, onClick: () => setMinimised(!minimised) }, /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.ShrinkIcon, { height: 20, width: 20 }), /* @__PURE__ */ import_react162.default.createElement("span", null, minimised ? "Show" : "Minimise", " your video")));
    };
    SimulcastLayers = ({ trackId }) => {
      const track = (0, import_react_sdk84.useHMSStore)((0, import_react_sdk84.selectTrackByID)(trackId));
      const actions = (0, import_react_sdk84.useHMSActions)();
      const bg = useDropdownSelection();
      if (!track?.layerDefinitions?.length || track.degraded || !track.enabled) {
        return null;
      }
      const currentLayer = track.layerDefinitions.find((layer) => layer.layer === track.layer);
      const dragClassName = getDragClassName();
      return /* @__PURE__ */ import_react162.default.createElement(import_react162.Fragment, null, /* @__PURE__ */ import_react162.default.createElement(StyledMenuTile.ItemButton, { className: dragClassName, css: { color: "$on_surface_medium", cursor: "default" } }, "Select maximum resolution"), track.layerDefinitions.map((layer) => {
        return /* @__PURE__ */ import_react162.default.createElement(
          StyledMenuTile.ItemButton,
          {
            className: dragClassName,
            key: layer.layer,
            onClick: async () => {
              await actions.setPreferredLayer(trackId, layer.layer);
            },
            css: {
              justifyContent: "space-between",
              bg: track.preferredLayer === layer.layer ? bg : void 0,
              "&:hover": {
                bg: track.preferredLayer === layer.layer ? bg : void 0
              }
            }
          },
          /* @__PURE__ */ import_react162.default.createElement(
            Text,
            {
              as: "span",
              css: {
                textTransform: "capitalize",
                mr: "$2",
                fontWeight: track.preferredLayer === layer.layer ? "$semiBold" : "$regular",
                color: track.preferredLayer === layer.layer ? "$on_primary_high" : "$on_surface_high"
              }
            },
            layer.layer
          ),
          /* @__PURE__ */ import_react162.default.createElement(
            Text,
            {
              as: "span",
              variant: "xs",
              css: {
                color: track.preferredLayer === layer.layer ? "$on_primary_high" : "$on_surface_high"
              }
            },
            layer.resolution.width,
            "x",
            layer.resolution.height
          )
        );
      }), /* @__PURE__ */ import_react162.default.createElement(StyledMenuTile.ItemButton, { className: dragClassName }, /* @__PURE__ */ import_react162.default.createElement(Text, { as: "span", variant: "xs", css: { color: "$on_surface_medium" } }, "Currently streaming:", /* @__PURE__ */ import_react162.default.createElement(
        Text,
        {
          as: "span",
          variant: "xs",
          css: {
            fontWeight: "$semiBold",
            textTransform: "capitalize",
            color: "$on_surface_medium",
            ml: "$2"
          }
        },
        currentLayer ? /* @__PURE__ */ import_react162.default.createElement(import_react162.default.Fragment, null, track.layer, " (", currentLayer.resolution.width, "x", currentLayer.resolution.height, ")") : "-"
      ))));
    };
    TileMenuContent = ({
      videoTrackID,
      audioTrackID,
      isLocal,
      isScreenshare,
      showSpotlight,
      showPinAction,
      peerID,
      canMinimise,
      closeSheetOnClick = () => {
        return;
      },
      openNameChangeModal = () => {
        return;
      },
      openRoleChangeModal = () => {
        return;
      }
    }) => {
      const actions = (0, import_react_sdk84.useHMSActions)();
      const dragClassName = getDragClassName();
      const permissions = (0, import_react_sdk84.useHMSStore)(import_react_sdk84.selectPermissions);
      const canChangeRole = !!permissions?.changeRole;
      const removeOthers = !!permissions?.removeOthers;
      const { userName } = useHMSPrebuiltContext();
      const roles = (0, import_react_sdk84.useHMSStore)(import_react_sdk84.selectAvailableRoleNames);
      const { isAudioEnabled, isVideoEnabled, setVolume, toggleAudio, toggleVideo, volume } = (0, import_react_sdk84.useRemoteAVToggle)(
        audioTrackID,
        videoTrackID
      );
      const { sendEvent } = (0, import_react_sdk84.useCustomEvent)({
        type: REMOTE_STOP_SCREENSHARE_TYPE
      });
      const isMobile = (0, import_react_use29.useMedia)(config.media.md);
      if (isLocal) {
        return showPinAction || canMinimise || !userName || showSpotlight ? /* @__PURE__ */ import_react162.default.createElement(import_react162.default.Fragment, null, showPinAction && /* @__PURE__ */ import_react162.default.createElement(PinActions, { audioTrackID, videoTrackID }), showSpotlight && /* @__PURE__ */ import_react162.default.createElement(SpotlightActions, { peerId: peerID, onSpotLightClick: () => closeSheetOnClick() }), canMinimise && /* @__PURE__ */ import_react162.default.createElement(MinimiseInset, null), !userName && /* @__PURE__ */ import_react162.default.createElement(
          StyledMenuTile.ItemButton,
          {
            className: dragClassName,
            onClick: () => {
              openNameChangeModal();
              closeSheetOnClick();
            }
          },
          /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.PencilIcon, { height: 20, width: 20 }),
          /* @__PURE__ */ import_react162.default.createElement(Text, { variant: "sm", css: { "@md": { fontWeight: "$semiBold" }, c: "$on_surface_high" } }, "Change Name")
        )) : null;
      }
      return /* @__PURE__ */ import_react162.default.createElement(import_react162.default.Fragment, null, toggleVideo ? /* @__PURE__ */ import_react162.default.createElement(
        StyledMenuTile.ItemButton,
        {
          className: dragClassName,
          css: spacingCSS,
          onClick: () => {
            toggleVideo();
            closeSheetOnClick();
          },
          "data-testid": isVideoEnabled ? "mute_video_participant_btn" : "unmute_video_participant_btn"
        },
        isVideoEnabled ? /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.VideoOnIcon, { height: 20, width: 20 }) : /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.VideoOffIcon, { height: 20, width: 20 }),
        /* @__PURE__ */ import_react162.default.createElement("span", null, isVideoEnabled ? "Mute Video" : "Request to Unmute Video")
      ) : null, toggleAudio ? /* @__PURE__ */ import_react162.default.createElement(
        StyledMenuTile.ItemButton,
        {
          css: spacingCSS,
          className: dragClassName,
          onClick: () => {
            toggleAudio();
            closeSheetOnClick();
          },
          "data-testid": isAudioEnabled ? "mute_audio_participant_btn" : "unmute_audio_participant_btn"
        },
        isAudioEnabled ? /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.MicOnIcon, { height: 20, width: 20 }) : /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.MicOffIcon, { height: 20, width: 20 }),
        /* @__PURE__ */ import_react162.default.createElement("span", null, isAudioEnabled ? "Mute Audio" : "Request to Unmute Audio")
      ) : null, canChangeRole && roles.length > 1 ? /* @__PURE__ */ import_react162.default.createElement(
        StyledMenuTile.ItemButton,
        {
          className: dragClassName,
          css: spacingCSS,
          onClick: () => {
            openRoleChangeModal();
            closeSheetOnClick();
          },
          "data-testid": "change_role_btn"
        },
        /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.PersonSettingsIcon, { height: 20, width: 20 }),
        /* @__PURE__ */ import_react162.default.createElement("span", null, "Switch Role")
      ) : null, audioTrackID ? /* @__PURE__ */ import_react162.default.createElement(StyledMenuTile.VolumeItem, { "data-testid": "participant_volume_slider", css: { ...spacingCSS, mb: "$0" } }, /* @__PURE__ */ import_react162.default.createElement(Flex, { align: "center", gap: 1 }, /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.SpeakerIcon, { height: 20, width: 20 }), /* @__PURE__ */ import_react162.default.createElement(Box, { as: "span", css: { ml: "$4" } }, "Volume (", volume, ")")), /* @__PURE__ */ import_react162.default.createElement(
        Slider,
        {
          css: { my: "0.5rem" },
          step: 5,
          value: [typeof volume === "number" ? volume : 100],
          onValueChange: (e) => setVolume?.(e[0])
        }
      )) : null, showPinAction && /* @__PURE__ */ import_react162.default.createElement(import_react162.default.Fragment, null, /* @__PURE__ */ import_react162.default.createElement(PinActions, { audioTrackID, videoTrackID }), showSpotlight && /* @__PURE__ */ import_react162.default.createElement(SpotlightActions, { peerId: peerID, onSpotLightClick: () => closeSheetOnClick() })), isMobile ? null : /* @__PURE__ */ import_react162.default.createElement(SimulcastLayers, { trackId: videoTrackID }), removeOthers ? /* @__PURE__ */ import_react162.default.createElement(
        StyledMenuTile.RemoveItem,
        {
          css: { ...spacingCSS, borderTop: "none" },
          onClick: async () => {
            try {
              await actions.removePeer(peerID, "");
            } catch (error) {
            }
            closeSheetOnClick();
          },
          "data-testid": "remove_participant_btn"
        },
        /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.RemoveUserIcon, { height: 20, width: 20 }),
        /* @__PURE__ */ import_react162.default.createElement("span", null, "Remove Participant")
      ) : null, removeOthers && isScreenshare ? /* @__PURE__ */ import_react162.default.createElement(
        StyledMenuTile.RemoveItem,
        {
          onClick: () => {
            sendEvent({});
            closeSheetOnClick();
          },
          css: spacingCSS
        },
        /* @__PURE__ */ import_react162.default.createElement(import_react_icons76.ShareScreenIcon, { height: 20, width: 20 }),
        /* @__PURE__ */ import_react162.default.createElement("span", null, "Stop Screenshare")
      ) : null);
    };
  }
});

// src/Prebuilt/components/TileMenu/TileMenu.tsx
var import_react163, import_react_use30, import_react_sdk85, import_react_icons77, TileMenu, TileMenu_default;
var init_TileMenu2 = __esm({
  "src/Prebuilt/components/TileMenu/TileMenu.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react163 = __toESM(require("react"));
    import_react_use30 = require("react-use");
    import_react_sdk85 = require("@100mslive/react-sdk");
    import_react_icons77 = require("@100mslive/react-icons");
    init_Layout();
    init_Sheet2();
    init_Text2();
    init_Theme();
    init_TileMenu();
    init_ChangeNameModal();
    init_RoleChangeModal();
    init_TileMenuContent();
    init_useDropdownList();
    init_utils5();
    init_TileMenuContent();
    TileMenu = ({
      audioTrackID,
      videoTrackID,
      peerID,
      isScreenshare = false,
      canMinimise,
      enableSpotlightingPeer = true
    }) => {
      const [open, setOpen] = (0, import_react163.useState)(false);
      const { theme: theme2 } = useTheme();
      const localPeerID = (0, import_react_sdk85.useHMSStore)(import_react_sdk85.selectLocalPeerID);
      const isLocal = localPeerID === peerID;
      const { removeOthers } = (0, import_react_sdk85.useHMSStore)(import_react_sdk85.selectPermissions) || {};
      const { setVolume, toggleAudio, toggleVideo } = (0, import_react_sdk85.useRemoteAVToggle)(audioTrackID, videoTrackID);
      const showSpotlight = enableSpotlightingPeer;
      const isPrimaryVideoTrack = (0, import_react_sdk85.useHMSStore)((0, import_react_sdk85.selectVideoTrackByPeerID)(peerID))?.id === videoTrackID;
      const showPinAction = !!(audioTrackID || videoTrackID && isPrimaryVideoTrack);
      const track = (0, import_react_sdk85.useHMSStore)((0, import_react_sdk85.selectTrackByID)(videoTrackID));
      const hideSimulcastLayers = !track?.layerDefinitions?.length || track.degraded || !track.enabled;
      const isMobile = (0, import_react_use30.useMedia)(config.media.md);
      const peer = (0, import_react_sdk85.useHMSStore)((0, import_react_sdk85.selectPeerByID)(peerID));
      const [showNameChangeModal, setShowNameChangeModal] = (0, import_react163.useState)(false);
      const [showRoleChangeModal, setShowRoleChangeModal] = (0, import_react163.useState)(false);
      useDropdownList({ open, name: "TileMenu" });
      const dragClassName = getDragClassName();
      if (!(removeOthers || toggleAudio || toggleVideo || setVolume || showPinAction) && hideSimulcastLayers) {
        return null;
      }
      const openNameChangeModal = () => setShowNameChangeModal(true);
      const openRoleChangeModal = () => setShowRoleChangeModal(true);
      const props = {
        isLocal,
        isScreenshare,
        audioTrackID,
        videoTrackID,
        peerID,
        isPrimaryVideoTrack,
        showSpotlight,
        showPinAction,
        canMinimise,
        openNameChangeModal,
        openRoleChangeModal
      };
      return /* @__PURE__ */ import_react163.default.createElement(import_react163.default.Fragment, null, /* @__PURE__ */ import_react163.default.createElement(StyledMenuTile.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react163.default.createElement(
        StyledMenuTile.Trigger,
        {
          "data-testid": "participant_menu_btn",
          css: { bg: `${theme2.colors.background_dim.value}A3`, p: "$2", w: "unset", h: "unset" },
          onClick: (e) => e.stopPropagation(),
          className: dragClassName
        },
        /* @__PURE__ */ import_react163.default.createElement(import_react_icons77.VerticalMenuIcon, { width: 20, height: 20 })
      ), isMobile ? /* @__PURE__ */ import_react163.default.createElement(Sheet.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react163.default.createElement(Sheet.Content, { css: { bg: "$surface_dim", pt: "$8" } }, /* @__PURE__ */ import_react163.default.createElement(
        Flex,
        {
          css: {
            color: "$on_surface_high",
            display: "flex",
            w: "100%",
            justifyContent: "space-between",
            alignItems: "center",
            px: "$10",
            pb: "$8",
            borderBottom: "1px solid $border_default"
          }
        },
        /* @__PURE__ */ import_react163.default.createElement(Box, null, /* @__PURE__ */ import_react163.default.createElement(Text, { css: { color: "$on_surface_high", fontWeight: "$semiBold" } }, peer?.name, isLocal ? ` (You)` : null), peer?.roleName ? /* @__PURE__ */ import_react163.default.createElement(Text, { variant: "xs", css: { color: "$on_surface_low", mt: "$2" } }, peer.roleName) : null),
        /* @__PURE__ */ import_react163.default.createElement(Sheet.Close, { css: { color: "inherit" } }, /* @__PURE__ */ import_react163.default.createElement(import_react_icons77.CrossIcon, null))
      ), /* @__PURE__ */ import_react163.default.createElement(Box, { css: { px: "$8", pb: "$8", maxHeight: "80vh", overflowY: "auto" } }, /* @__PURE__ */ import_react163.default.createElement(TileMenuContent, { ...props, closeSheetOnClick: () => setOpen(false) })))) : /* @__PURE__ */ import_react163.default.createElement(StyledMenuTile.Content, { side: "top", align: "end", css: { maxHeight: "$80", overflowY: "auto" } }, /* @__PURE__ */ import_react163.default.createElement(TileMenuContent, { ...props }))), showNameChangeModal && /* @__PURE__ */ import_react163.default.createElement(ChangeNameModal, { onOpenChange: setShowNameChangeModal }), showRoleChangeModal && /* @__PURE__ */ import_react163.default.createElement(RoleChangeModal, { peerId: peerID, onOpenChange: setShowRoleChangeModal }));
    };
    TileMenu_default = TileMenu;
  }
});

// src/Prebuilt/components/peerTileUtils.jsx
var PEER_NAME_PLACEHOLDER, labelMap, getVideoTileLabel;
var init_peerTileUtils = __esm({
  "src/Prebuilt/components/peerTileUtils.jsx"() {
    "use strict";
    init_cjs_shims();
    PEER_NAME_PLACEHOLDER = "peerName";
    labelMap = /* @__PURE__ */ new Map([
      [[true, "screen"].toString(), "Your Screen"],
      [[true, "regular"].toString(), `You (${PEER_NAME_PLACEHOLDER})`],
      [[false, "screen"].toString(), `${PEER_NAME_PLACEHOLDER}'s Screen`],
      [[false, "regular"].toString(), PEER_NAME_PLACEHOLDER],
      [[true, void 0].toString(), `You (${PEER_NAME_PLACEHOLDER})`],
      [[false, void 0].toString(), `${PEER_NAME_PLACEHOLDER}`]
    ]);
    getVideoTileLabel = ({ peerName, isLocal, track }) => {
      const isPeerPresent = peerName !== void 0;
      if (!isPeerPresent || !track) {
        return isPeerPresent ? labelMap.get([isLocal, void 0].toString()).replace(PEER_NAME_PLACEHOLDER, peerName) : "";
      }
      const isLocallyMuted = track.volume === 0;
      let label = labelMap.get([isLocal, track.source].toString());
      if (label) {
        label = label.replace(PEER_NAME_PLACEHOLDER, peerName);
      } else {
        label = `${peerName} ${track.source}`;
      }
      return `${label}${isLocallyMuted ? " (Muted for you)" : ""}`;
    };
  }
});

// src/Prebuilt/components/VideoTile.tsx
var import_react164, import_react_use31, import_react_sdk86, import_react_icons78, PeerMetadata, Tile, VideoTile, VideoTile_default;
var init_VideoTile2 = __esm({
  "src/Prebuilt/components/VideoTile.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react164 = __toESM(require("react"));
    import_react_use31 = require("react-use");
    import_react_sdk86 = require("@100mslive/react-sdk");
    import_react_icons78 = require("@100mslive/react-icons");
    init_TileConnection();
    init_TileMenu2();
    init_AudioLevel2();
    init_Avatar2();
    init_Stats2();
    init_Video2();
    init_VideoTile();
    init_peerTileUtils();
    init_useUISettings();
    init_utils2();
    init_constants();
    PeerMetadata = ({ peerId, size }) => {
      const metaData = (0, import_react_sdk86.useHMSStore)((0, import_react_sdk86.selectPeerMetadata)(peerId));
      const isBRB = metaData?.isBRBOn || false;
      const isHandRaised = (0, import_react_sdk86.useHMSStore)((0, import_react_sdk86.selectHasPeerHandRaised)(peerId));
      return /* @__PURE__ */ import_react164.default.createElement(import_react164.default.Fragment, null, isHandRaised ? /* @__PURE__ */ import_react164.default.createElement(StyledVideoTile.AttributeBox, { size, "data-testid": "raiseHand_icon_onTile" }, /* @__PURE__ */ import_react164.default.createElement(import_react_icons78.HandIcon, { width: 24, height: 24 })) : null, isBRB ? /* @__PURE__ */ import_react164.default.createElement(StyledVideoTile.AttributeBox, { size, "data-testid": "brb_icon_onTile" }, /* @__PURE__ */ import_react164.default.createElement(import_react_icons78.BrbTileIcon, { width: 22, height: 22 })) : null);
    };
    Tile = ({
      peerId = "",
      trackId = "",
      width,
      height,
      objectFit = "cover",
      canMinimise = false,
      isDragabble = false,
      rootCSS = {},
      containerCSS = {},
      enableSpotlightingPeer = true,
      hideParticipantNameOnTile = false,
      roundedVideoTile = true,
      hideAudioMuteOnTile = false,
      hideMetadataOnTile = false
    }) => {
      const trackSelector = trackId ? (0, import_react_sdk86.selectVideoTrackByID)(trackId) : (0, import_react_sdk86.selectVideoTrackByPeerID)(peerId);
      const track = (0, import_react_sdk86.useHMSStore)(trackSelector);
      const peerName = (0, import_react_sdk86.useHMSStore)((0, import_react_sdk86.selectPeerNameByID)(peerId));
      const audioTrack = (0, import_react_sdk86.useHMSStore)((0, import_react_sdk86.selectAudioTrackByPeerID)(peerId));
      const localPeerID = (0, import_react_sdk86.useHMSStore)(import_react_sdk86.selectLocalPeerID);
      const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);
      const mirrorLocalVideo = useUISettings(UI_SETTINGS.mirrorLocalVideo);
      const showStatsOnTiles = useUISettings(UI_SETTINGS.showStatsOnTiles);
      const isAudioMuted = !(0, import_react_sdk86.useHMSStore)((0, import_react_sdk86.selectIsPeerAudioEnabled)(peerId));
      const isVideoMuted = !track?.enabled;
      const [isMouseHovered, setIsMouseHovered] = (0, import_react164.useState)(false);
      const isVideoDegraded = track?.degraded;
      const isLocal = localPeerID === peerId;
      const [pinnedTrackId] = useSetAppDataByKey(APP_DATA.pinnedTrackId);
      const pinned = isSameTile({
        trackId: pinnedTrackId,
        videoTrackID: track?.id,
        audioTrackID: audioTrack?.id
      });
      const label = getVideoTileLabel({
        peerName,
        track,
        isLocal
      });
      const onHoverHandler = (0, import_react164.useCallback)((event) => {
        setIsMouseHovered(event.type === "mouseenter");
      }, []);
      const [ref, { width: calculatedWidth, height: calculatedHeight }] = (0, import_react_use31.useMeasure)();
      const isTileBigEnoughToShowStats = calculatedHeight >= 180 && calculatedWidth >= 180;
      const [avatarSize, attribBoxSize] = (0, import_react164.useMemo)(
        () => calculateAvatarAndAttribBoxSize(calculatedWidth, calculatedHeight),
        [calculatedWidth, calculatedHeight]
      );
      return /* @__PURE__ */ import_react164.default.createElement(
        StyledVideoTile.Root,
        {
          ref,
          css: {
            width,
            height,
            ...rootCSS
          },
          "data-testid": `participant_tile_${peerName}`
        },
        peerName !== void 0 ? /* @__PURE__ */ import_react164.default.createElement(
          StyledVideoTile.Container,
          {
            onMouseEnter: onHoverHandler,
            onMouseLeave: onHoverHandler,
            noRadius: !roundedVideoTile,
            css: containerCSS
          },
          showStatsOnTiles && isTileBigEnoughToShowStats ? /* @__PURE__ */ import_react164.default.createElement(VideoTileStats, { audioTrackID: audioTrack?.id, videoTrackID: track?.id, peerID: peerId, isLocal }) : null,
          /* @__PURE__ */ import_react164.default.createElement(
            Video,
            {
              trackId: track?.id,
              attach: isLocal ? void 0 : !isAudioOnly,
              mirror: mirrorLocalVideo && peerId === localPeerID && track?.source === "regular" && track?.facingMode !== "environment",
              noRadius: !roundedVideoTile,
              "data-testid": "participant_video_tile",
              css: {
                objectFit,
                filter: isVideoDegraded ? "blur($space$2)" : void 0,
                bg: "transparent"
              }
            }
          ),
          calculatedWidth > 0 && calculatedHeight > 0 ? /* @__PURE__ */ import_react164.default.createElement(import_react164.default.Fragment, null, isVideoMuted || !isLocal && isAudioOnly ? /* @__PURE__ */ import_react164.default.createElement(StyledVideoTile.AvatarContainer, null, /* @__PURE__ */ import_react164.default.createElement(Avatar, { name: peerName || "", "data-testid": "participant_avatar_icon", size: avatarSize })) : null, !hideAudioMuteOnTile && isAudioMuted ? /* @__PURE__ */ import_react164.default.createElement(StyledVideoTile.AudioIndicator, { "data-testid": "participant_audio_mute_icon", size: attribBoxSize }, /* @__PURE__ */ import_react164.default.createElement(import_react_icons78.MicOffIcon, null)) : null, !hideAudioMuteOnTile && !isAudioMuted ? /* @__PURE__ */ import_react164.default.createElement(StyledVideoTile.AudioIndicator, { size: attribBoxSize }, /* @__PURE__ */ import_react164.default.createElement(AudioLevel, { trackId: audioTrack?.id, size: attribBoxSize })) : null, !hideMetadataOnTile && /* @__PURE__ */ import_react164.default.createElement(PeerMetadata, { peerId, size: attribBoxSize })) : null,
          isMouseHovered || isDragabble && navigator.maxTouchPoints > 0 ? /* @__PURE__ */ import_react164.default.createElement(
            TileMenu_default,
            {
              peerID: peerId,
              audioTrackID: audioTrack?.id || "",
              videoTrackID: track?.id || "",
              canMinimise,
              enableSpotlightingPeer
            }
          ) : null,
          /* @__PURE__ */ import_react164.default.createElement(
            TileConnection_default,
            {
              hideLabel: hideParticipantNameOnTile,
              name: label,
              peerId,
              width,
              pinned
            }
          )
        ) : null
      );
    };
    VideoTile = import_react164.default.memo(Tile);
    VideoTile_default = VideoTile;
  }
});

// src/Prebuilt/components/VirtualBackground/VBOption.tsx
var import_react165, Root25, Title4, Icon3, VBOption;
var init_VBOption = __esm({
  "src/Prebuilt/components/VirtualBackground/VBOption.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react165 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    Root25 = ({
      onClick,
      mediaURL,
      isActive,
      children,
      testid = ""
    }) => /* @__PURE__ */ import_react165.default.createElement(
      Flex,
      {
        "data-testid": testid,
        direction: "column",
        align: "center",
        css: {
          p: "$5",
          borderRadius: "$1",
          bg: "$surface_bright",
          border: `4px solid ${isActive ? "$primary_default" : "$surface_dim"}`,
          cursor: "pointer",
          "&:hover": { border: "4px solid $primary_dim" },
          ...mediaURL ? { height: "$20", backgroundImage: `url("${mediaURL}")`, backgroundSize: "cover" } : {}
        },
        onClick: async () => {
          await onClick?.();
        }
      },
      children
    );
    Title4 = ({ children }) => {
      return children ? /* @__PURE__ */ import_react165.default.createElement(Text, { variant: "xs", css: { color: "$on_surface_medium" } }, children) : null;
    };
    Icon3 = ({ children }) => {
      return children ? /* @__PURE__ */ import_react165.default.createElement(Box, { css: { color: "$on_surface_high" } }, children) : null;
    };
    VBOption = {
      Root: Root25,
      Title: Title4,
      Icon: Icon3
    };
  }
});

// src/Prebuilt/components/VirtualBackground/VBCollection.tsx
var import_react166, import_hmsvbplugin3, VBCollection;
var init_VBCollection = __esm({
  "src/Prebuilt/components/VirtualBackground/VBCollection.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react166 = __toESM(require("react"));
    import_hmsvbplugin3 = require("@100mslive/hms-virtual-background/hmsvbplugin");
    init_Layout();
    init_Text2();
    init_VBOption();
    VBCollection = ({
      options,
      title,
      activeBackground = ""
    }) => {
      if (options.length === 0) {
        return null;
      }
      return /* @__PURE__ */ import_react166.default.createElement(Box, { css: { mt: "$10" } }, /* @__PURE__ */ import_react166.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_high", fontWeight: "$semiBold" } }, title), /* @__PURE__ */ import_react166.default.createElement(Box, { css: { py: "$4", display: "grid", gridTemplateColumns: "1fr 1fr 1fr", gap: "$8" } }, options.map(
        (option, index) => option.supported ? /* @__PURE__ */ import_react166.default.createElement(
          VBOption.Root,
          {
            key: option.value,
            testid: option.value === import_hmsvbplugin3.HMSVirtualBackgroundTypes.IMAGE ? `virtual_bg_option-${index}` : option.value,
            ...option,
            isActive: activeBackground === option.value
          },
          /* @__PURE__ */ import_react166.default.createElement(VBOption.Icon, null, option?.icon),
          /* @__PURE__ */ import_react166.default.createElement(VBOption.Title, null, option?.title)
        ) : ""
      )));
    };
  }
});

// src/Prebuilt/components/VirtualBackground/VBPicker.tsx
var import_react167, import_react_use32, import_hms_video_store4, import_hmsvbplugin4, import_react_sdk87, import_react_icons79, iconDims, VBPicker;
var init_VBPicker = __esm({
  "src/Prebuilt/components/VirtualBackground/VBPicker.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react167 = __toESM(require("react"));
    import_react_use32 = require("react-use");
    import_hms_video_store4 = require("@100mslive/hms-video-store");
    import_hmsvbplugin4 = require("@100mslive/hms-virtual-background/hmsvbplugin");
    import_react_sdk87 = require("@100mslive/react-sdk");
    import_react_icons79 = require("@100mslive/react-icons");
    init_src();
    init_Text2();
    init_VBCollection();
    init_VBHandler();
    init_useSidepane();
    init_useSidepaneResetOnLayoutUpdate();
    init_useUISettings();
    init_constants();
    iconDims = { height: "40px", width: "40px" };
    VBPicker = ({ backgroundMedia = [] }) => {
      const toggleVB = useSidepaneToggle(SIDE_PANE_OPTIONS.VB);
      const hmsActions = (0, import_react_sdk87.useHMSActions)();
      const localPeer = (0, import_react_sdk87.useHMSStore)(import_react_sdk87.selectLocalPeer);
      const role = (0, import_react_sdk87.useHMSStore)(import_hms_video_store4.selectLocalPeerRole);
      const isVideoOn = (0, import_react_sdk87.useHMSStore)(import_react_sdk87.selectIsLocalVideoEnabled);
      const mirrorLocalVideo = useUISettings(UI_SETTINGS.mirrorLocalVideo);
      const trackSelector = (0, import_react_sdk87.selectVideoTrackByID)(localPeer?.videoTrack);
      const track = (0, import_react_sdk87.useHMSStore)(trackSelector);
      const [blurAmount, setBlurAmount] = (0, import_react167.useState)(VBHandler.getBlurAmount() || 0.5);
      const roomState = (0, import_react_sdk87.useHMSStore)(import_react_sdk87.selectRoomState);
      const isLargeRoom = (0, import_react_sdk87.useHMSStore)(import_react_sdk87.selectIsLargeRoom);
      const isEffectsSupported = VBHandler.isEffectsSupported();
      const isEffectsEnabled = (0, import_react_sdk87.useHMSStore)(import_hms_video_store4.selectIsEffectsEnabled);
      const effectsKey = (0, import_react_sdk87.useHMSStore)(import_hms_video_store4.selectEffectsKey);
      const isMobile = (0, import_react_use32.useMedia)(config.media.md);
      const [loadingEffects, setLoadingEffects] = useSetAppDataByKey(APP_DATA.loadingEffects);
      const isPluginAdded = (0, import_react_sdk87.useHMSStore)((0, import_react_sdk87.selectIsLocalVideoPluginPresent)(VBHandler?.getName() || ""));
      const background = (0, import_react_sdk87.useHMSStore)((0, import_hms_video_store4.selectAppData)(APP_DATA.background));
      const mediaList = backgroundMedia.map((media) => media.url || "");
      const pluginLoadingRef = (0, import_react167.useRef)(false);
      const inPreview = roomState === import_react_sdk87.HMSRoomState.Preview;
      const showVideoTile = isVideoOn && isLargeRoom && !inPreview;
      (0, import_react167.useEffect)(() => {
        const addHMSVBPlugin = async () => {
          setLoadingEffects(false);
          if (!role) {
            return;
          }
          await VBHandler.initialisePlugin();
          await hmsActions.addPluginToVideoTrack(
            VBHandler.getVBObject(),
            Math.floor(role.publishParams.video.frameRate / 2)
          );
        };
        const initializeVirtualBackground = async () => {
          if (!track?.id || pluginLoadingRef.current || isPluginAdded) {
            return;
          }
          try {
            pluginLoadingRef.current = true;
            if (isEffectsEnabled && isEffectsSupported && effectsKey) {
              setLoadingEffects(true);
              await VBHandler.initialisePlugin(effectsKey, () => {
                setLoadingEffects(false);
              });
              const vbInstance = VBHandler.getVBObject();
              if (vbInstance.getName() === "HMSEffects") {
                hmsActions.addPluginsToVideoStream([VBHandler.getVBObject()]);
              } else {
                await addHMSVBPlugin();
              }
            } else {
              await addHMSVBPlugin();
            }
            const handleDefaultBackground = async () => {
              switch (background) {
                case import_hmsvbplugin4.HMSVirtualBackgroundTypes.NONE:
                  break;
                case import_hmsvbplugin4.HMSVirtualBackgroundTypes.BLUR:
                  await VBHandler.setBlur(blurAmount);
                  break;
                default:
                  await VBHandler.setBackground(background);
              }
            };
            await handleDefaultBackground();
          } catch (error) {
            console.error("Error initializing virtual background:", error);
            setLoadingEffects(false);
          }
        };
        initializeVirtualBackground();
      }, [
        hmsActions,
        role,
        isPluginAdded,
        isEffectsEnabled,
        isEffectsSupported,
        effectsKey,
        track?.id,
        background,
        blurAmount,
        setLoadingEffects
      ]);
      (0, import_react167.useEffect)(() => {
        if (!isVideoOn) {
          toggleVB();
        }
        return () => setLoadingEffects(false);
      }, [isVideoOn, setLoadingEffects, toggleVB]);
      useSidepaneResetOnLayoutUpdate("virtual_background", SIDE_PANE_OPTIONS.VB);
      return /* @__PURE__ */ import_react167.default.createElement(Flex, { css: { pr: "$6", size: "100%" }, direction: "column" }, /* @__PURE__ */ import_react167.default.createElement(Flex, { align: "center", justify: "between", css: { w: "100%", background: "$surface_dim", pb: "$4" } }, /* @__PURE__ */ import_react167.default.createElement(Text, { variant: "h6", css: { color: "$on_surface_high", display: "flex", alignItems: "center" } }, "Virtual Background ", isMobile && loadingEffects ? /* @__PURE__ */ import_react167.default.createElement(Loading, { size: 18, style: { marginLeft: "0.5rem" } }) : ""), /* @__PURE__ */ import_react167.default.createElement(
        Box,
        {
          css: { color: "$on_surface_high", "&:hover": { color: "$on_surface_medium" }, cursor: "pointer" },
          onClick: toggleVB
        },
        /* @__PURE__ */ import_react167.default.createElement(import_react_icons79.CrossIcon, null)
      )), showVideoTile ? /* @__PURE__ */ import_react167.default.createElement(
        Video,
        {
          mirror: track?.facingMode !== "environment" && mirrorLocalVideo,
          trackId: localPeer?.videoTrack,
          "data-testid": "preview_tile",
          css: { width: "100%", height: "16rem" }
        }
      ) : null, /* @__PURE__ */ import_react167.default.createElement(
        Box,
        {
          css: {
            mt: "$4",
            overflowY: "auto",
            flex: "1 1 0",
            mr: "-$10",
            pr: "$10"
          }
        },
        /* @__PURE__ */ import_react167.default.createElement(
          VBCollection,
          {
            title: "Effects",
            options: [
              {
                title: "No effect",
                icon: /* @__PURE__ */ import_react167.default.createElement(import_react_icons79.CrossCircleIcon, { style: iconDims }),
                value: import_hmsvbplugin4.HMSVirtualBackgroundTypes.NONE,
                onClick: async () => {
                  await VBHandler.removeEffects();
                  hmsActions.setAppData(APP_DATA.background, import_hmsvbplugin4.HMSVirtualBackgroundTypes.NONE);
                },
                supported: true
              },
              {
                title: "Blur",
                icon: /* @__PURE__ */ import_react167.default.createElement(import_react_icons79.BlurPersonHighIcon, { style: iconDims }),
                value: import_hmsvbplugin4.HMSVirtualBackgroundTypes.BLUR,
                onClick: async () => {
                  await VBHandler?.setBlur(blurAmount);
                  hmsActions.setAppData(APP_DATA.background, import_hmsvbplugin4.HMSVirtualBackgroundTypes.BLUR);
                },
                supported: isEffectsSupported && isEffectsEnabled
              }
            ],
            activeBackground: background
          }
        ),
        /* @__PURE__ */ import_react167.default.createElement(Flex, { direction: "column", css: { w: "100%", gap: "$8", mt: "$8" } }, background === import_hmsvbplugin4.HMSVirtualBackgroundTypes.BLUR && isEffectsEnabled && effectsKey ? /* @__PURE__ */ import_react167.default.createElement(Box, null, /* @__PURE__ */ import_react167.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_high", fontWeight: "$semiBold", mb: "$4" } }, "Blur intensity"), /* @__PURE__ */ import_react167.default.createElement(Flex, { css: { w: "100%", justifyContent: "space-between", alignItems: "center", gap: "$4" } }, /* @__PURE__ */ import_react167.default.createElement(Text, { variant: "caption", css: { fontWeight: "$medium", color: "$on_surface_medium" } }, "Low"), /* @__PURE__ */ import_react167.default.createElement(
          Slider,
          {
            showTooltip: false,
            value: [blurAmount],
            onValueChange: async (e) => {
              setBlurAmount(e[0]);
              await VBHandler.setBlur(e[0]);
            },
            step: 0.1,
            min: 0.1,
            max: 1
          }
        ), /* @__PURE__ */ import_react167.default.createElement(Text, { variant: "caption", css: { fontWeight: "$medium", color: "$on_surface_medium" } }, "High"))) : null),
        /* @__PURE__ */ import_react167.default.createElement(
          VBCollection,
          {
            title: "Backgrounds",
            options: mediaList.map((mediaURL) => ({
              mediaURL,
              value: mediaURL,
              onClick: async () => {
                await VBHandler?.setBackground(mediaURL);
                hmsActions.setAppData(APP_DATA.background, mediaURL);
              },
              supported: true
            })),
            activeBackground: background
          }
        )
      ));
    };
  }
});

// src/Prebuilt/layouts/SidePane.tsx
var import_react168, import_react_use33, import_ts_pattern12, import_react_sdk88, Wrapper3, SidePane, SidePane_default;
var init_SidePane = __esm({
  "src/Prebuilt/layouts/SidePane.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react168 = __toESM(require("react"));
    import_react_use33 = require("react-use");
    import_ts_pattern12 = require("ts-pattern");
    import_react_sdk88 = require("@100mslive/react-sdk");
    init_Polls();
    init_RoomDetailsPane();
    init_LayoutSettings();
    init_SidePaneTabs();
    init_VideoTile2();
    init_VBPicker();
    init_Layout();
    init_Theme();
    init_useSidepane();
    init_useUISettings();
    init_useRoomLayoutScreen();
    init_hooks();
    init_utils();
    init_constants();
    Wrapper3 = styled("div", {
      w: "$100",
      h: "100%",
      p: "$10",
      flex: "1 1 0",
      background: "$surface_dim",
      r: "$1",
      position: "relative",
      "@lg": {
        w: "100%",
        h: "100%",
        ml: 0,
        right: 0,
        position: "fixed",
        bottom: 0,
        borderRadius: 0,
        zIndex: 10
      },
      "@md": {
        p: "$6 $8",
        animation: `${translateAcross({ yFrom: "100%" })} 150ms cubic-bezier(0.22, 1, 0.36, 1)`
      },
      variants: {
        landscapeStream: {
          true: {
            "@lg": {
              position: "unset",
              minHeight: "100%"
            }
          }
        },
        mobileStream: {
          true: {
            "@md": {
              position: "unset"
            }
          }
        },
        overlayChat: {
          true: {
            "@lg": {
              maxHeight: "300px",
              background: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 35.94%, rgba(0, 0, 0, 0.64) 100%)",
              position: "fixed",
              zIndex: 12,
              bottom: 0
            }
          }
        },
        roomDescription: {
          true: {
            overflowY: "auto"
          }
        },
        hideControls: {
          true: {}
        },
        virtualBackground: {
          true: {
            maxHeight: "100%",
            background: "$surface_dim"
          }
        }
      },
      compoundVariants: [
        {
          landscapeStream: true,
          overlayChat: true,
          css: {
            position: "unset",
            height: "100%",
            maxHeight: "unset",
            "@md": {
              pb: 0
            }
          }
        },
        {
          mobileStream: true,
          overlayChat: true,
          css: {
            position: "unset",
            height: "100%",
            maxHeight: "unset"
          }
        },
        {
          hideControls: false,
          overlayChat: true,
          css: {
            pb: "$17"
          }
        }
      ]
    });
    SidePane = ({
      tileProps,
      hideControls = false
    }) => {
      const isMobile = (0, import_react_use33.useMedia)(config.media.md);
      const sidepane = (0, import_react_sdk88.useHMSStore)((0, import_react_sdk88.selectAppData)(APP_DATA.sidePane));
      const activeScreensharePeerId = (0, import_react_sdk88.useHMSStore)((0, import_react_sdk88.selectAppData)(APP_DATA.activeScreensharePeerId));
      const trackId = (0, import_react_sdk88.useHMSStore)((0, import_react_sdk88.selectVideoTrackByPeerID)(activeScreensharePeerId))?.id;
      const { elements } = useRoomLayoutConferencingScreen();
      const { elements: preview_elements } = useRoomLayoutPreviewScreen();
      const layoutMode = useUISettings(UI_SETTINGS.layoutMode);
      const isLandscapeHLSStream = useLandscapeHLSStream();
      const isMobileHLSStream = useMobileHLSStream();
      const backgroundMedia = preview_elements?.virtual_background?.background_media?.length ? preview_elements?.virtual_background?.background_media : elements?.virtual_background?.background_media || [];
      const tileLayout = {
        hideParticipantNameOnTile: tileProps?.hide_participant_name_on_tile,
        roundedVideoTile: tileProps?.rounded_video_tile,
        hideAudioMuteOnTile: tileProps?.hide_audio_mute_on_tile,
        hideMetadataOnTile: tileProps?.hide_metadata_on_tile,
        objectFit: tileProps?.video_object_fit
      };
      const mwebStreamingChat = isMobile && sidepane === SIDE_PANE_OPTIONS.CHAT && elements?.chat?.is_overlay;
      const commonProps = {
        landscapeStream: isLandscapeHLSStream,
        mobileStream: isMobileHLSStream,
        hideControls,
        overlayChat: !!elements?.chat?.is_overlay,
        roomDescription: sidepane === SIDE_PANE_OPTIONS.ROOM_DETAILS,
        virtualBackground: sidepane === SIDE_PANE_OPTIONS.VB
      };
      const SidepaneComponent = (0, import_ts_pattern12.match)(sidepane).with(SIDE_PANE_OPTIONS.POLLS, () => /* @__PURE__ */ import_react168.default.createElement(
        Wrapper3,
        {
          css: {
            "@md": {
              borderTopLeftRadius: "$2",
              borderTopRightRadius: "$2"
            }
          },
          ...commonProps
        },
        /* @__PURE__ */ import_react168.default.createElement(Polls, null)
      )).with(SIDE_PANE_OPTIONS.VB, () => /* @__PURE__ */ import_react168.default.createElement(Wrapper3, { css: { p: "$10 $6 $10 $10" }, ...commonProps }, /* @__PURE__ */ import_react168.default.createElement(VBPicker, { backgroundMedia }))).with(SIDE_PANE_OPTIONS.CHAT, SIDE_PANE_OPTIONS.PARTICIPANTS, () => /* @__PURE__ */ import_react168.default.createElement(Wrapper3, { ...commonProps, overlayChat: mwebStreamingChat }, /* @__PURE__ */ import_react168.default.createElement(SidePaneTabs, { active: sidepane, hideTab: isMobileHLSStream || isLandscapeHLSStream }))).with(SIDE_PANE_OPTIONS.ROOM_DETAILS, () => /* @__PURE__ */ import_react168.default.createElement(Wrapper3, { ...commonProps }, /* @__PURE__ */ import_react168.default.createElement(RoomDetailsPane, null))).otherwise(() => {
        return null;
      });
      const resetSidePane = useSidepaneReset();
      (0, import_react168.useEffect)(() => {
        return () => {
          resetSidePane();
        };
      }, [resetSidePane]);
      if (!SidepaneComponent && !trackId) {
        return null;
      }
      return /* @__PURE__ */ import_react168.default.createElement(
        Flex,
        {
          direction: "column",
          justify: "center",
          css: {
            w: (0, import_ts_pattern12.match)({ isMobileHLSStream, isLandscapeHLSStream }).with({ isLandscapeHLSStream: true }, () => "340px").with({ isMobileHLSStream: true }, () => "100%").otherwise(() => "$100"),
            h: "100%",
            flexShrink: 0,
            gap: "$4",
            position: "relative",
            "&:empty": { display: "none" },
            "@md": {
              position: "absolute",
              zIndex: 12
            }
          }
        },
        trackId && layoutMode === LayoutMode.GALLERY && /* @__PURE__ */ import_react168.default.createElement(
          VideoTile_default,
          {
            peerId: activeScreensharePeerId,
            trackId,
            width: "100%",
            height: 225,
            rootCSS: { p: 0, alignSelf: "start", flexShrink: 0 },
            ...tileLayout
          }
        ),
        SidepaneComponent
      );
    };
    SidePane_default = SidePane;
  }
});

// src/Prebuilt/components/Chip.tsx
var import_react169, Chip, Chip_default;
var init_Chip = __esm({
  "src/Prebuilt/components/Chip.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react169 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    Chip = ({
      icon = /* @__PURE__ */ import_react169.default.createElement(import_react169.default.Fragment, null),
      content = "",
      backgroundColor = "$surface_default",
      textColor = "$on_surface_high",
      hideIfNoContent = false,
      onClick,
      css: css2 = {}
    }) => {
      if (hideIfNoContent && !content) {
        return null;
      }
      return /* @__PURE__ */ import_react169.default.createElement(
        Flex,
        {
          align: "center",
          css: { backgroundColor, p: "$4 $6", gap: "$2", borderRadius: "$4", ...css2 },
          onClick: () => onClick?.()
        },
        icon,
        /* @__PURE__ */ import_react169.default.createElement(Text, { variant: "sm", css: { fontWeight: "$semiBold", color: textColor } }, content)
      );
    };
    Chip_default = Chip;
  }
});

// src/Prebuilt/components/FullPageProgress.tsx
var import_react170, FullPageProgress, FullPageProgress_default;
var init_FullPageProgress = __esm({
  "src/Prebuilt/components/FullPageProgress.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react170 = __toESM(require("react"));
    init_Layout();
    init_Loading2();
    init_Text2();
    FullPageProgress = ({
      loaderColor = "$primary_default",
      text = "",
      css: css2 = {}
    }) => /* @__PURE__ */ import_react170.default.createElement(Flex, { direction: "column", justify: "center", align: "center", css: { size: "100%", color: loaderColor, ...css2 } }, /* @__PURE__ */ import_react170.default.createElement(Loading, { color: "currentColor", size: 100 }), text ? /* @__PURE__ */ import_react170.default.createElement(Text, { css: { mt: "$10", color: "$on_surface_high" } }, text) : null);
    FullPageProgress_default = FullPageProgress;
  }
});

// src/Prebuilt/components/Preview/PreviewForm.tsx
var import_react171, import_react_use34, import_join_form3, import_react_sdk89, import_react_icons80, PreviewForm, Form, PreviewForm_default;
var init_PreviewForm = __esm({
  "src/Prebuilt/components/Preview/PreviewForm.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react171 = __toESM(require("react"));
    import_react_use34 = require("react-use");
    import_join_form3 = require("@100mslive/types-prebuilt/elements/join_form");
    import_react_sdk89 = require("@100mslive/react-sdk");
    import_react_icons80 = require("@100mslive/react-icons");
    init_src();
    init_roomLayoutProvider();
    init_PreviewJoin();
    PreviewForm = ({
      name,
      disabled,
      onChange,
      onJoin,
      enableJoin,
      cannotPublishVideo = false,
      cannotPublishAudio = false
    }) => {
      const formSubmit = (e) => {
        e.preventDefault();
      };
      const isMobile = (0, import_react_use34.useMedia)(config.media.md);
      const { isHLSRunning, isRTMPRunning, isHLSRecordingOn, isBrowserRecordingOn } = (0, import_react_sdk89.useRecordingStreaming)();
      const layout = useRoomLayout();
      const { join_form: joinForm = {} } = layout?.screens?.preview?.default?.elements || {};
      const showGoLive = joinForm?.join_btn_type === import_join_form3.JoinForm_JoinBtnType.JOIN_BTN_TYPE_JOIN_AND_GO_LIVE && !isHLSRunning && !isRTMPRunning && !isHLSRecordingOn && !isBrowserRecordingOn;
      return /* @__PURE__ */ import_react171.default.createElement(
        Form,
        {
          css: { flexDirection: cannotPublishVideo ? "column" : "row", "@md": { flexDirection: "row" } },
          onSubmit: formSubmit
        },
        /* @__PURE__ */ import_react171.default.createElement(Flex, { align: "center", css: { gap: "$8", w: "100%" } }, /* @__PURE__ */ import_react171.default.createElement(
          Input,
          {
            required: true,
            id: "name",
            disabled,
            css: { w: "100%", boxSizing: "border-box" },
            value: name,
            onChange: (e) => onChange(e.target.value.trimStart()),
            placeholder: "Enter name",
            autoFocus: true,
            autoComplete: "name",
            onKeyDown: (e) => {
              if (e.key === "Enter" && name.trim().length > 0) {
                e.preventDefault();
                if (isMobile) {
                  return;
                }
                onJoin();
              }
            }
          }
        ), cannotPublishAudio && cannotPublishVideo && !isMobile ? /* @__PURE__ */ import_react171.default.createElement(PreviewSettings, null) : null),
        /* @__PURE__ */ import_react171.default.createElement(Button, { type: "submit", icon: true, disabled: !name || !enableJoin, onClick: onJoin }, showGoLive ? /* @__PURE__ */ import_react171.default.createElement(import_react_icons80.GoLiveIcon, { height: 18, width: 18 }) : null, showGoLive ? joinForm.go_live_btn_label : joinForm.join_btn_label)
      );
    };
    Form = styled("form", {
      width: "100%",
      display: "flex",
      alignItems: "center",
      gap: "$8",
      mt: "$10",
      mb: "$10",
      "@md": {
        gap: "$4"
      }
    });
    PreviewForm_default = PreviewForm;
  }
});

// src/Prebuilt/components/Preview/PreviewJoin.tsx
var import_react172, import_react_use35, import_react_sdk90, import_react_icons81, getParticipantChipContent, useLocalTileAspectRatio, PreviewJoin, Container4, PreviewTile, PreviewControls, PreviewSettings, PreviewJoin_default;
var init_PreviewJoin = __esm({
  "src/Prebuilt/components/Preview/PreviewJoin.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react172 = __toESM(require("react"));
    import_react_use35 = require("react-use");
    import_react_sdk90 = require("@100mslive/react-sdk");
    import_react_icons81 = require("@100mslive/react-icons");
    init_src();
    init_AudioLevel2();
    init_AppContext();
    init_IconButton3();
    init_SidePane();
    init_AudioVideoToggle();
    init_Chip();
    init_TileConnection();
    init_FullPageProgress();
    init_HeaderComponents();
    init_SettingsModal();
    init_VBToggle();
    init_PreviewForm();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_useUserPreferences();
    init_utils2();
    init_constants();
    getParticipantChipContent = (peerCount = 0) => {
      if (peerCount === 0) {
        return "You are the first to join";
      }
      const formattedNum = getFormattedCount(peerCount);
      return `${formattedNum} other${parseInt(formattedNum) === 1 ? "" : "s"} in the session`;
    };
    useLocalTileAspectRatio = () => {
      const localPeer = (0, import_react_sdk90.useHMSStore)(import_react_sdk90.selectLocalPeer);
      const videoTrack = (0, import_react_sdk90.useHMSStore)((0, import_react_sdk90.selectVideoTrackByID)(localPeer?.videoTrack));
      const isMobile = (0, import_react_use35.useMedia)(config.media.md);
      let aspectRatio = 0;
      if (videoTrack?.width && videoTrack?.height) {
        aspectRatio = videoTrack.width / videoTrack.height;
      } else {
        aspectRatio = isMobile ? 9 / 16 : 16 / 9;
      }
      return aspectRatio;
    };
    PreviewJoin = ({
      skipPreview,
      initialName,
      asRole
    }) => {
      const [previewPreference, setPreviewPreference] = useUserPreferences(
        UserPreferencesKeys.PREVIEW,
        defaultPreviewPreference
      );
      const { isStreamingOn } = (0, import_react_sdk90.useRecordingStreaming)();
      const authToken = useAuthToken();
      const [name, setName] = (0, import_react172.useState)(initialName || previewPreference.name);
      const { toggleAudio, toggleVideo } = (0, import_react_sdk90.useAVToggle)();
      const [previewError, setPreviewError] = (0, import_react172.useState)(false);
      const { endpoints } = useHMSPrebuiltContext();
      const { peerCount } = (0, import_react_sdk90.useParticipants)();
      const loadingEffects = (0, import_react_sdk90.useHMSStore)((0, import_react_sdk90.selectAppData)(APP_DATA.loadingEffects));
      const { enableJoin, preview, join } = (0, import_react_sdk90.usePreviewJoin)({
        name,
        token: authToken,
        initEndpoint: endpoints?.init,
        initialSettings: {
          isAudioMuted: skipPreview || previewPreference.isAudioMuted,
          isVideoMuted: skipPreview || previewPreference.isVideoMuted,
          speakerAutoSelectionBlacklist: ["Yeti Stereo Microphone"]
        },
        captureNetworkQualityInPreview: true,
        handleError: (_, method) => {
          if (method === "preview") {
            setPreviewError(true);
          }
        },
        asRole
      });
      const { requestPermission } = (0, import_react_sdk90.useAwayNotifications)();
      const roomState = (0, import_react_sdk90.useHMSStore)(import_react_sdk90.selectRoomState);
      const savePreferenceAndJoin = (0, import_react172.useCallback)(() => {
        setPreviewPreference({
          name
        });
        join();
      }, [join, name, setPreviewPreference]);
      const { elements = {} } = useRoomLayoutPreviewScreen();
      const { preview_header: previewHeader = {}, virtual_background } = elements || {};
      const aspectRatio = useLocalTileAspectRatio();
      (0, import_react172.useEffect)(() => {
        if (authToken) {
          if (skipPreview) {
            savePreferenceAndJoin();
          } else {
            preview().then(() => requestPermission());
          }
        }
      }, [authToken, skipPreview]);
      (0, import_react172.useEffect)(() => {
        if (initialName) {
          setName(initialName);
        }
      }, [initialName]);
      return roomState === import_react_sdk90.HMSRoomState.Preview ? /* @__PURE__ */ import_react172.default.createElement(Flex, { justify: "center", css: { size: "100%", position: "relative" } }, /* @__PURE__ */ import_react172.default.createElement(Container4, { css: { h: "100%", pt: "$6", "@md": { justifyContent: "space-between", pt: "$10" } } }, toggleVideo ? null : /* @__PURE__ */ import_react172.default.createElement(Box, null), /* @__PURE__ */ import_react172.default.createElement(Flex, { direction: "column", justify: "center", css: { w: "100%", maxWidth: "600px", gap: "$8" } }, /* @__PURE__ */ import_react172.default.createElement(Logo, null), /* @__PURE__ */ import_react172.default.createElement(Text, { variant: "h4", css: { wordBreak: "break-word", textAlign: "center" } }, previewHeader.title), /* @__PURE__ */ import_react172.default.createElement(
        Text,
        {
          css: { c: "$on_surface_medium", textAlign: "center", maxWidth: "100%", wordWrap: "break-word" },
          variant: "sm"
        },
        previewHeader.sub_title
      ), /* @__PURE__ */ import_react172.default.createElement(Flex, { justify: "center", css: { gap: "$4" } }, isStreamingOn ? /* @__PURE__ */ import_react172.default.createElement(
        Chip_default,
        {
          content: "LIVE",
          backgroundColor: "$alert_error_default",
          textColor: "#FFF",
          icon: /* @__PURE__ */ import_react172.default.createElement(Box, { css: { h: "$sm", w: "$sm", backgroundColor: "$on_primary_high", borderRadius: "$round" } })
        }
      ) : null, /* @__PURE__ */ import_react172.default.createElement(Chip_default, { content: getParticipantChipContent(peerCount), hideIfNoContent: true }))), toggleVideo ? /* @__PURE__ */ import_react172.default.createElement(PreviewTile, { name, error: previewError }) : null, /* @__PURE__ */ import_react172.default.createElement(Box, { css: { w: "100%", maxWidth: `${Math.max(aspectRatio, 1) * 340}px` } }, /* @__PURE__ */ import_react172.default.createElement(PreviewControls, { hideSettings: !toggleVideo && !toggleAudio, vbEnabled: !!virtual_background }), /* @__PURE__ */ import_react172.default.createElement(
        PreviewForm_default,
        {
          name,
          disabled: !!initialName,
          onChange: setName,
          enableJoin: enableJoin && !loadingEffects,
          onJoin: savePreferenceAndJoin,
          cannotPublishVideo: !toggleVideo,
          cannotPublishAudio: !toggleAudio
        }
      ))), /* @__PURE__ */ import_react172.default.createElement(Box, { css: { position: "absolute", right: "0", top: 0, height: "100%", overflow: "hidden" } }, /* @__PURE__ */ import_react172.default.createElement(SidePane_default, null))) : /* @__PURE__ */ import_react172.default.createElement(FullPageProgress_default, null);
    };
    Container4 = styled("div", {
      width: "100%",
      ...flexCenter,
      flexDirection: "column",
      px: "$10"
    });
    PreviewTile = ({ name, error }) => {
      const localPeer = (0, import_react_sdk90.useHMSStore)(import_react_sdk90.selectLocalPeer);
      const { isLocalAudioEnabled, toggleAudio } = (0, import_react_sdk90.useAVToggle)();
      const isVideoOn = (0, import_react_sdk90.useHMSStore)(import_react_sdk90.selectIsLocalVideoEnabled);
      const mirrorLocalVideo = useUISettings(UI_SETTINGS.mirrorLocalVideo);
      const trackSelector = (0, import_react_sdk90.selectVideoTrackByID)(localPeer?.videoTrack);
      const track = (0, import_react_sdk90.useHMSStore)(trackSelector);
      const showMuteIcon = !isLocalAudioEnabled || !toggleAudio;
      const aspectRatio = useLocalTileAspectRatio();
      const [ref, { width: calculatedWidth, height: calculatedHeight }] = (0, import_react_use35.useMeasure)();
      const [avatarSize, attribBoxSize] = (0, import_react172.useMemo)(
        () => calculateAvatarAndAttribBoxSize(calculatedWidth, calculatedHeight),
        [calculatedWidth, calculatedHeight]
      );
      return /* @__PURE__ */ import_react172.default.createElement(
        StyledVideoTile.Container,
        {
          ref,
          css: {
            bg: "$surface_default",
            aspectRatio,
            height: "min(340px, 70vh)",
            width: "auto",
            maxWidth: "600px",
            overflow: "clip",
            mt: "$10",
            "@md": {
              mt: 0,
              width: "min(220px, 70vw)",
              maxWidth: "100%",
              my: "$4"
            }
          }
        },
        localPeer ? /* @__PURE__ */ import_react172.default.createElement(import_react172.default.Fragment, null, /* @__PURE__ */ import_react172.default.createElement(TileConnection_default, { name: "", peerId: localPeer.id, hideLabel: false }), /* @__PURE__ */ import_react172.default.createElement(
          Video,
          {
            mirror: track?.facingMode !== "environment" && mirrorLocalVideo,
            trackId: localPeer.videoTrack,
            "data-testid": "preview_tile"
          }
        ), !isVideoOn ? /* @__PURE__ */ import_react172.default.createElement(StyledVideoTile.AvatarContainer, null, /* @__PURE__ */ import_react172.default.createElement(Avatar, { name, "data-testid": "preview_avatar_tile", size: avatarSize })) : null) : null,
        !localPeer && !error ? /* @__PURE__ */ import_react172.default.createElement(FullPageProgress_default, null) : null,
        showMuteIcon ? /* @__PURE__ */ import_react172.default.createElement(StyledVideoTile.AudioIndicator, { size: attribBoxSize }, /* @__PURE__ */ import_react172.default.createElement(import_react_icons81.MicOffIcon, null)) : /* @__PURE__ */ import_react172.default.createElement(StyledVideoTile.AudioIndicator, { size: attribBoxSize }, /* @__PURE__ */ import_react172.default.createElement(AudioLevel, { trackId: localPeer?.audioTrack }))
      );
    };
    PreviewControls = ({ hideSettings, vbEnabled }) => {
      const isMobile = (0, import_react_use35.useMedia)(config.media.md);
      const isVBEnabledForUser = (0, import_react_sdk90.useHMSStore)(import_react_sdk90.selectIsVBEnabled);
      return /* @__PURE__ */ import_react172.default.createElement(
        Flex,
        {
          justify: hideSettings && isMobile ? "center" : "between",
          css: {
            width: "100%",
            mt: "$6"
          }
        },
        /* @__PURE__ */ import_react172.default.createElement(Flex, { css: { gap: "$4" } }, /* @__PURE__ */ import_react172.default.createElement(AudioVideoToggle, null), vbEnabled && isVBEnabledForUser ? /* @__PURE__ */ import_react172.default.createElement(VBToggle, null) : null),
        /* @__PURE__ */ import_react172.default.createElement(Flex, { align: "center", gap: "1" }, isMobile && /* @__PURE__ */ import_react172.default.createElement(NoiseCancellation, { iconOnly: true }), !hideSettings ? /* @__PURE__ */ import_react172.default.createElement(PreviewSettings, null) : null)
      );
    };
    PreviewSettings = import_react172.default.memo(() => {
      const [open, setOpen] = (0, import_react172.useState)(false);
      return /* @__PURE__ */ import_react172.default.createElement(import_react172.Fragment, null, /* @__PURE__ */ import_react172.default.createElement(IconButton_default, { "data-testid": "preview_setting_btn", css: { flexShrink: 0 }, onClick: () => setOpen((value) => !value) }, /* @__PURE__ */ import_react172.default.createElement(import_react_icons81.SettingsIcon, null)), open && /* @__PURE__ */ import_react172.default.createElement(SettingsModal_default, { open, onOpenChange: setOpen }));
    });
    PreviewJoin_default = PreviewJoin;
  }
});

// src/Prebuilt/components/RoleChangeRequest/RequestPrompt.tsx
var import_react173, import_react_use36, RequestPrompt, RequestActions;
var init_RequestPrompt = __esm({
  "src/Prebuilt/components/RoleChangeRequest/RequestPrompt.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react173 = __toESM(require("react"));
    import_react_use36 = require("react-use");
    init_src();
    init_Sheet2();
    RequestPrompt = ({
      open = true,
      onOpenChange,
      title,
      body,
      actionText = "Accept",
      onAction,
      disableActions = false
    }) => {
      const isMobile = (0, import_react_use36.useMedia)(config.media.md);
      if (isMobile) {
        return /* @__PURE__ */ import_react173.default.createElement(Sheet.Root, { open, onOpenChange }, /* @__PURE__ */ import_react173.default.createElement(Sheet.Content, { css: { py: "$8" } }, /* @__PURE__ */ import_react173.default.createElement(Text, { css: { fontWeight: "$semiBold", c: "$on_surface_high", "@md": { px: "$8" } } }, title), body, /* @__PURE__ */ import_react173.default.createElement(RequestActions, { actionText, onAction, disabled: disableActions })));
      }
      return /* @__PURE__ */ import_react173.default.createElement(Dialog.Root, { open, modal: false, onOpenChange }, /* @__PURE__ */ import_react173.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react173.default.createElement(Dialog.Content, { css: { p: "$10" }, onInteractOutside: (e) => e.preventDefault() }, /* @__PURE__ */ import_react173.default.createElement(Dialog.Title, { css: { p: 0, display: "flex", flexDirection: "row", gap: "$md", justifyContent: "center" } }, /* @__PURE__ */ import_react173.default.createElement(Text, { variant: "h6" }, title)), /* @__PURE__ */ import_react173.default.createElement(Box, { css: { mt: "$4", mb: "$10" } }, body), /* @__PURE__ */ import_react173.default.createElement(RequestActions, { actionText, onAction, disabled: disableActions }))));
    };
    RequestActions = ({
      onAction,
      actionText,
      disabled = false
    }) => /* @__PURE__ */ import_react173.default.createElement(Flex, { justify: "center", align: "center", css: { width: "100%", gap: "$md", "@md": { mt: "$8", px: "$8" } } }, /* @__PURE__ */ import_react173.default.createElement(Box, { css: { width: "50%" } }, /* @__PURE__ */ import_react173.default.createElement(Dialog.Close, { css: { width: "100%", height: "100%" }, asChild: true }, /* @__PURE__ */ import_react173.default.createElement(Button, { variant: "standard", outlined: true, css: { width: "100%", p: "$4 $8" }, disabled }, "Decline"))), /* @__PURE__ */ import_react173.default.createElement(Box, { css: { width: "50%" } }, /* @__PURE__ */ import_react173.default.createElement(Button, { variant: "primary", css: { width: "100%" }, onClick: onAction, disabled }, actionText)));
  }
});

// src/Prebuilt/components/RoleChangeRequest/RoleChangeRequestModal.tsx
var import_react174, import_react_sdk91, RoleChangeRequestModal;
var init_RoleChangeRequestModal = __esm({
  "src/Prebuilt/components/RoleChangeRequest/RoleChangeRequestModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react174 = __toESM(require("react"));
    import_react_sdk91 = require("@100mslive/react-sdk");
    init_src();
    init_PreviewJoin();
    init_RequestPrompt();
    init_useRoomLayoutScreen();
    init_useMetadata();
    init_constants();
    RoleChangeRequestModal = () => {
      const hmsActions = (0, import_react_sdk91.useHMSActions)();
      const { updateMetaData } = useMyMetadata();
      const isPreview = (0, import_react_sdk91.useHMSStore)(import_react_sdk91.selectIsInPreview);
      const currentRole = (0, import_react_sdk91.useHMSStore)(import_react_sdk91.selectLocalPeerRoleName);
      const roleChangeRequest = (0, import_react_sdk91.useHMSStore)(import_react_sdk91.selectRoleChangeRequest);
      const name = (0, import_react_sdk91.useHMSStore)(import_react_sdk91.selectLocalPeerName);
      const { sendEvent } = (0, import_react_sdk91.useCustomEvent)({ type: ROLE_CHANGE_DECLINED });
      const { elements = {} } = useRoomLayoutPreviewScreen();
      const { virtual_background } = elements || {};
      (0, import_react174.useEffect)(() => {
        if (!roleChangeRequest?.role) {
          return;
        }
        (async () => {
          await hmsActions.preview({ asRole: roleChangeRequest.role.name });
        })();
      }, [hmsActions, roleChangeRequest, currentRole, updateMetaData]);
      if (!roleChangeRequest?.role) {
        return null;
      }
      const body = /* @__PURE__ */ import_react174.default.createElement(import_react174.default.Fragment, null, /* @__PURE__ */ import_react174.default.createElement(
        Text,
        {
          variant: "xs",
          css: {
            c: "$on_surface_medium",
            textAlign: "center",
            "@md": { textAlign: "left", borderBottom: "1px solid $border_bright", pb: "$4", px: "$8" }
          }
        },
        "Setup your audio and video before joining"
      ), /* @__PURE__ */ import_react174.default.createElement(
        Flex,
        {
          align: "center",
          justify: "center",
          css: {
            "@sm": { width: "100%" },
            flexDirection: "column",
            mt: "$6",
            "@md": { px: "$8" }
          }
        },
        /* @__PURE__ */ import_react174.default.createElement(PreviewTile, { name: name || "" }),
        /* @__PURE__ */ import_react174.default.createElement(PreviewControls, { hideSettings: true, vbEnabled: !!virtual_background })
      ));
      return /* @__PURE__ */ import_react174.default.createElement(
        RequestPrompt,
        {
          title: "You're invited to join the stage",
          onOpenChange: async (value) => {
            if (!value) {
              hmsActions.rejectChangeRole(roleChangeRequest);
              sendEvent({ ...roleChangeRequest, peerName: name }, { peerId: roleChangeRequest.requestedBy?.id });
              await hmsActions.cancelMidCallPreview();
              await hmsActions.lowerLocalPeerHand();
            }
          },
          body,
          onAction: async () => {
            await hmsActions.acceptChangeRole(roleChangeRequest);
            await updateMetaData({ prevRole: currentRole });
            await hmsActions.lowerLocalPeerHand();
          },
          actionText: "Accept",
          disableActions: !isPreview
        }
      );
    };
  }
});

// src/Prebuilt/layouts/WaitingView.tsx
var import_react175, WaitingView;
var init_WaitingView = __esm({
  "src/Prebuilt/layouts/WaitingView.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react175 = __toESM(require("react"));
    init_Layout();
    init_Text2();
    WaitingView = import_react175.default.memo(
      ({ icon, title, subtitle }) => {
        return /* @__PURE__ */ import_react175.default.createElement(
          Flex,
          {
            align: "center",
            direction: "column",
            css: {
              textAlign: "center",
              margin: "auto",
              h: "100%",
              justifyContent: "center",
              gap: "$8"
            }
          },
          /* @__PURE__ */ import_react175.default.createElement(
            Box,
            {
              css: {
                backgroundColor: "$surface_default",
                display: "flex",
                alignItems: "center",
                gap: "$4",
                size: "$20",
                r: "$round",
                justifyContent: "center"
              }
            },
            icon
          ),
          /* @__PURE__ */ import_react175.default.createElement(
            Flex,
            {
              direction: "column",
              css: {
                p: "$1",
                gap: "$4"
              }
            },
            /* @__PURE__ */ import_react175.default.createElement(Text, { variant: "h4", css: { "@md": { fontSize: "$md", color: "$on_surface_high" } } }, title),
            /* @__PURE__ */ import_react175.default.createElement(
              Text,
              {
                variant: "body1",
                css: { fontWeight: "$regular", color: "$on_surface_medium", "@md": { fontSize: "$sm" } }
              },
              subtitle
            )
          )
        );
      }
    );
  }
});

// src/Prebuilt/components/hooks/useVideoTileLayout.ts
var import_react176, VideoTileContext, useVideoTileContext;
var init_useVideoTileLayout = __esm({
  "src/Prebuilt/components/hooks/useVideoTileLayout.ts"() {
    "use strict";
    init_cjs_shims();
    import_react176 = __toESM(require("react"));
    VideoTileContext = import_react176.default.createContext({
      enableSpotlightingPeer: true,
      hideParticipantNameOnTile: false,
      roundedVideoTile: true,
      hideAudioMuteOnTile: false,
      hideAudioLevelOnTile: false,
      objectFit: "contain",
      hideMetadataOnTile: false
    });
    useVideoTileContext = () => {
      const context = (0, import_react176.useContext)(VideoTileContext);
      return context;
    };
  }
});

// src/Prebuilt/components/InsetTile.tsx
var import_react177, import_react_draggable, import_react_use37, import_react_sdk92, import_react_icons82, MinimisedTile, insetHeightPx, insetMaxWidthPx, defaultMobileAspectRatio, desktopAspectRatio, InsetTile;
var init_InsetTile = __esm({
  "src/Prebuilt/components/InsetTile.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react177 = __toESM(require("react"));
    import_react_draggable = __toESM(require("react-draggable"));
    import_react_use37 = require("react-use");
    import_react_sdk92 = require("@100mslive/react-sdk");
    import_react_icons82 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_Theme();
    init_IconButton3();
    init_AudioVideoToggle();
    init_VideoTile2();
    init_useUISettings();
    init_useVideoTileLayout();
    init_constants();
    MinimisedTile = ({ setMinimised }) => {
      return /* @__PURE__ */ import_react177.default.createElement(Flex, { align: "center", css: { gap: "$6", r: "$1", bg: "$surface_default", p: "$4", color: "$on_surface_high" } }, /* @__PURE__ */ import_react177.default.createElement(AudioVideoToggle, { hideOptions: true }), /* @__PURE__ */ import_react177.default.createElement(Text, null, "You"), /* @__PURE__ */ import_react177.default.createElement(
        IconButton_default,
        {
          className: "__cancel-drag-event",
          onClick: () => setMinimised(false),
          css: { bg: "transparent", border: "transparent" }
        },
        /* @__PURE__ */ import_react177.default.createElement(import_react_icons82.ExpandIcon, null)
      ));
    };
    insetHeightPx = 180;
    insetMaxWidthPx = 240;
    defaultMobileAspectRatio = 9 / 16;
    desktopAspectRatio = 1 / defaultMobileAspectRatio;
    InsetTile = ({ peerId }) => {
      const isMobile = (0, import_react_use37.useMedia)(config.media.md);
      const isLandscape = (0, import_react_use37.useMedia)(config.media.ls);
      const selector = peerId ? (0, import_react_sdk92.selectPeerByID)(peerId) : import_react_sdk92.selectLocalPeer;
      const peer = (0, import_react_sdk92.useHMSStore)(selector);
      const [minimised, setMinimised] = useSetAppDataByKey(APP_DATA.minimiseInset);
      const videoTrack = (0, import_react_sdk92.useHMSStore)((0, import_react_sdk92.selectVideoTrackByID)(peer?.videoTrack));
      const isAllowedToPublish = (0, import_react_sdk92.useHMSStore)(import_react_sdk92.selectIsAllowedToPublish);
      const videoTileProps = useVideoTileContext();
      let aspectRatio = isMobile ? defaultMobileAspectRatio : desktopAspectRatio;
      if (videoTrack?.width && videoTrack?.height && !isMobile) {
        aspectRatio = videoTrack.width / videoTrack.height;
      }
      let height = insetHeightPx;
      let width = height * aspectRatio;
      if (isLandscape && width > insetMaxWidthPx) {
        width = 240;
        height = width / aspectRatio;
      }
      const nodeRef = (0, import_react177.useRef)(null);
      (0, import_react177.useEffect)(() => {
        const node = nodeRef.current;
        if (!node || !window.ResizeObserver) {
          return;
        }
        const resizeObserver = new ResizeObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.target === node.parentElement) {
              node.style.transform = `translate(0,0)`;
            }
          });
        });
        node.parentElement && resizeObserver.observe(node.parentElement);
        return () => {
          node?.parentElement && resizeObserver?.unobserve(node.parentElement);
          resizeObserver?.disconnect();
        };
      }, []);
      if (!isAllowedToPublish.video && !isAllowedToPublish.audio) {
        return null;
      }
      return /* @__PURE__ */ import_react177.default.createElement(import_react_draggable.default, { bounds: "parent", nodeRef, cancel: ".__cancel-drag-event" }, /* @__PURE__ */ import_react177.default.createElement(
        Box,
        {
          ref: nodeRef,
          css: {
            position: "absolute",
            bottom: 0,
            right: 0,
            zIndex: 10,
            boxShadow: "0 0 8px 0 rgba(0,0,0,0.3)",
            r: "$2",
            ...!minimised ? {
              aspectRatio,
              h: height
            } : {}
          }
        },
        minimised ? /* @__PURE__ */ import_react177.default.createElement(MinimisedTile, { setMinimised }) : /* @__PURE__ */ import_react177.default.createElement(
          VideoTile_default,
          {
            peerId: peer?.id,
            trackId: peer?.videoTrack,
            rootCSS: {
              size: "100%",
              padding: 0
            },
            width,
            height,
            containerCSS: { background: "$surface_default" },
            canMinimise: true,
            isDragabble: true,
            ...videoTileProps,
            hideParticipantNameOnTile: true
          }
        )
      ));
    };
  }
});

// src/Prebuilt/components/Pagination.tsx
var import_react178, import_react_icons83, Pagination;
var init_Pagination2 = __esm({
  "src/Prebuilt/components/Pagination.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react178 = __toESM(require("react"));
    import_react_icons83 = require("@100mslive/react-icons");
    init_Pagination();
    Pagination = ({
      page,
      onPageChange,
      numPages
    }) => {
      const disableLeft = page === 0;
      const disableRight = page === numPages - 1;
      const nextPage = (e) => {
        e.stopPropagation();
        onPageChange(Math.min(page + 1, numPages - 1));
      };
      const prevPage = (e) => {
        e.stopPropagation();
        onPageChange(Math.max(page - 1, 0));
      };
      (0, import_react178.useEffect)(() => {
        if (page >= numPages) {
          onPageChange(Math.max(0, numPages - 1));
        }
      }, [numPages, onPageChange, page]);
      if (numPages <= 1) {
        return null;
      }
      return /* @__PURE__ */ import_react178.default.createElement(StyledPagination.Root, { css: { flexShrink: 0 } }, /* @__PURE__ */ import_react178.default.createElement(StyledPagination.Chevron, { disabled: disableLeft, onClick: prevPage }, /* @__PURE__ */ import_react178.default.createElement(import_react_icons83.ChevronLeftIcon, { width: 16, height: 16, style: { cursor: disableLeft ? "not-allowed" : "pointer" } })), numPages <= 5 ? /* @__PURE__ */ import_react178.default.createElement(StyledPagination.Dots, null, [...Array(numPages)].map((_, i) => /* @__PURE__ */ import_react178.default.createElement(
        StyledPagination.Dot,
        {
          key: i,
          active: page === i,
          onClick: (e) => {
            e.stopPropagation();
            onPageChange(i);
          }
        }
      ))) : null, /* @__PURE__ */ import_react178.default.createElement(StyledPagination.Chevron, { disabled: disableRight, onClick: nextPage }, /* @__PURE__ */ import_react178.default.createElement(import_react_icons83.ChevronRightIcon, { width: 16, height: 16, style: { cursor: disableRight ? "not-allowed" : "pointer" } })));
    };
  }
});

// src/Prebuilt/components/VideoLayouts/Grid.tsx
var import_react179, Grid;
var init_Grid = __esm({
  "src/Prebuilt/components/VideoLayouts/Grid.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react179 = __toESM(require("react"));
    init_Layout();
    init_VideoTile2();
    init_useVideoTileLayout();
    Grid = import_react179.default.forwardRef(
      ({ tiles, edgeToEdge }, ref) => {
        const videoTileProps = useVideoTileContext();
        return /* @__PURE__ */ import_react179.default.createElement(
          Box,
          {
            ref,
            css: {
              flex: "1 1 0",
              gap: "$4",
              display: "flex",
              placeContent: "center",
              alignItems: "center",
              justifyContent: "center",
              flexFlow: "row wrap",
              minHeight: 0,
              "@md": { gap: edgeToEdge ? 0 : "$4" }
            }
          },
          tiles?.map((tile) => {
            return /* @__PURE__ */ import_react179.default.createElement(
              VideoTile_default,
              {
                key: tile.track?.id || tile.peer?.id,
                width: tile.width,
                height: tile.height,
                peerId: tile.peer?.id,
                trackId: tile.track?.id,
                rootCSS: { padding: 0 },
                objectFit: "contain",
                ...videoTileProps
              }
            );
          })
        );
      }
    );
  }
});

// src/Prebuilt/components/hooks/useTileLayout.tsx
var import_react180, import_react_use38, import_react_sdk93, aspectRatioConfig, usePagesWithTiles, useTileLayout;
var init_useTileLayout = __esm({
  "src/Prebuilt/components/hooks/useTileLayout.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react180 = require("react");
    import_react_use38 = require("react-use");
    import_react_sdk93 = require("@100mslive/react-sdk");
    init_Theme();
    aspectRatioConfig = { default: [1 / 1, 4 / 3, 16 / 9], mobile: [1 / 1, 3 / 4, 9 / 16] };
    usePagesWithTiles = ({ peers, maxTileCount }) => {
      const vanillaStore = (0, import_react_sdk93.useHMSVanillaStore)();
      const tracksMap = vanillaStore.getState(import_react_sdk93.selectTracksMap);
      const peersWithTiles = (0, import_react180.useMemo)(
        () => (0, import_react_sdk93.getPeersWithTiles)(peers, tracksMap, () => false),
        [peers, tracksMap]
      );
      const noOfPages = Math.ceil(peersWithTiles.length / maxTileCount);
      const pagesList = (0, import_react180.useMemo)(() => {
        let sliceStart = 0;
        let remaining = peersWithTiles.length;
        const list = [];
        for (let i = 0; i < noOfPages; i++) {
          const count = Math.min(remaining, maxTileCount);
          list.push(peersWithTiles.slice(sliceStart, sliceStart + count));
          remaining = remaining - count;
          sliceStart += count;
        }
        return list;
      }, [peersWithTiles, noOfPages, maxTileCount]);
      return pagesList;
    };
    useTileLayout = ({
      pageList,
      maxTileCount,
      edgeToEdge = false
    }) => {
      const vanillaStore = (0, import_react_sdk93.useHMSVanillaStore)();
      const [ref, { width, height }] = (0, import_react_use38.useMeasure)();
      const isMobile = (0, import_react_use38.useMedia)(config.media.lg);
      const [pagesWithTiles, setPagesWithTiles] = (0, import_react180.useState)([]);
      (0, import_react180.useEffect)(() => {
        if (width === 0 || height === 0) {
          return;
        }
        for (const page of pageList) {
          const noOfTilesInPage = page.length;
          let maxCols = noOfTilesInPage > 2 && noOfTilesInPage < 9 ? Math.ceil(noOfTilesInPage / 2) : Math.ceil(Math.sqrt(noOfTilesInPage));
          if (isMobile) {
            maxCols = noOfTilesInPage < 4 ? 1 : Math.min(maxCols, 2);
          }
          const maxRows = Math.ceil(noOfTilesInPage / maxCols);
          let index = 0;
          const matrix = new Array(maxRows).fill(null).map((_, i) => {
            const numCols = Math.min(maxCols, noOfTilesInPage - i * maxCols);
            const rowElements = [];
            for (let j = 0; j < numCols; j++) {
              if (index < page.length) {
                rowElements.push(page[index++]);
              }
            }
            return rowElements;
          });
          const gap = edgeToEdge && isMobile ? 0 : 8;
          const maxHeight = height - (maxRows - 1) * gap;
          const maxRowHeight = maxHeight / matrix.length;
          const aspectRatios = isMobile && (noOfTilesInPage === 1 || noOfTilesInPage > 3) ? aspectRatioConfig.mobile : aspectRatioConfig.default;
          for (const row of matrix) {
            let tileWidth = (width - (row.length - 1) * gap) / row.length;
            let tileHeight = 0;
            if (edgeToEdge) {
              tileHeight = maxRowHeight;
            } else {
              const calcHeights = aspectRatios.map((aR) => tileWidth / aR);
              for (const h of calcHeights) {
                if (h < maxRowHeight) {
                  if (tileHeight < h) {
                    tileHeight = h;
                  }
                }
              }
              if (tileHeight === 0) {
                tileHeight = maxRowHeight;
                const calcWidths = aspectRatios.map((aR) => tileHeight * aR);
                tileWidth = 0;
                for (const w of calcWidths) {
                  if (w < width) {
                    if (tileWidth < w) {
                      tileWidth = w;
                    }
                  }
                }
              }
            }
            for (let i = 0; i < row.length; i++) {
              row[i].width = tileWidth;
              row[i].height = tileHeight;
            }
          }
        }
        setPagesWithTiles([...pageList]);
      }, [width, height, maxTileCount, pageList, vanillaStore, isMobile, edgeToEdge]);
      return { pagesWithTiles, ref };
    };
  }
});

// src/Prebuilt/components/VideoLayouts/EqualProminence.tsx
function EqualProminence({ isInsetEnabled = false, peers, onPageChange, onPageSize, edgeToEdge }) {
  const isMobile = (0, import_react_use39.useMedia)(config.media.md);
  let maxTileCount = useUISettings(UI_SETTINGS.maxTileCount);
  maxTileCount = isMobile ? Math.min(maxTileCount, 6) : maxTileCount;
  const pageList = usePagesWithTiles({
    peers,
    maxTileCount
  });
  const { ref, pagesWithTiles } = useTileLayout({
    pageList,
    maxTileCount,
    edgeToEdge
  });
  const [page, setPage] = (0, import_react181.useState)(0);
  const pageSize = pagesWithTiles[0]?.length || 0;
  (0, import_react181.useEffect)(() => {
    if (pageSize > 0) {
      onPageSize?.(pageSize);
    }
  }, [pageSize, onPageSize]);
  return /* @__PURE__ */ import_react181.default.createElement(Flex, { direction: "column", css: { flex: "1 1 0", h: "100%", position: "relative", minWidth: 0 } }, /* @__PURE__ */ import_react181.default.createElement(Grid, { tiles: pagesWithTiles[page], ref, edgeToEdge }), !edgeToEdge && /* @__PURE__ */ import_react181.default.createElement(
    Pagination,
    {
      page,
      onPageChange: (page2) => {
        setPage(page2);
        onPageChange?.(page2);
      },
      numPages: pagesWithTiles.length
    }
  ), pageList.length === 0 ? /* @__PURE__ */ import_react181.default.createElement(
    WaitingView,
    {
      title: "You're the first to join",
      subtitle: "Sit back and relax till others join",
      icon: /* @__PURE__ */ import_react181.default.createElement(import_react_icons84.PeopleAddIcon, { width: "56px", height: "56px", style: { color: "white" } })
    }
  ) : null, isInsetEnabled && /* @__PURE__ */ import_react181.default.createElement(InsetTile, null));
}
var import_react181, import_react_use39, import_react_icons84;
var init_EqualProminence = __esm({
  "src/Prebuilt/components/VideoLayouts/EqualProminence.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react181 = __toESM(require("react"));
    import_react_use39 = require("react-use");
    import_react_icons84 = require("@100mslive/react-icons");
    init_Layout();
    init_Theme();
    init_WaitingView();
    init_InsetTile();
    init_Pagination2();
    init_Grid();
    init_useUISettings();
    init_useTileLayout();
    init_constants();
  }
});

// src/Prebuilt/components/VideoLayouts/ProminenceLayout.tsx
var import_react182, Root26, ProminentSection, SecondarySection, ProminenceLayout;
var init_ProminenceLayout = __esm({
  "src/Prebuilt/components/VideoLayouts/ProminenceLayout.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react182 = __toESM(require("react"));
    init_Layout();
    init_VideoTile2();
    init_useVideoTileLayout();
    Root26 = ({
      children,
      edgeToEdge,
      hasSidebar
    }) => {
      return /* @__PURE__ */ import_react182.default.createElement(
        Flex,
        {
          direction: hasSidebar ? "row" : "column",
          css: { h: "100%", flex: "1 1 0", minWidth: 0, gap: "$6", "@md": { gap: edgeToEdge ? 0 : "$6" } }
        },
        children
      );
    };
    ProminentSection = ({ children, css: css2 = {} }) => {
      return /* @__PURE__ */ import_react182.default.createElement(Flex, { direction: "column", css: { flex: "1 1 0", gap: "$2", minHeight: 0, ...css2 } }, children);
    };
    SecondarySection = ({
      tiles,
      children,
      edgeToEdge,
      hasSidebar
    }) => {
      const tileLayoutProps = useVideoTileContext();
      if (!tiles?.length) {
        return null;
      }
      const gridStyles = hasSidebar ? {
        gridTemplateColumns: "1fr",
        gridTemplateRows: `repeat(${tiles.length}, minmax(0, 1fr))`,
        maxHeight: "100%",
        width: 240
      } : {
        gridTemplateRows: import_react182.default.Children.count(children) > 0 ? "136px auto" : "154px",
        gridTemplateColumns: `repeat(${tiles.length}, minmax(0, 1fr))`
      };
      return /* @__PURE__ */ import_react182.default.createElement(
        Box,
        {
          css: {
            display: "grid",
            margin: "auto",
            gap: hasSidebar ? "$8" : "$2 $4",
            placeItems: "center",
            ...gridStyles,
            "@md": { gap: edgeToEdge ? 0 : "$4" }
          }
        },
        tiles.map((tile) => {
          return /* @__PURE__ */ import_react182.default.createElement(
            VideoTile_default,
            {
              key: tile.track?.id || tile.peer?.id,
              peerId: tile.peer?.id,
              trackId: tile.track?.id,
              rootCSS: {
                padding: 0,
                maxWidth: 240,
                aspectRatio: 16 / 9,
                ...hasSidebar ? { w: "100%" } : { h: "100%" },
                "@md": { aspectRatio: 1 }
              },
              objectFit: "contain",
              ...tileLayoutProps
            }
          );
        }),
        children && /* @__PURE__ */ import_react182.default.createElement(Box, { css: { gridColumn: hasSidebar ? 1 : `1/span ${tiles.length}` } }, children)
      );
    };
    ProminenceLayout = {
      Root: Root26,
      ProminentSection,
      SecondarySection
    };
  }
});

// src/Prebuilt/components/SecondaryTiles.tsx
var import_react183, import_react_use40, import_react_sdk94, SecondaryTiles;
var init_SecondaryTiles = __esm({
  "src/Prebuilt/components/SecondaryTiles.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react183 = __toESM(require("react"));
    import_react_use40 = require("react-use");
    import_react_sdk94 = require("@100mslive/react-sdk");
    init_ProminenceLayout();
    init_Theme();
    init_Pagination2();
    init_useTileLayout();
    init_constants();
    SecondaryTiles = ({ peers, onPageChange, onPageSize, edgeToEdge, hasSidebar }) => {
      const isMobile = (0, import_react_use40.useMedia)(config.media.md);
      const maxTileCount = isMobile ? 2 : 4;
      const [page, setPage] = (0, import_react183.useState)(0);
      const pinnedTrackId = (0, import_react_sdk94.useHMSStore)((0, import_react_sdk94.selectAppData)(APP_DATA.pinnedTrackId));
      const spotlightPeerId = (0, import_react_sdk94.useHMSStore)((0, import_react_sdk94.selectSessionStore)("spotlight" /* SPOTLIGHT */));
      const activeScreensharePeerId = (0, import_react_sdk94.useHMSStore)((0, import_react_sdk94.selectAppData)(APP_DATA.activeScreensharePeerId));
      const pinnedPeer = (0, import_react_sdk94.useHMSStore)((0, import_react_sdk94.selectTrackByID)(pinnedTrackId))?.peerId;
      const pageChangedAfterPinning = (0, import_react183.useRef)(false);
      const pagesWithTiles = usePagesWithTiles({
        peers: spotlightPeerId || pinnedPeer ? [...peers].sort((p1, p2) => {
          if (activeScreensharePeerId === p1.id) {
            return -1;
          }
          if (activeScreensharePeerId === p2.id) {
            return 1;
          }
          const peerIdList = [pinnedPeer, spotlightPeerId];
          if (peerIdList.includes(p1.id)) {
            return -1;
          }
          if (peerIdList.includes(p2.id)) {
            return 1;
          }
          return 0;
        }) : peers,
        maxTileCount
      });
      const pageSize = pagesWithTiles[0]?.length || 0;
      (0, import_react183.useEffect)(() => {
        if (peers.length > 0 && !pagesWithTiles[page]?.length) {
          setPage(Math.max(0, page - 1));
        }
      }, [peers, page, pagesWithTiles]);
      (0, import_react183.useEffect)(() => {
        if (pageSize > 0) {
          onPageSize?.(pageSize);
        }
      }, [pageSize, onPageSize]);
      (0, import_react183.useEffect)(() => {
        if ((pinnedPeer || spotlightPeerId) && page !== 0 && !pageChangedAfterPinning.current) {
          setPage(0);
          pageChangedAfterPinning.current = true;
        } else if (!pinnedPeer && !spotlightPeerId) {
          pageChangedAfterPinning.current = false;
        }
      }, [pinnedPeer, spotlightPeerId, page]);
      return /* @__PURE__ */ import_react183.default.createElement(ProminenceLayout.SecondarySection, { tiles: pagesWithTiles[page], edgeToEdge, hasSidebar }, !edgeToEdge && /* @__PURE__ */ import_react183.default.createElement(
        Pagination,
        {
          page,
          onPageChange: (page2) => {
            setPage(page2);
            onPageChange?.(page2);
          },
          numPages: pagesWithTiles.length
        }
      ));
    };
  }
});

// src/Prebuilt/components/hooks/useRoleProminencePeers.tsx
var import_react184, useRoleProminencePeers;
var init_useRoleProminencePeers = __esm({
  "src/Prebuilt/components/hooks/useRoleProminencePeers.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react184 = require("react");
    init_useUISettings();
    useRoleProminencePeers = (prominentRoles, peers, isInsetEnabled) => {
      const pinnedTrack = usePinnedTrack();
      const [prominentPeers, secondaryPeers] = (0, import_react184.useMemo)(() => {
        return peers.reduce(
          (acc, peer) => {
            if (pinnedTrack) {
              if (pinnedTrack.peerId === peer.id) {
                acc[0].push(peer);
              } else if (!(isInsetEnabled && peer.isLocal)) {
                acc[1].push(peer);
              }
              return acc;
            }
            if (peer.isLocal && isInsetEnabled && !prominentRoles?.includes(peer.roleName || "")) {
              return acc;
            }
            if (prominentRoles?.includes(peer.roleName || "")) {
              acc[0].push(peer);
            } else {
              acc[1].push(peer);
            }
            return acc;
          },
          [[], []]
        );
      }, [peers, isInsetEnabled, prominentRoles, pinnedTrack]);
      return {
        prominentPeers,
        secondaryPeers
      };
    };
  }
});

// src/Prebuilt/components/VideoLayouts/RoleProminence.tsx
function RoleProminence({
  isInsetEnabled = false,
  prominentRoles = [],
  peers,
  onPageChange,
  onPageSize,
  edgeToEdge
}) {
  const { prominentPeers, secondaryPeers } = useRoleProminencePeers(prominentRoles, peers, isInsetEnabled);
  const localPeer = (0, import_react_sdk95.useHMSStore)(import_react_sdk95.selectLocalPeer);
  const isMobile = (0, import_react_use41.useMedia)(config.media.md);
  let maxTileCount = useUISettings(UI_SETTINGS.maxTileCount);
  maxTileCount = isMobile ? 4 : maxTileCount;
  const pageList = usePagesWithTiles({
    peers: prominentPeers,
    maxTileCount
  });
  const { ref, pagesWithTiles } = useTileLayout({
    pageList,
    maxTileCount
  });
  const [page, setPage] = (0, import_react185.useState)(0);
  const pageSize = pagesWithTiles[0]?.length || 0;
  (0, import_react185.useEffect)(() => {
    if (pageSize > 0) {
      onPageSize?.(pageSize);
    }
  }, [pageSize, onPageSize]);
  return /* @__PURE__ */ import_react185.default.createElement(ProminenceLayout.Root, null, /* @__PURE__ */ import_react185.default.createElement(ProminenceLayout.ProminentSection, null, /* @__PURE__ */ import_react185.default.createElement(Grid, { ref, tiles: pagesWithTiles[page] })), !edgeToEdge && /* @__PURE__ */ import_react185.default.createElement(
    Pagination,
    {
      page,
      onPageChange: (page2) => {
        setPage(page2);
        onPageChange?.(page2);
      },
      numPages: pagesWithTiles.length
    }
  ), /* @__PURE__ */ import_react185.default.createElement(SecondaryTiles, { peers: secondaryPeers, isInsetEnabled, edgeToEdge }), isInsetEnabled && localPeer && prominentPeers.length > 0 && !prominentPeers.includes(localPeer) && /* @__PURE__ */ import_react185.default.createElement(InsetTile, null));
}
var import_react185, import_react_use41, import_react_sdk95;
var init_RoleProminence = __esm({
  "src/Prebuilt/components/VideoLayouts/RoleProminence.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react185 = __toESM(require("react"));
    import_react_use41 = require("react-use");
    import_react_sdk95 = require("@100mslive/react-sdk");
    init_Theme();
    init_InsetTile();
    init_Pagination2();
    init_SecondaryTiles();
    init_Grid();
    init_ProminenceLayout();
    init_useUISettings();
    init_useRoleProminencePeers();
    init_useTileLayout();
    init_constants();
  }
});

// src/Prebuilt/components/LayoutModeSelector.tsx
var import_react186, import_react_icons85, LayoutModeSelector;
var init_LayoutModeSelector = __esm({
  "src/Prebuilt/components/LayoutModeSelector.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react186 = __toESM(require("react"));
    import_react_icons85 = require("@100mslive/react-icons");
    init_LayoutSettings();
    init_Layout();
    init_Popover();
    init_Text2();
    init_useUISettings();
    init_constants();
    LayoutModeSelector = () => {
      const [open, setOpen] = (0, import_react186.useState)(false);
      const [layoutMode, setLayoutMode] = useSetUiSettings(UI_SETTINGS.layoutMode);
      const updateLayoutMode = (0, import_react186.useCallback)(
        (value) => {
          setLayoutMode(value);
          setOpen(false);
        },
        [setLayoutMode, setOpen]
      );
      return /* @__PURE__ */ import_react186.default.createElement(Popover2.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react186.default.createElement(Popover2.Trigger, { asChild: true }, /* @__PURE__ */ import_react186.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            gap: "$4",
            color: open ? "$on_surface_low" : "$on_surface_medium",
            r: "$1",
            p: "$2 $4",
            height: "100%"
          }
        },
        /* @__PURE__ */ import_react186.default.createElement(
          Flex,
          {
            align: "center",
            justify: "center",
            css: {
              color: "inherit",
              "& > svg": {
                w: "$9",
                h: "$9"
              }
            }
          },
          LayoutModeIconMapping[layoutMode]
        ),
        /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "caption", css: { color: "inherit", lineHeight: "$sm" } }, layoutMode),
        open ? /* @__PURE__ */ import_react186.default.createElement(import_react_icons85.ChevronUpIcon, { width: 16, height: 16 }) : /* @__PURE__ */ import_react186.default.createElement(import_react_icons85.ChevronDownIcon, { width: 16, height: 16 })
      )), /* @__PURE__ */ import_react186.default.createElement(
        Popover2.Content,
        {
          css: {
            w: "10.75rem",
            r: "$1",
            py: "$4",
            px: 0,
            backgroundColor: "$surface_default",
            overflowY: "auto",
            boxShadow: "0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)",
            fontFamily: "$sans",
            color: "$on_surface_high"
          },
          side: "bottom",
          sideOffset: 8,
          align: "end"
        },
        Object.keys(LayoutMode).map((key) => {
          const value = LayoutMode[key];
          return /* @__PURE__ */ import_react186.default.createElement(
            Flex,
            {
              key,
              onClick: () => updateLayoutMode(value),
              align: "center",
              css: {
                gap: "$4",
                borderBottom: "1px solid $border_bright",
                p: "$8",
                "&:hover": {
                  cursor: "pointer",
                  bg: "$surface_bright"
                },
                "&:focus-visible": {
                  bg: "$surface_bright"
                }
              }
            },
            /* @__PURE__ */ import_react186.default.createElement(
              Flex,
              {
                align: "center",
                justify: "center",
                css: {
                  color: "$on_surface_medium",
                  "& > svg": {
                    w: "$9",
                    h: "$9"
                  }
                }
              },
              LayoutModeIconMapping[value]
            ),
            /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "caption", css: { lineHeight: "$sm" } }, value),
            value === layoutMode ? /* @__PURE__ */ import_react186.default.createElement(import_react_icons85.CheckIcon, { width: 20, height: 20, style: { marginLeft: "auto" } }) : null
          );
        })
      ));
    };
  }
});

// src/Prebuilt/components/ScreenshareDisplay.tsx
var import_react187, import_react_sdk96, import_react_icons86, ScreenshareDisplay;
var init_ScreenshareDisplay = __esm({
  "src/Prebuilt/components/ScreenshareDisplay.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react187 = __toESM(require("react"));
    import_react_sdk96 = require("@100mslive/react-sdk");
    import_react_icons86 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Text2();
    ScreenshareDisplay = () => {
      const hmsActions = (0, import_react_sdk96.useHMSActions)();
      return /* @__PURE__ */ import_react187.default.createElement(
        Flex,
        {
          direction: "column",
          align: "center",
          justify: "center",
          css: {
            size: "100%",
            bg: "$background_default",
            color: "$on_surface_high"
          }
        },
        /* @__PURE__ */ import_react187.default.createElement(import_react_icons86.ShareScreenIcon, { width: 48, height: 48 }),
        /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "h5", css: { m: "$8 0" } }, "You are sharing your screen"),
        /* @__PURE__ */ import_react187.default.createElement(
          Button,
          {
            variant: "danger",
            css: { fontWeight: "$semiBold" },
            onClick: async () => {
              await hmsActions.setScreenShareEnabled(false);
            },
            "data-testid": "stop_screen_share_btn"
          },
          /* @__PURE__ */ import_react187.default.createElement(import_react_icons86.CrossIcon, { width: 18, height: 18 }),
          "\xA0 Stop screen share"
        )
      );
    };
  }
});

// src/Prebuilt/components/ScreenshareTile.tsx
var import_react188, import_react_use42, import_screenfull2, import_react_sdk97, import_react_icons87, labelStyles, Tile2, ScreenshareTile, ScreenshareTile_default;
var init_ScreenshareTile = __esm({
  "src/Prebuilt/components/ScreenshareTile.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react188 = __toESM(require("react"));
    import_react_use42 = require("react-use");
    import_screenfull2 = __toESM(require("screenfull"));
    import_react_sdk97 = require("@100mslive/react-sdk");
    import_react_icons87 = require("@100mslive/react-icons");
    init_TileMenu2();
    init_Layout();
    init_Stats2();
    init_Theme();
    init_Video2();
    init_VideoTile();
    init_LayoutModeSelector();
    init_peerTileUtils();
    init_ScreenshareDisplay();
    init_useUISettings();
    init_constants();
    labelStyles = {
      position: "unset",
      width: "100%",
      textAlign: "center",
      c: "$on_surface_high",
      transform: "none",
      flexShrink: 0
    };
    Tile2 = ({ peerId, width = "100%", height = "100%" }) => {
      const isLocal = (0, import_react_sdk97.useHMSStore)(import_react_sdk97.selectLocalPeerID) === peerId;
      const track = (0, import_react_sdk97.useHMSStore)((0, import_react_sdk97.selectScreenShareByPeerID)(peerId));
      const { theme: theme2 } = useTheme();
      const peer = (0, import_react_sdk97.useHMSStore)((0, import_react_sdk97.selectPeerByID)(peerId));
      const isAudioOnly = useUISettings(UI_SETTINGS.isAudioOnly);
      const [isMouseHovered, setIsMouseHovered] = (0, import_react188.useState)(false);
      const isMobile = (0, import_react_use42.useMedia)(config.media.md);
      const showStatsOnTiles = useUISettings(UI_SETTINGS.showStatsOnTiles);
      const fullscreenRef = (0, import_react188.useRef)(null);
      const [fullscreen, setFullscreen] = (0, import_react188.useState)(false);
      const isFullscreen = (0, import_react_use42.useFullscreen)(fullscreenRef, fullscreen, {
        onClose: () => setFullscreen(false)
      });
      const isFullScreenSupported = import_screenfull2.default.isEnabled;
      const audioTrack = (0, import_react_sdk97.useHMSStore)((0, import_react_sdk97.selectScreenShareAudioByPeerID)(peer?.id));
      if (isLocal && track?.displaySurface && !["browser", "window", "application"].includes(track.displaySurface)) {
        return /* @__PURE__ */ import_react188.default.createElement(ScreenshareDisplay, null);
      }
      if (!peer) {
        return null;
      }
      const label = getVideoTileLabel({
        peerName: peer?.name,
        isLocal: false,
        track
      });
      return /* @__PURE__ */ import_react188.default.createElement(
        StyledVideoTile.Root,
        {
          css: {
            width,
            height,
            p: 0,
            minHeight: 0
          },
          "data-testid": "screenshare_tile"
        },
        /* @__PURE__ */ import_react188.default.createElement(
          StyledVideoTile.Container,
          {
            transparentBg: true,
            ref: fullscreenRef,
            css: { flexDirection: "column", gap: "$2" },
            onMouseEnter: () => setIsMouseHovered(true),
            onMouseLeave: () => {
              setIsMouseHovered(false);
            }
          },
          showStatsOnTiles ? /* @__PURE__ */ import_react188.default.createElement(VideoTileStats, { audioTrackID: audioTrack?.id, videoTrackID: track?.id, peerID: peerId, isLocal }) : null,
          isFullScreenSupported && isMouseHovered ? /* @__PURE__ */ import_react188.default.createElement(
            StyledVideoTile.FullScreenButton,
            {
              css: { bg: `${theme2.colors.background_dim.value}A3` },
              onClick: () => setFullscreen(!fullscreen)
            },
            isFullscreen ? /* @__PURE__ */ import_react188.default.createElement(import_react_icons87.ShrinkIcon, null) : /* @__PURE__ */ import_react188.default.createElement(import_react_icons87.ExpandIcon, null)
          ) : null,
          !isMobile && isMouseHovered && !isFullscreen && /* @__PURE__ */ import_react188.default.createElement(
            Box,
            {
              css: {
                position: "absolute",
                top: "$2",
                r: "$1",
                h: "$14",
                right: isFullScreenSupported ? "$17" : "$2",
                zIndex: 5,
                bg: `${theme2.colors.background_dim.value}A3`
              }
            },
            /* @__PURE__ */ import_react188.default.createElement(LayoutModeSelector, null)
          ),
          track ? /* @__PURE__ */ import_react188.default.createElement(Video, { screenShare: true, mirror: false, attach: !isAudioOnly, trackId: track.id, css: { minHeight: 0 } }) : null,
          /* @__PURE__ */ import_react188.default.createElement(StyledVideoTile.Info, { css: labelStyles }, label),
          isMouseHovered && !peer.isLocal ? /* @__PURE__ */ import_react188.default.createElement(
            TileMenu_default,
            {
              isScreenshare: true,
              peerID: peer.id,
              audioTrackID: audioTrack?.id,
              videoTrackID: track?.id,
              enableSpotlightingPeer: false
            }
          ) : null
        )
      );
    };
    ScreenshareTile = import_react188.default.memo(Tile2);
    ScreenshareTile_default = ScreenshareTile;
  }
});

// src/Prebuilt/components/VideoLayouts/ScreenshareLayout.tsx
var import_react189, import_react_use43, import_react_sdk98, ScreenshareLayout;
var init_ScreenshareLayout = __esm({
  "src/Prebuilt/components/VideoLayouts/ScreenshareLayout.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react189 = __toESM(require("react"));
    import_react_use43 = require("react-use");
    import_react_sdk98 = require("@100mslive/react-sdk");
    init_Theme();
    init_InsetTile();
    init_Pagination2();
    init_ScreenshareTile();
    init_SecondaryTiles();
    init_LayoutSettings();
    init_ProminenceLayout();
    init_useUISettings();
    init_constants();
    ScreenshareLayout = ({ peers, onPageChange, onPageSize, edgeToEdge }) => {
      const peersSharing = (0, import_react_sdk98.useHMSStore)(import_react_sdk98.selectPeersScreenSharing);
      const [, setActiveScreenSharePeer] = useSetAppDataByKey(APP_DATA.activeScreensharePeerId);
      const [page, setPage] = (0, import_react189.useState)(0);
      const [layoutMode, setLayoutMode] = useSetUiSettings(UI_SETTINGS.layoutMode);
      const activeSharePeer = peersSharing[page];
      const isMobile = (0, import_react_use43.useMedia)(config.media.md);
      const hasSidebar = !isMobile && layoutMode === LayoutMode.SIDEBAR;
      const secondaryPeers = (0, import_react189.useMemo)(() => {
        if (layoutMode === LayoutMode.SPOTLIGHT) {
          return [];
        }
        if (isMobile || layoutMode === LayoutMode.SIDEBAR) {
          return activeSharePeer ? [activeSharePeer, ...peers.filter((p) => p.id !== activeSharePeer?.id)] : peers;
        }
        return peers.filter((p) => p.id !== activeSharePeer?.id);
      }, [activeSharePeer, peers, isMobile, layoutMode]);
      (0, import_react189.useEffect)(() => {
        if (isMobile) {
          setLayoutMode(LayoutMode.GALLERY);
          return;
        }
        if (layoutMode === LayoutMode.SIDEBAR) {
          return;
        }
        setLayoutMode(LayoutMode.SIDEBAR);
        return () => {
          setLayoutMode(LayoutMode.GALLERY);
        };
      }, [isMobile]);
      (0, import_react189.useEffect)(() => {
        setActiveScreenSharePeer(activeSharePeer?.id);
        return () => {
          setActiveScreenSharePeer("");
        };
      }, [activeSharePeer?.id, setActiveScreenSharePeer]);
      return /* @__PURE__ */ import_react189.default.createElement(ProminenceLayout.Root, { edgeToEdge, hasSidebar }, /* @__PURE__ */ import_react189.default.createElement(ProminenceLayout.ProminentSection, null, /* @__PURE__ */ import_react189.default.createElement(ScreenshareTile_default, { peerId: peersSharing[page]?.id }), !edgeToEdge && /* @__PURE__ */ import_react189.default.createElement(Pagination, { page, onPageChange: setPage, numPages: peersSharing.length })), /* @__PURE__ */ import_react189.default.createElement(
        SecondaryTiles,
        {
          peers: secondaryPeers,
          onPageChange,
          onPageSize,
          edgeToEdge,
          hasSidebar
        }
      ), layoutMode === LayoutMode.SPOTLIGHT && activeSharePeer && /* @__PURE__ */ import_react189.default.createElement(InsetTile, { peerId: activeSharePeer?.id }));
    };
  }
});

// src/Prebuilt/components/VideoLayouts/WhiteboardLayout.tsx
var import_react190, import_react_use44, import_hms_whiteboard, import_react_sdk99, import_hms_whiteboard2, WhiteboardEmbed, WhiteboardLayout;
var init_WhiteboardLayout = __esm({
  "src/Prebuilt/components/VideoLayouts/WhiteboardLayout.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react190 = __toESM(require("react"));
    import_react_use44 = require("react-use");
    import_hms_whiteboard = require("@100mslive/hms-whiteboard");
    import_react_sdk99 = require("@100mslive/react-sdk");
    init_Layout();
    init_Theme();
    init_InsetTile();
    init_SecondaryTiles();
    init_LayoutSettings();
    init_ProminenceLayout();
    init_useUISettings();
    init_constants();
    import_hms_whiteboard2 = require("@100mslive/hms-whiteboard/index.css");
    WhiteboardEmbed = () => {
      const isMobile = (0, import_react_use44.useMedia)(config.media.md);
      const { token, endpoint, zoomToContent } = (0, import_react_sdk99.useWhiteboard)(isMobile);
      if (!token) {
        return null;
      }
      return /* @__PURE__ */ import_react190.default.createElement(
        Box,
        {
          css: {
            mx: "$8",
            flex: "3 1 0",
            "@lg": {
              flex: "2 1 0",
              display: "flex",
              alignItems: "center"
            }
          }
        },
        /* @__PURE__ */ import_react190.default.createElement(Box, { css: { size: "100%" } }, /* @__PURE__ */ import_react190.default.createElement(import_hms_whiteboard.Whiteboard, { token, endpoint: `https://${endpoint}`, zoomToContent }))
      );
    };
    WhiteboardLayout = ({ peers, onPageChange, onPageSize, edgeToEdge }) => {
      const whiteboard = (0, import_react_sdk99.useHMSStore)(import_react_sdk99.selectWhiteboard);
      const whiteboardOwner = (0, import_react_sdk99.useHMSStore)((0, import_react_sdk99.selectPeerByCondition)((peer) => peer.customerUserId === whiteboard?.owner));
      const [layoutMode, setLayoutMode] = useSetUiSettings(UI_SETTINGS.layoutMode);
      const isMobile = (0, import_react_use44.useMedia)(config.media.md);
      const hasSidebar = !isMobile && layoutMode === LayoutMode.SIDEBAR;
      const secondaryPeers = (0, import_react190.useMemo)(() => {
        if (layoutMode === LayoutMode.SPOTLIGHT) {
          return [];
        }
        if (isMobile || layoutMode === LayoutMode.SIDEBAR) {
          return whiteboardOwner ? [whiteboardOwner, ...peers.filter((p) => p.id !== whiteboardOwner?.id)] : peers;
        }
        return peers.filter((p) => p.id !== whiteboardOwner?.id);
      }, [whiteboardOwner, peers, isMobile, layoutMode]);
      (0, import_react190.useEffect)(() => {
        if (isMobile) {
          setLayoutMode(LayoutMode.GALLERY);
          return;
        }
        if (layoutMode === LayoutMode.SIDEBAR) {
          return;
        }
        setLayoutMode(LayoutMode.SIDEBAR);
        return () => {
          setLayoutMode(LayoutMode.GALLERY);
        };
      }, [isMobile]);
      return /* @__PURE__ */ import_react190.default.createElement(ProminenceLayout.Root, { edgeToEdge, hasSidebar }, /* @__PURE__ */ import_react190.default.createElement(ProminenceLayout.ProminentSection, null, /* @__PURE__ */ import_react190.default.createElement(WhiteboardEmbed, null)), /* @__PURE__ */ import_react190.default.createElement(
        SecondaryTiles,
        {
          peers: secondaryPeers,
          onPageChange,
          onPageSize,
          edgeToEdge,
          hasSidebar
        }
      ), layoutMode === LayoutMode.SPOTLIGHT && whiteboardOwner && /* @__PURE__ */ import_react190.default.createElement(InsetTile, { peerId: whiteboardOwner?.id }));
    };
  }
});

// src/Prebuilt/common/PeersSorter.ts
var import_react_sdk100, PeersSorter, PeersSorter_default;
var init_PeersSorter = __esm({
  "src/Prebuilt/common/PeersSorter.ts"() {
    "use strict";
    init_cjs_shims();
    import_react_sdk100 = require("@100mslive/react-sdk");
    PeersSorter = class {
      storeUnsubscribe = void 0;
      store;
      peers;
      lruPeers;
      tilesPerPage;
      speaker;
      listeners;
      constructor(store) {
        this.store = store;
        this.peers = /* @__PURE__ */ new Map();
        this.lruPeers = /* @__PURE__ */ new Set();
        this.speaker = void 0;
        this.listeners = /* @__PURE__ */ new Set();
      }
      setPeersAndTilesPerPage = ({ peers, tilesPerPage }) => {
        this.speaker = void 0;
        this.tilesPerPage = tilesPerPage;
        const peerIds = new Set(peers.map((peer) => peer.id));
        this.peers.forEach((_, key) => {
          if (!peerIds.has(key)) {
            this.peers.delete(key);
          }
        });
        this.lruPeers = new Set([...this.lruPeers].filter((peerId) => peerIds.has(peerId)));
        peers.forEach((peer) => {
          this.peers.set(peer.id, peer);
          if (this.lruPeers.size < tilesPerPage) {
            this.lruPeers.add(peer.id);
          }
        });
        if (!this.storeUnsubscribe) {
          this.storeUnsubscribe = this.store.subscribe(this.onDominantSpeakerChange, import_react_sdk100.selectDominantSpeaker);
        }
        this.moveSpeakerToFront(this.speaker);
      };
      onUpdate = (cb) => {
        this.listeners.add(cb);
      };
      stop = () => {
        this.updateListeners();
        this.listeners.clear();
        this.storeUnsubscribe?.();
        this.storeUnsubscribe = void 0;
        this.speaker = void 0;
      };
      moveSpeakerToFront = (speaker) => {
        if (!speaker) {
          this.maintainLruSize(this.tilesPerPage);
          this.updateListeners();
          return;
        }
        if (this.lruPeers.has(speaker.id) && this.lruPeers.size <= this.tilesPerPage) {
          this.updateListeners();
          return;
        }
        this.lruPeers.delete(speaker.id);
        this.maintainLruSize(this.tilesPerPage - 1);
        this.lruPeers = /* @__PURE__ */ new Set([speaker.id, ...this.lruPeers]);
        this.updateListeners();
      };
      onDominantSpeakerChange = (speaker) => {
        if (!speaker || speaker.id === this.speaker?.id) {
          return;
        }
        if (!this.peers.has(speaker.id)) {
          return;
        }
        this.speaker = speaker;
        this.moveSpeakerToFront(speaker);
      };
      updateListeners = () => {
        const orderedPeers = [];
        this.lruPeers.forEach((key) => {
          const peer = this.peers.get(key);
          if (peer) {
            orderedPeers.push(peer);
          }
        });
        this.peers.forEach((peer) => {
          if (!this.lruPeers.has(peer.id) && peer) {
            orderedPeers.push(peer);
          }
        });
        this.listeners.forEach((listener) => listener?.(orderedPeers));
      };
      maintainLruSize = (size) => {
        const lruPeerArray = Array.from(this.lruPeers);
        while (lruPeerArray.length > size && lruPeerArray.length) {
          lruPeerArray.pop();
        }
        this.lruPeers = new Set(lruPeerArray);
      };
    };
    PeersSorter_default = PeersSorter;
  }
});

// src/Prebuilt/components/VideoLayouts/GridLayout.tsx
var import_react191, import_react_sdk101, GridLayout;
var init_GridLayout = __esm({
  "src/Prebuilt/components/VideoLayouts/GridLayout.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react191 = __toESM(require("react"));
    import_react_sdk101 = require("@100mslive/react-sdk");
    init_EqualProminence();
    init_RoleProminence();
    init_ScreenshareLayout();
    init_WhiteboardLayout();
    init_useUISettings();
    init_useVideoTileLayout();
    init_PeersSorter();
    init_constants();
    GridLayout = ({
      enable_local_tile_inset: isInsetEnabled = false,
      prominent_roles: prominentRoles = [],
      enable_spotlighting_peer = false,
      hide_participant_name_on_tile = false,
      rounded_video_tile = true,
      hide_audio_mute_on_tile = false,
      video_object_fit = "contain",
      edge_to_edge = false,
      hide_metadata_on_tile = false
    }) => {
      const peerSharing = (0, import_react_sdk101.useHMSStore)(import_react_sdk101.selectPeerScreenSharing);
      const whiteboard = (0, import_react_sdk101.useHMSStore)(import_react_sdk101.selectWhiteboard);
      const pinnedTrack = usePinnedTrack();
      const peers = (0, import_react_sdk101.useHMSStore)(import_react_sdk101.selectPeers);
      const localPeerRole = (0, import_react_sdk101.useHMSStore)(import_react_sdk101.selectLocalPeerRoleName);
      const localPeerID = (0, import_react_sdk101.useHMSStore)(import_react_sdk101.selectLocalPeerID);
      const [activeScreensharePeerId] = useSetAppDataByKey(APP_DATA.activeScreensharePeerId);
      const isRoleProminence = prominentRoles.length && peers.some(
        (peer) => peer.roleName && prominentRoles.includes(peer.roleName) && (peer.videoTrack || peer.audioTrack)
      ) || pinnedTrack;
      const updatedPeers = (0, import_react191.useMemo)(() => {
        if (activeScreensharePeerId || whiteboard?.open) {
          return peers.filter((peer) => peer.id !== activeScreensharePeerId || peer.customerUserId !== whiteboard?.owner);
        }
        if (isInsetEnabled) {
          const isLocalPeerPinned = localPeerID === pinnedTrack?.peerId;
          if (localPeerRole && prominentRoles.includes(localPeerRole) || isLocalPeerPinned) {
            return peers;
          } else {
            return peers.filter((peer) => !peer.isLocal);
          }
        }
        return peers;
      }, [
        isInsetEnabled,
        whiteboard,
        activeScreensharePeerId,
        localPeerRole,
        localPeerID,
        prominentRoles,
        peers,
        pinnedTrack
      ]);
      const vanillaStore = (0, import_react_sdk101.useHMSVanillaStore)();
      const [sortedPeers, setSortedPeers] = (0, import_react191.useState)(updatedPeers);
      const peersSorter = (0, import_react191.useMemo)(() => new PeersSorter_default(vanillaStore), [vanillaStore]);
      const [pageSize, setPageSize] = (0, import_react191.useState)(0);
      const [mainPage, setMainPage] = (0, import_react191.useState)(0);
      const tileLayout = {
        enableSpotlightingPeer: enable_spotlighting_peer,
        hideParticipantNameOnTile: hide_participant_name_on_tile,
        roundedVideoTile: rounded_video_tile,
        hideAudioMuteOnTile: hide_audio_mute_on_tile,
        hideMetadataOnTile: hide_metadata_on_tile,
        objectFit: video_object_fit
      };
      (0, import_react191.useEffect)(() => {
        if (mainPage !== 0) {
          return;
        }
        peersSorter.setPeersAndTilesPerPage({
          peers: updatedPeers,
          tilesPerPage: pageSize
        });
        peersSorter.onUpdate(setSortedPeers);
      }, [mainPage, peersSorter, updatedPeers, pageSize]);
      if (peerSharing) {
        return /* @__PURE__ */ import_react191.default.createElement(VideoTileContext.Provider, { value: tileLayout }, /* @__PURE__ */ import_react191.default.createElement(
          ScreenshareLayout,
          {
            peers: sortedPeers,
            onPageSize: setPageSize,
            onPageChange: setMainPage,
            edgeToEdge: edge_to_edge
          }
        ));
      } else if (whiteboard?.open) {
        return /* @__PURE__ */ import_react191.default.createElement(VideoTileContext.Provider, { value: tileLayout }, /* @__PURE__ */ import_react191.default.createElement(
          WhiteboardLayout,
          {
            peers: sortedPeers,
            onPageSize: setPageSize,
            onPageChange: setMainPage,
            edgeToEdge: edge_to_edge
          }
        ));
      } else if (isRoleProminence) {
        return /* @__PURE__ */ import_react191.default.createElement(VideoTileContext.Provider, { value: tileLayout }, /* @__PURE__ */ import_react191.default.createElement(
          RoleProminence,
          {
            peers: sortedPeers,
            onPageSize: setPageSize,
            onPageChange: setMainPage,
            prominentRoles,
            isInsetEnabled,
            edgeToEdge: edge_to_edge
          }
        ));
      }
      return /* @__PURE__ */ import_react191.default.createElement(VideoTileContext.Provider, { value: tileLayout }, /* @__PURE__ */ import_react191.default.createElement(
        EqualProminence,
        {
          peers: sortedPeers,
          onPageSize: setPageSize,
          onPageChange: setMainPage,
          isInsetEnabled,
          edgeToEdge: edge_to_edge
        }
      ));
    };
  }
});

// src/Prebuilt/layouts/EmbedView.jsx
var import_react192, import_react_sdk102, EmbedView, EmbedScreenShareView, EmbedComponent;
var init_EmbedView = __esm({
  "src/Prebuilt/layouts/EmbedView.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react192 = __toESM(require("react"));
    import_react_sdk102 = require("@100mslive/react-sdk");
    init_SecondaryTiles();
    init_ToastManager();
    init_ProminenceLayout();
    init_Layout();
    init_useUISettings();
    init_constants();
    EmbedView = () => {
      return /* @__PURE__ */ import_react192.default.createElement(EmbedScreenShareView, null, /* @__PURE__ */ import_react192.default.createElement(EmbedComponent, null));
    };
    EmbedScreenShareView = ({ children }) => {
      const peers = (0, import_react_sdk102.useHMSStore)(import_react_sdk102.selectPeers);
      const peerPresenting = (0, import_react_sdk102.useHMSStore)(import_react_sdk102.selectPeerScreenSharing);
      const [, setActiveScreenSharePeer] = useSetAppDataByKey(APP_DATA.activeScreensharePeerId);
      const smallTilePeers = (0, import_react192.useMemo)(() => {
        const smallTilePeers2 = peers.filter((peer) => peer.id !== peerPresenting?.id);
        return smallTilePeers2;
      }, [peers, peerPresenting]);
      (0, import_react192.useEffect)(() => {
        setActiveScreenSharePeer(peerPresenting?.id);
        return () => {
          setActiveScreenSharePeer("");
        };
      }, [peerPresenting?.id, setActiveScreenSharePeer]);
      return /* @__PURE__ */ import_react192.default.createElement(ProminenceLayout.Root, null, /* @__PURE__ */ import_react192.default.createElement(ProminenceLayout.ProminentSection, null, children), /* @__PURE__ */ import_react192.default.createElement(SecondaryTiles, { peers: smallTilePeers }));
    };
    EmbedComponent = () => {
      const embedConfig = (0, import_react_sdk102.useHMSStore)((0, import_react_sdk102.selectAppData)(APP_DATA.embedConfig));
      const resetConfig = useResetEmbedConfig();
      const { iframeRef, startEmbedShare, isEmbedShareInProgress } = (0, import_react_sdk102.useEmbedShare)(resetConfig);
      (0, import_react192.useEffect)(() => {
        (async () => {
          if (embedConfig && !isEmbedShareInProgress) {
            try {
              await startEmbedShare(embedConfig);
            } catch (err) {
              resetConfig();
              ToastManager.addToast({
                title: `Error while sharing embed url ${err.message || ""}`,
                variant: "error"
              });
            }
          }
        })();
      }, [isEmbedShareInProgress, embedConfig, startEmbedShare, resetConfig]);
      return /* @__PURE__ */ import_react192.default.createElement(
        Box,
        {
          css: {
            mx: "$8",
            flex: "3 1 0",
            "@lg": {
              flex: "2 1 0",
              display: "flex",
              alignItems: "center"
            }
          }
        },
        /* @__PURE__ */ import_react192.default.createElement(
          "iframe",
          {
            title: "Embed View",
            ref: iframeRef,
            style: {
              width: "100%",
              height: "100%",
              border: 0,
              borderRadius: "0.75rem"
            },
            allow: "autoplay; clipboard-write;",
            referrerPolicy: "no-referrer"
          }
        )
      );
    };
  }
});

// src/Prebuilt/layouts/PDFView.jsx
var import_react193, import_react_sdk103, PDFView;
var init_PDFView = __esm({
  "src/Prebuilt/layouts/PDFView.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react193 = __toESM(require("react"));
    import_react_sdk103 = require("@100mslive/react-sdk");
    init_ToastManager();
    init_Layout();
    init_EmbedView();
    init_useUISettings();
    PDFView = () => {
      const pdfConfig = usePDFConfig();
      const resetConfig = useResetPDFConfig();
      const { iframeRef, startPDFShare, isPDFShareInProgress } = (0, import_react_sdk103.usePDFShare)(resetConfig);
      (0, import_react193.useEffect)(() => {
        return () => {
          resetConfig();
        };
      }, []);
      (0, import_react193.useEffect)(() => {
        (async () => {
          try {
            if (!isPDFShareInProgress && pdfConfig) {
              await startPDFShare(pdfConfig);
            }
          } catch (err) {
            resetConfig();
            ToastManager.addToast({
              title: `Error while sharing annotator ${err.message || ""}`,
              variant: "error"
            });
          }
        })();
      }, [isPDFShareInProgress, pdfConfig, resetConfig, startPDFShare]);
      return /* @__PURE__ */ import_react193.default.createElement(EmbedScreenShareView, null, /* @__PURE__ */ import_react193.default.createElement(
        Box,
        {
          css: {
            mx: "$8",
            flex: "3 1 0",
            "@lg": {
              flex: "2 1 0",
              display: "flex",
              alignItems: "center"
            }
          }
        },
        /* @__PURE__ */ import_react193.default.createElement(
          "iframe",
          {
            title: "Embed View",
            ref: iframeRef,
            style: {
              width: "100%",
              height: "100%",
              border: 0,
              borderRadius: "0.75rem"
            },
            allow: "autoplay; clipboard-write;",
            referrerPolicy: "no-referrer"
          }
        )
      ));
    };
  }
});

// src/Prebuilt/plugins/CaptionsViewer.tsx
var import_react194, import_react_draggable2, import_react_use45, import_react_sdk104, SimpleQueue, Queue, CaptionMaintainerQueue, TranscriptView, CaptionsViewer;
var init_CaptionsViewer = __esm({
  "src/Prebuilt/plugins/CaptionsViewer.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react194 = __toESM(require("react"));
    import_react_draggable2 = __toESM(require("react-draggable"));
    import_react_use45 = require("react-use");
    import_react_sdk104 = require("@100mslive/react-sdk");
    init_Layout();
    init_Text2();
    init_Theme();
    init_useSidepane();
    init_useUISettings();
    init_useRoomLayoutScreen();
    init_constants();
    SimpleQueue = class {
      constructor(capacity = 3, MAX_STORAGE_TIME = 5e3) {
        this.capacity = capacity;
        this.MAX_STORAGE_TIME = MAX_STORAGE_TIME;
      }
      storage = [];
      enqueue(data3) {
        if (!data3.transcript.trim()) {
          return;
        }
        if (this.size() === this.capacity && this.storage[this.size() - 1].final) {
          this.dequeue(this.storage[this.size() - 1]);
        }
        if (this.size() === 0) {
          this.storage.push(data3);
          this.addTimeout(this.storage[this.size() - 1], data3.final);
          return;
        }
        if (this.size() > 0 && this.storage[this.size() - 1]?.final === true) {
          this.storage.push(data3);
          this.addTimeout(this.storage[this.size() - 1], data3.final);
          return;
        }
        this.storage[this.size() - 1].transcript = data3.transcript;
        this.storage[this.size() - 1].final = data3.final;
        this.storage[this.size() - 1].end = data3.end;
        this.addTimeout(this.storage[this.size() - 1], data3.final);
      }
      addTimeout(item, isFinal) {
        if (!isFinal) {
          return;
        }
        item.timeout = setTimeout(() => {
          this.dequeue(item);
        }, this.MAX_STORAGE_TIME);
      }
      dequeue(item) {
        const index = this.storage.indexOf(item);
        if (index === -1) {
          return void 0;
        }
        const removedItem = this.storage.splice(index, 1);
        if (removedItem.length <= 0) {
          return void 0;
        }
        this.clearTimeout(removedItem[0]);
        return item;
      }
      clearTimeout(item) {
        if (!item.timeout) {
          return;
        }
        clearTimeout(item.timeout);
      }
      peek() {
        if (this.size() <= 0) {
          return void 0;
        }
        return this.storage[0];
      }
      getTranscription() {
        let script = "";
        this.storage.forEach((value) => script += value.transcript + " ");
        return script;
      }
      reset() {
        this.storage.length = 0;
      }
      size() {
        return this.storage.length;
      }
    };
    Queue = class {
      constructor(capacity = 3) {
        this.capacity = capacity;
      }
      storage = {};
      enqueue(data3) {
        if (this.size() === this.capacity) {
          this.dequeue();
        }
        if (!this.storage[data3.peer_id]) {
          this.storage[data3.peer_id] = {
            peer_id: data3.peer_id,
            transcript: data3.transcript,
            final: data3.final,
            transcriptQueue: new SimpleQueue(),
            start: data3.start,
            end: data3.end
          };
          this.storage[data3.peer_id].transcriptQueue.enqueue(data3);
          return;
        }
        this.storage[data3.peer_id].transcriptQueue.enqueue(data3);
      }
      dequeue() {
        const key = Object.keys(this.storage).shift() || "";
        const captionData = this.storage[key];
        captionData.transcriptQueue.reset();
        delete this.storage[key];
        return captionData;
      }
      peek() {
        if (this.size() <= 0) return void 0;
        const key = Object.keys(this.storage).shift() || "";
        return this.storage[key];
      }
      findPeerData() {
        const keys = Object.keys(this.storage);
        const data3 = keys.map((key) => {
          const data4 = this.storage[key];
          const word = data4.transcriptQueue.getTranscription();
          return { [key]: word };
        });
        return data3;
      }
      size() {
        return Object.keys(this.storage).length;
      }
    };
    CaptionMaintainerQueue = class {
      captionData;
      constructor() {
        this.captionData = new Queue();
      }
      push(data3 = []) {
        data3.forEach((value) => {
          this.captionData.enqueue(value);
        });
      }
    };
    TranscriptView = ({ peer_id, data: data3 }) => {
      const peerName = (0, import_react_sdk104.useHMSStore)((0, import_react_sdk104.selectPeerNameByID)(peer_id)) || "Participant";
      data3 = data3.trim();
      if (!data3) return null;
      return /* @__PURE__ */ import_react194.default.createElement(
        Text,
        {
          variant: "body2",
          css: {
            fontWeight: "$normal"
          }
        },
        /* @__PURE__ */ import_react194.default.createElement("b", null, peerName, ": "),
        data3
      );
    };
    CaptionsViewer = ({
      defaultPosition,
      setDefaultPosition
    }) => {
      const { elements, screenType } = useRoomLayoutConferencingScreen();
      const isMobile = (0, import_react_use45.useMedia)(config.media.md);
      const isChatOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.CHAT);
      const showCaptionAtTop = elements?.chat?.is_overlay && isChatOpen && isMobile;
      const [captionQueue] = (0, import_react194.useState)(new CaptionMaintainerQueue());
      const [currentData, setCurrentData] = (0, import_react194.useState)([]);
      const isCaptionEnabled = useIsCaptionEnabled();
      const isTranscriptionEnabled = (0, import_react_sdk104.useHMSStore)(import_react_sdk104.selectIsTranscriptionEnabled);
      const nodeRef = (0, import_react194.useRef)(null);
      (0, import_react194.useEffect)(() => {
        const timeInterval = setInterval(() => {
          if (!captionQueue) {
            return;
          }
          const data3 = captionQueue.captionData?.findPeerData();
          setCurrentData(data3);
        }, 1e3);
        return () => clearInterval(timeInterval);
      }, [captionQueue]);
      (0, import_react_sdk104.useTranscript)({
        onTranscript: (data3) => {
          captionQueue && captionQueue.push(data3);
        }
      });
      const dataToShow = currentData.filter((data3) => {
        const key = Object.keys(data3)[0];
        if (data3[key]) {
          return true;
        }
        return false;
      });
      if (dataToShow.length <= 0 || screenType === "hls_live_streaming" || !isCaptionEnabled || !isTranscriptionEnabled) {
        return null;
      }
      return /* @__PURE__ */ import_react194.default.createElement(
        import_react_draggable2.default,
        {
          bounds: "parent",
          nodeRef,
          defaultPosition,
          onStop: (_, data3) => {
            setDefaultPosition({ x: data3.lastX, y: data3.lastY });
          }
        },
        /* @__PURE__ */ import_react194.default.createElement(
          Box,
          {
            ref: nodeRef,
            css: {
              position: "absolute",
              w: isMobile ? "100%" : "40%",
              bottom: showCaptionAtTop ? "" : "0",
              top: showCaptionAtTop ? "0" : "",
              left: isMobile ? 0 : "50%",
              transform: isMobile ? "" : "translateX(-50%)",
              background: "#000000A3",
              overflow: "clip",
              zIndex: 10,
              height: "fit-content",
              r: "$1",
              p: "$6",
              transition: "bottom 0.3s ease-in-out",
              "&:empty": { display: "none" }
            }
          },
          /* @__PURE__ */ import_react194.default.createElement(Flex, { direction: "column" }, dataToShow.map((data3, index) => {
            const key = Object.keys(data3)[0];
            return /* @__PURE__ */ import_react194.default.createElement(TranscriptView, { key: index, peer_id: key, data: data3[key] });
          }))
        )
      );
    };
  }
});

// src/Prebuilt/components/hooks/useCloseScreenshareWhiteboard.tsx
var import_react195, import_react_sdk105, useCloseScreenshareWhiteboard;
var init_useCloseScreenshareWhiteboard = __esm({
  "src/Prebuilt/components/hooks/useCloseScreenshareWhiteboard.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react195 = require("react");
    import_react_sdk105 = require("@100mslive/react-sdk");
    useCloseScreenshareWhiteboard = () => {
      const peerSharing = (0, import_react_sdk105.useHMSStore)(import_react_sdk105.selectPeerScreenSharing);
      const { isOwner: isWhiteboardOwner, toggle: toggleWhiteboard } = (0, import_react_sdk105.useWhiteboard)();
      (0, import_react195.useEffect)(() => {
        if (isWhiteboardOwner && peerSharing) {
          toggleWhiteboard?.();
        }
      }, [isWhiteboardOwner, toggleWhiteboard, peerSharing]);
    };
  }
});

// src/Prebuilt/components/HlsStatsOverlay.jsx
function HlsStatsOverlay({ hlsStatsState, onClose }) {
  return /* @__PURE__ */ import_react196.default.createElement(
    Flex,
    {
      css: {
        position: "absolute",
        width: "$80",
        marginLeft: "$8",
        padding: "$8 $8 $10",
        zIndex: 10,
        backgroundColor: "$surface_brighter",
        borderRadius: "$1"
      },
      direction: "column"
    },
    /* @__PURE__ */ import_react196.default.createElement(IconButton_default, { css: { position: "absolute", top: "$2", right: "$2" }, onClick: onClose }, /* @__PURE__ */ import_react196.default.createElement(import_react_icons88.CrossIcon, null)),
    /* @__PURE__ */ import_react196.default.createElement(HlsStatsRow, { label: "URL" }, /* @__PURE__ */ import_react196.default.createElement(Flex, { align: "center" }, /* @__PURE__ */ import_react196.default.createElement(
      "a",
      {
        style: { cursor: "pointer", textDecoration: "underline" },
        href: hlsStatsState?.url,
        target: "_blank",
        rel: "noreferrer"
      },
      "Stream url"
    ))),
    /* @__PURE__ */ import_react196.default.createElement(HlsStatsRow, { label: "Video size" }, ` ${hlsStatsState?.videoSize?.width}x${hlsStatsState?.videoSize?.height}`),
    /* @__PURE__ */ import_react196.default.createElement(HlsStatsRow, { label: "Buffer duration" }, hlsStatsState?.bufferedDuration?.toFixed(2), " "),
    /* @__PURE__ */ import_react196.default.createElement(HlsStatsRow, { label: "Connection speed" }, `${(hlsStatsState?.bandwidthEstimate / (1e3 * 1e3)).toFixed(2)} Mbps`),
    /* @__PURE__ */ import_react196.default.createElement(HlsStatsRow, { label: "Bitrate" }, `${(hlsStatsState?.bitrate / (1e3 * 1e3)).toFixed(2)} Mbps`),
    /* @__PURE__ */ import_react196.default.createElement(HlsStatsRow, { label: "distance from live" }, getDurationFromSeconds(hlsStatsState.distanceFromLive / 1e3)),
    /* @__PURE__ */ import_react196.default.createElement(HlsStatsRow, { label: "Dropped frames" }, hlsStatsState?.droppedFrames)
  );
}
function getDurationFromSeconds(timeInSeconds) {
  let time = Math.floor(timeInSeconds);
  const hours = Math.floor(time / 3600);
  time = time - hours * 3600;
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time - minutes * 60);
  const prefixedMinutes = `${minutes < 10 ? "0" + minutes : minutes}`;
  const prefixedSeconds = `${seconds < 10 ? "0" + seconds : seconds}`;
  let videoTimeStr = `${prefixedMinutes}:${prefixedSeconds}`;
  if (hours) {
    const prefixedHours = `${hours < 10 ? "0" + hours : hours}`;
    videoTimeStr = `${prefixedHours}:${prefixedMinutes}:${prefixedSeconds}`;
  }
  return videoTimeStr;
}
var import_react196, import_react_icons88, HlsStatsRow;
var init_HlsStatsOverlay = __esm({
  "src/Prebuilt/components/HlsStatsOverlay.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react196 = __toESM(require("react"));
    import_react_icons88 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_IconButton3();
    HlsStatsRow = (0, import_react196.memo)(({ label, children }) => {
      return /* @__PURE__ */ import_react196.default.createElement(Flex, { gap: 4, justify: "center", css: { width: "100%" } }, /* @__PURE__ */ import_react196.default.createElement(
        Text,
        {
          css: {
            width: "50%",
            "@md": { fontSize: "$md" },
            "@sm": { fontSize: "$sm" }
            // textAlign: "right",
          }
        },
        label
      ), /* @__PURE__ */ import_react196.default.createElement(
        Text,
        {
          css: {
            "@md": { fontSize: "$md" },
            "@sm": { fontSize: "$sm" },
            width: "50%",
            overflowWrap: "break-word"
            // textAlign: "left",
          }
        },
        children
      ));
    });
  }
});

// src/Prebuilt/components/HMSVideo/Controls.jsx
var VideoControls, LeftControls, RightControls;
var init_Controls = __esm({
  "src/Prebuilt/components/HMSVideo/Controls.jsx"() {
    "use strict";
    init_cjs_shims();
    init_src();
    VideoControls = styled(Flex, {
      justifyContent: "center",
      alignItems: "center",
      alignSelf: "stretch",
      width: "100%",
      gap: "$2"
    });
    LeftControls = styled(Flex, {
      justifyContent: "flex-start",
      alignItems: "center",
      width: "100%",
      gap: "$4"
    });
    RightControls = styled(Flex, {
      justifyContent: "flex-end",
      alignItems: "center",
      width: "100%",
      gap: "$4"
    });
  }
});

// src/Prebuilt/components/HMSVideo/HMSVideo.jsx
var import_react197, HMSVideo;
var init_HMSVideo = __esm({
  "src/Prebuilt/components/HMSVideo/HMSVideo.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react197 = __toESM(require("react"));
    init_Layout();
    HMSVideo = (0, import_react197.forwardRef)(({ children, ...props }, videoRef) => {
      return /* @__PURE__ */ import_react197.default.createElement(
        Flex,
        {
          "data-testid": "hms-video",
          css: {
            size: "100%",
            position: "relative",
            justifyContent: "center",
            transition: "all 0.3s ease-in-out",
            "@md": {
              height: "auto",
              "& video": {
                height: "$60 !important"
              }
            },
            "& video::cue": {
              // default for on-surface-high
              color: "#EFF0FA",
              whiteSpace: "pre-line",
              fontSize: "$sm",
              fontStyle: "normal",
              fontWeight: "$regular",
              lineHeight: "$sm",
              letterSpacing: "0.25px"
            },
            "& video::-webkit-media-text-track-display": {
              padding: "0 $4",
              boxShadow: "0px 1px 3px 0px #000000A3"
            },
            "& video::-webkit-media-text-track-container": {
              fontSize: "$space$10 !important"
            }
          },
          direction: "column",
          ...props
        },
        /* @__PURE__ */ import_react197.default.createElement(
          "video",
          {
            style: {
              margin: "0 auto",
              objectFit: "contain",
              width: "auto",
              height: "100%",
              maxWidth: "100%"
            },
            ref: videoRef,
            playsInline: true,
            disablePictureInPicture: true
          }
        ),
        children
      );
    });
  }
});

// src/Prebuilt/components/HMSVideo/PlayerContext.tsx
var import_react198, HMSPlayerContext, useHMSPlayerContext;
var init_PlayerContext = __esm({
  "src/Prebuilt/components/HMSVideo/PlayerContext.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react198 = __toESM(require("react"));
    HMSPlayerContext = import_react198.default.createContext({
      hlsPlayer: void 0
    });
    useHMSPlayerContext = () => {
      const context = (0, import_react198.useContext)(HMSPlayerContext);
      return context;
    };
  }
});

// src/Prebuilt/components/HMSVideo/PlayPauseButton.tsx
var import_react199, import_react_icons89, PlayPauseButton;
var init_PlayPauseButton = __esm({
  "src/Prebuilt/components/HMSVideo/PlayPauseButton.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react199 = __toESM(require("react"));
    import_react_icons89 = require("@100mslive/react-icons");
    init_src();
    init_PlayerContext();
    PlayPauseButton = ({
      isPaused,
      width = 20,
      height = 20
    }) => {
      const { hlsPlayer: hlsPlayer2 } = useHMSPlayerContext();
      const onClick = async (event) => {
        event?.stopPropagation();
        isPaused ? await hlsPlayer2?.play() : hlsPlayer2?.pause();
      };
      return /* @__PURE__ */ import_react199.default.createElement(Tooltip, { title: isPaused ? "Play" : "Pause", side: "top" }, /* @__PURE__ */ import_react199.default.createElement(IconButton, { onClick, "data-testid": "play_pause_btn" }, isPaused ? /* @__PURE__ */ import_react199.default.createElement(import_react_icons89.PlayIcon, { width, height }) : /* @__PURE__ */ import_react199.default.createElement(import_react_icons89.PauseIcon, { width, height })));
    };
  }
});

// src/Prebuilt/components/HMSVideo/SeekControl.tsx
var import_react200, SeekControl;
var init_SeekControl = __esm({
  "src/Prebuilt/components/HMSVideo/SeekControl.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react200 = __toESM(require("react"));
    init_src();
    SeekControl = ({
      title,
      onClick,
      children,
      css: css2
    }) => {
      return /* @__PURE__ */ import_react200.default.createElement(Tooltip, { title, side: "top" }, /* @__PURE__ */ import_react200.default.createElement(IconButton, { onClick, "data-testid": "backward_forward_arrow_btn", css: css2 }, children));
    };
  }
});

// src/Prebuilt/components/HMSVideo/PlayPauseSeekControls.tsx
var import_react201, import_react_use46, import_react_icons90, PlayPauseSeekControls, PlayPauseSeekOverlayControls;
var init_PlayPauseSeekControls = __esm({
  "src/Prebuilt/components/HMSVideo/PlayPauseSeekControls.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react201 = __toESM(require("react"));
    import_react_use46 = require("react-use");
    import_react_icons90 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_Theme();
    init_PlayPauseButton();
    init_SeekControl();
    init_hooks();
    PlayPauseSeekControls = ({
      isPaused,
      onSeekTo
    }) => {
      return /* @__PURE__ */ import_react201.default.createElement(import_react201.default.Fragment, null, /* @__PURE__ */ import_react201.default.createElement(
        SeekControl,
        {
          onClick: (e) => {
            e.stopPropagation();
            onSeekTo(-10);
          },
          title: "backward"
        },
        /* @__PURE__ */ import_react201.default.createElement(import_react_icons90.BackwardArrowIcon, { width: 20, height: 20 })
      ), /* @__PURE__ */ import_react201.default.createElement(PlayPauseButton, { isPaused }), /* @__PURE__ */ import_react201.default.createElement(
        SeekControl,
        {
          onClick: (e) => {
            e.stopPropagation();
            onSeekTo(10);
          },
          title: "forward"
        },
        /* @__PURE__ */ import_react201.default.createElement(import_react_icons90.ForwardArrowIcon, { width: 20, height: 20 })
      ));
    };
    PlayPauseSeekOverlayControls = ({
      isPaused,
      showControls,
      hoverControlsVisible
    }) => {
      const isMobile = (0, import_react_use46.useMedia)(config.media.md);
      const isLandscape = useIsLandscape();
      if (!isMobile && !isLandscape) {
        return /* @__PURE__ */ import_react201.default.createElement(import_react201.default.Fragment, null, /* @__PURE__ */ import_react201.default.createElement(
          Flex,
          {
            css: {
              bg: "rgba(0, 0, 0, 0.6)",
              r: "$round",
              size: "$24",
              visibility: hoverControlsVisible.seekBackward ? `` : `hidden`,
              opacity: hoverControlsVisible.seekBackward ? `1` : "0"
            },
            direction: "column",
            align: "center"
          },
          /* @__PURE__ */ import_react201.default.createElement(SeekControl, { title: "backward" }, /* @__PURE__ */ import_react201.default.createElement(import_react_icons90.BackwardArrowIcon, { width: 52, height: 52 })),
          /* @__PURE__ */ import_react201.default.createElement(Text, { variant: "body2", css: { fontWeight: "$regular" } }, "10 secs")
        ), /* @__PURE__ */ import_react201.default.createElement(
          Box,
          {
            css: {
              bg: "rgba(0, 0, 0, 0.6)",
              r: "$round",
              visibility: hoverControlsVisible.pausePlay ? `` : `hidden`,
              opacity: hoverControlsVisible.pausePlay ? `1` : "0"
            }
          },
          /* @__PURE__ */ import_react201.default.createElement(PlayPauseButton, { isPaused, width: 48, height: 48 })
        ), /* @__PURE__ */ import_react201.default.createElement(
          Flex,
          {
            css: {
              bg: "rgba(0, 0, 0, 0.6)",
              r: "$round",
              size: "$24",
              visibility: hoverControlsVisible.seekForward ? `` : `hidden`,
              opacity: hoverControlsVisible.seekForward ? `1` : "0"
            },
            direction: "column",
            align: "center"
          },
          /* @__PURE__ */ import_react201.default.createElement(SeekControl, { title: "forward" }, /* @__PURE__ */ import_react201.default.createElement(import_react_icons90.ForwardArrowIcon, { width: 52, height: 52 })),
          /* @__PURE__ */ import_react201.default.createElement(Text, { variant: "body2", css: { fontWeight: "$regular" } }, "10 secs")
        ));
      }
      return /* @__PURE__ */ import_react201.default.createElement(
        Flex,
        {
          align: "center",
          justify: "center",
          css: {
            position: "absolute",
            bg: "#00000066",
            display: "inline-flex",
            gap: "$2",
            zIndex: 1,
            size: "100%",
            visibility: showControls ? `` : `hidden`,
            opacity: showControls ? `1` : "0"
          }
        },
        /* @__PURE__ */ import_react201.default.createElement(
          SeekControl,
          {
            title: "backward",
            css: {
              visibility: hoverControlsVisible.seekBackward ? `` : `hidden`,
              opacity: hoverControlsVisible.seekBackward ? `1` : "0"
            }
          },
          /* @__PURE__ */ import_react201.default.createElement(import_react_icons90.BackwardArrowIcon, { width: 32, height: 32 })
        ),
        /* @__PURE__ */ import_react201.default.createElement(
          Box,
          {
            css: {
              bg: "rgba(0, 0, 0, 0.6)",
              r: "$round"
            }
          },
          /* @__PURE__ */ import_react201.default.createElement(PlayPauseButton, { isPaused, width: 48, height: 48 })
        ),
        /* @__PURE__ */ import_react201.default.createElement(
          SeekControl,
          {
            title: "forward",
            css: {
              visibility: hoverControlsVisible.seekForward ? `` : `hidden`,
              opacity: hoverControlsVisible.seekForward ? `1` : "0"
            }
          },
          /* @__PURE__ */ import_react201.default.createElement(import_react_icons90.ForwardArrowIcon, { width: 32, height: 32 })
        )
      );
    };
  }
});

// src/Prebuilt/components/HMSVideo/utils.ts
function getPercentage(a, b) {
  return a / b * 100;
}
function getDurationFromSeconds2(timeInSeconds) {
  let time = Math.floor(timeInSeconds);
  const hours = Math.floor(time / 3600);
  time = time - hours * 3600;
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time - minutes * 60);
  const prefixedMinutes = `${minutes < 10 ? `0${minutes}` : minutes}`;
  const prefixedSeconds = `${seconds < 10 ? `0${seconds}` : seconds}`;
  let videoTimeStr = `${prefixedMinutes}:${prefixedSeconds}`;
  if (hours) {
    const prefixedHours = `${hours < 10 ? `0${hours}` : hours}`;
    videoTimeStr = `${prefixedHours}:${prefixedMinutes}:${prefixedSeconds}`;
  }
  return videoTimeStr;
}
function getDuration(videoEl) {
  if (isFinite(videoEl.duration)) {
    return videoEl.duration;
  }
  if (videoEl.seekable.length > 0) {
    return videoEl.seekable.end(0);
  }
  return 0;
}
var init_utils6 = __esm({
  "src/Prebuilt/components/HMSVideo/utils.ts"() {
    "use strict";
    init_cjs_shims();
  }
});

// src/Prebuilt/components/HMSVideo/VideoProgress.tsx
var import_react202, VideoProgress;
var init_VideoProgress = __esm({
  "src/Prebuilt/components/HMSVideo/VideoProgress.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react202 = __toESM(require("react"));
    init_src();
    init_PlayerContext();
    init_utils6();
    VideoProgress = ({
      seekProgress,
      setSeekProgress
    }) => {
      const { hlsPlayer: hlsPlayer2 } = useHMSPlayerContext();
      const [videoProgress, setVideoProgress] = (0, import_react202.useState)(0);
      const [bufferProgress, setBufferProgress] = (0, import_react202.useState)(0);
      const videoEl = hlsPlayer2?.getVideoElement();
      const setProgress = (0, import_react202.useCallback)(() => {
        if (!videoEl) {
          return;
        }
        const duration = getDuration(videoEl);
        const videoProgress2 = Math.floor(getPercentage(videoEl.currentTime, duration));
        let bufferProgress2 = 0;
        if (videoEl.buffered.length > 0) {
          bufferProgress2 = Math.floor(getPercentage(videoEl.buffered?.end(0), duration));
        }
        if (!isNaN(videoProgress2)) {
          setVideoProgress(videoProgress2);
        }
        if (!isNaN(bufferProgress2)) {
          setBufferProgress(bufferProgress2);
        }
      }, [videoEl]);
      const timeupdateHandler = (0, import_react202.useCallback)(() => {
        if (!videoEl || seekProgress) {
          return;
        }
        setProgress();
      }, [seekProgress, setProgress, videoEl]);
      (0, import_react202.useEffect)(() => {
        if (!videoEl) {
          return;
        }
        setProgress();
        videoEl.addEventListener("timeupdate", timeupdateHandler);
        return function cleanup() {
          videoEl?.removeEventListener("timeupdate", timeupdateHandler);
        };
      }, [setProgress, timeupdateHandler, videoEl]);
      const onProgress = (progress) => {
        const progress1 = Math.floor(getPercentage(progress[0], 100));
        const videoEl2 = hlsPlayer2?.getVideoElement();
        if (!videoEl2) {
          return;
        }
        const duration = isFinite(videoEl2.duration) ? videoEl2.duration : videoEl2.seekable?.end(0) || 0;
        const currentTime = progress1 * duration / 100;
        hlsPlayer2?.seekTo(currentTime);
        setProgress();
      };
      if (!videoEl) {
        return null;
      }
      return /* @__PURE__ */ import_react202.default.createElement(Flex, { align: "center", css: { cursor: "pointer", h: "$2", alignSelf: "stretch" } }, /* @__PURE__ */ import_react202.default.createElement(
        Slider,
        {
          id: "video-actual-rest",
          css: {
            cursor: "pointer",
            h: "$2",
            zIndex: 1,
            transition: `all .2s ease .5s`
          },
          min: 0,
          max: 100,
          step: 1,
          value: [videoProgress],
          showTooltip: false,
          onValueChange: onProgress,
          onPointerDown: () => setSeekProgress(true),
          onPointerUp: () => setSeekProgress(false),
          thumbStyles: { w: "$6", h: "$6" }
        }
      ), /* @__PURE__ */ import_react202.default.createElement(
        Box,
        {
          id: "video-buffer",
          css: {
            h: "$2",
            width: `${bufferProgress - videoProgress}%`,
            background: "$on_surface_high",
            position: "absolute",
            left: `${videoProgress}%`,
            opacity: "25%"
          }
        }
      ));
    };
  }
});

// src/Prebuilt/components/HMSVideo/VideoTime.tsx
var import_react203, import_hls_player2, VideoTime;
var init_VideoTime = __esm({
  "src/Prebuilt/components/HMSVideo/VideoTime.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react203 = __toESM(require("react"));
    import_hls_player2 = require("@100mslive/hls-player");
    init_Text2();
    init_PlayerContext();
    init_utils6();
    VideoTime = () => {
      const { hlsPlayer: hlsPlayer2 } = useHMSPlayerContext();
      const [videoTime, setVideoTime] = (0, import_react203.useState)(getDurationFromSeconds2(0));
      const updateTime = (0, import_react203.useCallback)(
        (currentTime) => {
          const videoEl = hlsPlayer2?.getVideoElement();
          if (videoEl) {
            const duration = getDuration(videoEl);
            setVideoTime(getDurationFromSeconds2(duration - currentTime));
          } else {
            setVideoTime(getDurationFromSeconds2(currentTime));
          }
        },
        [hlsPlayer2]
      );
      (0, import_react203.useEffect)(() => {
        const timeupdateHandler = (currentTime) => {
          updateTime(currentTime);
        };
        if (hlsPlayer2) {
          hlsPlayer2.on(import_hls_player2.HMSHLSPlayerEvents.CURRENT_TIME, timeupdateHandler);
          const videoEl = hlsPlayer2?.getVideoElement();
          updateTime(videoEl.currentTime);
        }
        return function cleanup() {
          hlsPlayer2?.off(import_hls_player2.HMSHLSPlayerEvents.CURRENT_TIME, timeupdateHandler);
        };
      }, [hlsPlayer2, updateTime]);
      return hlsPlayer2 ? /* @__PURE__ */ import_react203.default.createElement(
        Text,
        {
          variant: "body1",
          css: {
            minWidth: "$16",
            c: "$on_surface_medium",
            display: "flex",
            justifyContent: "center",
            fontWeight: "$regular"
          }
        },
        "-",
        videoTime
      ) : null;
    };
  }
});

// src/Prebuilt/components/HMSVideo/VolumeControl.tsx
var import_react204, import_react_icons91, VolumeControl, VolumeIcon;
var init_VolumeControl = __esm({
  "src/Prebuilt/components/HMSVideo/VolumeControl.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react204 = __toESM(require("react"));
    import_react_icons91 = require("@100mslive/react-icons");
    init_src();
    init_PlayerContext();
    VolumeControl = () => {
      const { hlsPlayer: hlsPlayer2 } = useHMSPlayerContext();
      const [volume, setVolume] = (0, import_react204.useState)(hlsPlayer2?.volume ?? 100);
      const [showSlider, setShowSlider] = (0, import_react204.useState)(false);
      return /* @__PURE__ */ import_react204.default.createElement(
        Flex,
        {
          align: "center",
          css: { color: "$on_surface_high" },
          onMouseOver: (event) => {
            event.stopPropagation();
            setShowSlider(true);
          },
          onMouseLeave: (event) => {
            event.stopPropagation();
            setShowSlider(false);
          }
        },
        /* @__PURE__ */ import_react204.default.createElement(
          VolumeIcon,
          {
            volume,
            onClick: () => {
              if (volume > 0) {
                setVolume(0);
                hlsPlayer2?.setVolume(0);
              } else {
                setVolume(100);
                hlsPlayer2?.setVolume(100);
              }
            }
          }
        ),
        /* @__PURE__ */ import_react204.default.createElement(
          Slider,
          {
            css: {
              mx: "$4",
              w: "$20",
              cursor: "pointer",
              "@sm": { w: "$14" },
              "@xs": { w: "$14" },
              opacity: showSlider ? "1" : "0",
              display: showSlider ? "" : "none",
              transition: `all .2s ease .5s`
            },
            min: 0,
            max: 100,
            step: 1,
            value: [volume],
            onValueChange: (volume2) => {
              hlsPlayer2?.setVolume(volume2[0]);
              setVolume(volume2[0]);
            },
            thumbStyles: { w: "$6", h: "$6" }
          }
        )
      );
    };
    VolumeIcon = ({ volume, onClick }) => {
      if (volume === 0) {
        return /* @__PURE__ */ import_react204.default.createElement(import_react_icons91.VolumeZeroIcon, { style: { cursor: "pointer", transition: "color 0.3s" }, onClick });
      }
      return volume < 50 ? /* @__PURE__ */ import_react204.default.createElement(import_react_icons91.VolumeOneIcon, { style: { cursor: "pointer", transition: "color 0.3s" }, onClick }) : /* @__PURE__ */ import_react204.default.createElement(import_react_icons91.VolumeTwoIcon, { style: { cursor: "pointer", transition: "color 0.3s" }, onClick });
    };
  }
});

// src/Prebuilt/components/HMSVideo/index.ts
var HMSVideoPlayer;
var init_HMSVideo2 = __esm({
  "src/Prebuilt/components/HMSVideo/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Controls();
    init_HMSVideo();
    init_PlayPauseSeekControls();
    init_VideoProgress();
    init_VideoTime();
    init_VolumeControl();
    HMSVideoPlayer = {
      Root: HMSVideo,
      Progress: VideoProgress,
      Duration: VideoTime,
      Volume: VolumeControl,
      Controls: {
        Root: VideoControls,
        Left: LeftControls,
        Right: RightControls
      },
      PlayPauseSeekControls: {
        Overlay: PlayPauseSeekOverlayControls,
        Button: PlayPauseSeekControls
      }
    };
  }
});

// src/Prebuilt/components/HMSVideo/FullscreenButton.tsx
var import_react205, import_react_icons92, FullScreenButton2;
var init_FullscreenButton = __esm({
  "src/Prebuilt/components/HMSVideo/FullscreenButton.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react205 = __toESM(require("react"));
    import_react_icons92 = require("@100mslive/react-icons");
    init_src();
    FullScreenButton2 = ({ isFullScreen, onToggle }) => {
      return /* @__PURE__ */ import_react205.default.createElement(Tooltip, { title: `${isFullScreen ? "Exit" : "Go"} fullscreen`, side: "top" }, /* @__PURE__ */ import_react205.default.createElement(IconButton, { css: { margin: "0px" }, onClick: onToggle, key: "fullscreen_btn", "data-testid": "fullscreen_btn" }, /* @__PURE__ */ import_react205.default.createElement(Flex, null, isFullScreen ? /* @__PURE__ */ import_react205.default.createElement(import_react_icons92.ShrinkIcon, null) : /* @__PURE__ */ import_react205.default.createElement(import_react_icons92.ExpandIcon, null))));
    };
  }
});

// src/Prebuilt/components/HMSVideo/HLSAutoplayBlockedPrompt.tsx
function HLSAutoplayBlockedPrompt({
  open,
  unblockAutoPlay
}) {
  const isLandscape = useIsLandscape();
  const isMobile = (0, import_react_use47.useMedia)(config.media.md);
  if ((isMobile || isLandscape) && open) {
    return /* @__PURE__ */ import_react206.default.createElement(
      IconButton,
      {
        css: {
          border: "1px solid white",
          bg: "white",
          color: "#000",
          r: "$2"
        },
        onClick: async () => await unblockAutoPlay()
      },
      /* @__PURE__ */ import_react206.default.createElement(import_react_icons93.VolumeTwoIcon, { width: "32", height: "32" }),
      /* @__PURE__ */ import_react206.default.createElement(
        Text,
        {
          variant: "body1",
          css: {
            fontWeight: "$semiBold",
            px: "$2",
            color: "#000"
          }
        },
        "Tap To Unmute"
      )
    );
  }
  return /* @__PURE__ */ import_react206.default.createElement(
    Dialog.Root,
    {
      open,
      onOpenChange: async (value) => {
        if (!value) {
          await unblockAutoPlay();
        }
      }
    },
    /* @__PURE__ */ import_react206.default.createElement(DialogContent, { title: "Attention", closeable: false }, /* @__PURE__ */ import_react206.default.createElement(DialogRow, null, /* @__PURE__ */ import_react206.default.createElement(Text, { variant: "md" }, 'The browser wants us to get a confirmation for playing the HLS Stream. Please click "play stream" to proceed.')), /* @__PURE__ */ import_react206.default.createElement(DialogRow, { justify: "end" }, /* @__PURE__ */ import_react206.default.createElement(
      Button,
      {
        variant: "primary",
        onClick: async () => {
          await unblockAutoPlay();
        }
      },
      "Play stream"
    )))
  );
}
var import_react206, import_react_use47, import_react_icons93;
var init_HLSAutoplayBlockedPrompt = __esm({
  "src/Prebuilt/components/HMSVideo/HLSAutoplayBlockedPrompt.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react206 = __toESM(require("react"));
    import_react_use47 = require("react-use");
    import_react_icons93 = require("@100mslive/react-icons");
    init_src();
    init_DialogContent2();
    init_hooks();
  }
});

// src/Prebuilt/components/HMSVideo/HLSCaptionSelector.tsx
function HLSCaptionSelector({ isEnabled }) {
  const { hlsPlayer: hlsPlayer2 } = useHMSPlayerContext();
  return /* @__PURE__ */ import_react207.default.createElement(Tooltip, { title: "Subtitles/closed captions", side: "top" }, /* @__PURE__ */ import_react207.default.createElement(IconButton, { css: { p: "$2" }, onClick: () => hlsPlayer2?.toggleCaption() }, isEnabled ? /* @__PURE__ */ import_react207.default.createElement(import_react_icons94.ClosedCaptionIcon, { width: "20", height: "20px" }) : /* @__PURE__ */ import_react207.default.createElement(import_react_icons94.OpenCaptionIcon, { width: "20", height: "20px" })));
}
var import_react207, import_react_icons94;
var init_HLSCaptionSelector = __esm({
  "src/Prebuilt/components/HMSVideo/HLSCaptionSelector.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react207 = __toESM(require("react"));
    import_react_icons94 = require("@100mslive/react-icons");
    init_src();
    init_PlayerContext();
  }
});

// src/Prebuilt/components/HMSVideo/HLSQualitySelector.tsx
function HLSQualitySelector({
  open,
  onOpenChange,
  layers,
  onQualityChange,
  selection,
  isAuto,
  containerRef
}) {
  const isMobile = (0, import_react_use48.useMedia)(config.media.md);
  const isLandscape = useIsLandscape();
  if (layers.length === 0) {
    return null;
  }
  if (isMobile || isLandscape) {
    return /* @__PURE__ */ import_react208.default.createElement(Sheet.Root, { open, onOpenChange }, /* @__PURE__ */ import_react208.default.createElement(Sheet.Trigger, { asChild: true, "data-testid": "quality_selector" }, /* @__PURE__ */ import_react208.default.createElement(
      Flex,
      {
        css: {
          color: "$on_primary_high",
          r: "$1",
          cursor: "pointer",
          p: "$2"
        }
      },
      /* @__PURE__ */ import_react208.default.createElement(import_react_icons95.SettingsIcon, null)
    )), /* @__PURE__ */ import_react208.default.createElement(
      Sheet.Content,
      {
        container: containerRef,
        css: { bg: "$surface_default", pb: "$1" },
        onClick: () => onOpenChange(false)
      },
      /* @__PURE__ */ import_react208.default.createElement(
        Sheet.Title,
        {
          css: {
            display: "flex",
            color: "$on_surface_high",
            w: "100%",
            justifyContent: "space-between",
            mt: "$8",
            fontSize: "$md",
            px: "$10",
            pb: "$8",
            borderBottom: "1px solid $border_bright",
            alignItems: "center"
          }
        },
        "Quality",
        /* @__PURE__ */ import_react208.default.createElement(Sheet.Close, { css: { color: "$on_surface_high" }, onClick: () => onOpenChange(false) }, /* @__PURE__ */ import_react208.default.createElement(import_react_icons95.CrossIcon, null))
      ),
      layers.map((layer) => {
        return /* @__PURE__ */ import_react208.default.createElement(
          Flex,
          {
            align: "center",
            css: {
              w: "100%",
              bg: "$surface_default",
              "&:hover": {
                bg: "$surface_brighter"
              },
              cursor: "pointer",
              gap: "$4",
              py: "$8",
              px: "$10"
            },
            key: layer.width,
            onClick: () => onQualityChange(layer)
          },
          /* @__PURE__ */ import_react208.default.createElement(Text, { variant: "caption", css: { fontWeight: "$semiBold" } }, getQualityText(layer)),
          /* @__PURE__ */ import_react208.default.createElement(Text, { variant: "caption", css: { flex: "1 1 0", c: "$on_surface_low", pl: "$2" } }, getBitrateText(layer)),
          !isAuto && layer.width === selection?.width && layer.height === selection?.height && /* @__PURE__ */ import_react208.default.createElement(import_react_icons95.CheckIcon, { width: "16px", height: "16px" })
        );
      }),
      /* @__PURE__ */ import_react208.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            w: "100%",
            bg: "$surface_default",
            "&:hover": {
              bg: "$surface_brighter"
            },
            cursor: "pointer",
            gap: "$4",
            py: "$8",
            px: "$10"
          },
          key: "auto",
          onClick: () => onQualityChange({ height: "auto" })
        },
        /* @__PURE__ */ import_react208.default.createElement(Text, { variant: "caption", css: { fontWeight: "$semiBold", flex: "1 1 0" } }, "Auto"),
        isAuto && /* @__PURE__ */ import_react208.default.createElement(import_react_icons95.CheckIcon, { width: "16px", height: "16px" })
      )
    ));
  }
  return /* @__PURE__ */ import_react208.default.createElement(Dropdown.Root, { open, onOpenChange: (value) => onOpenChange(value), modal: false }, /* @__PURE__ */ import_react208.default.createElement(Dropdown.Trigger, { asChild: true, "data-testid": "quality_selector" }, /* @__PURE__ */ import_react208.default.createElement(
    Flex,
    {
      css: {
        color: "$on_primary_high",
        r: "$1",
        cursor: "pointer",
        p: "$2"
      }
    },
    /* @__PURE__ */ import_react208.default.createElement(Tooltip, { title: "Select Quality", side: "top" }, /* @__PURE__ */ import_react208.default.createElement(Flex, { align: "center" }, /* @__PURE__ */ import_react208.default.createElement(
      Box,
      {
        css: {
          w: "$9",
          h: "$9",
          display: "inline-flex",
          alignItems: "center",
          c: "$on_surface_high"
        }
      },
      /* @__PURE__ */ import_react208.default.createElement(import_react_icons95.SettingsIcon, null)
    ), /* @__PURE__ */ import_react208.default.createElement(
      Text,
      {
        variant: {
          "@md": "sm",
          "@sm": "xs",
          "@xs": "tiny"
        },
        css: { display: "flex", alignItems: "center", ml: "$2", c: "$on_surface_medium" }
      },
      isAuto && /* @__PURE__ */ import_react208.default.createElement(import_react208.default.Fragment, null, "Auto", /* @__PURE__ */ import_react208.default.createElement(
        Box,
        {
          css: {
            mx: "$2",
            w: "$2",
            h: "$2",
            background: "$on_surface_medium",
            r: "$1"
          }
        }
      )),
      selection && Math.min(selection.width || 0, selection.height || 0),
      "p"
    )))
  )), /* @__PURE__ */ import_react208.default.createElement(Dropdown.Portal, { container: containerRef }, /* @__PURE__ */ import_react208.default.createElement(
    Dropdown.Content,
    {
      sideOffset: 5,
      align: "end",
      css: {
        height: "auto",
        maxHeight: "$52",
        w: "$40",
        bg: "$surface_bright",
        py: "$4",
        gap: "$4",
        display: "grid"
      }
    },
    layers.map((layer) => {
      return /* @__PURE__ */ import_react208.default.createElement(
        Dropdown.Item,
        {
          onClick: () => onQualityChange(layer),
          key: layer.width,
          css: {
            bg: !isAuto && layer.width === selection?.width && layer.height === selection?.height ? "$surface_default" : "$surface_bright",
            "&:hover": {
              bg: "$surface_brighter"
            },
            p: "$2 $4 $2 $8",
            h: "$12",
            gap: "$2"
          }
        },
        /* @__PURE__ */ import_react208.default.createElement(Text, { variant: "caption", css: { fontWeight: "$semiBold" } }, getQualityText(layer)),
        /* @__PURE__ */ import_react208.default.createElement(Text, { variant: "caption", css: { flex: "1 1 0", c: "$on_surface_low", pl: "$2" } }, getBitrateText(layer)),
        !isAuto && layer.width === selection?.width && layer.height === selection?.height && /* @__PURE__ */ import_react208.default.createElement(import_react_icons95.CheckIcon, { width: "16px", height: "16px" })
      );
    }),
    /* @__PURE__ */ import_react208.default.createElement(
      Dropdown.Item,
      {
        onClick: () => onQualityChange({ height: "auto" }),
        key: "auto",
        css: {
          bg: !isAuto ? "$surface_bright" : "$surface_default",
          "&:hover": {
            bg: "$surface_brighter"
          },
          p: "$2 $4 $2 $8",
          h: "$12",
          gap: "$2"
        }
      },
      /* @__PURE__ */ import_react208.default.createElement(Text, { variant: "caption", css: { fontWeight: "$semiBold", flex: "1 1 0" } }, "Auto"),
      isAuto && /* @__PURE__ */ import_react208.default.createElement(import_react_icons95.CheckIcon, { width: "16px", height: "16px" })
    )
  )));
}
var import_react208, import_react_use48, import_react_icons95, getQualityText, getBitrateText;
var init_HLSQualitySelector = __esm({
  "src/Prebuilt/components/HMSVideo/HLSQualitySelector.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react208 = __toESM(require("react"));
    import_react_use48 = require("react-use");
    import_react_icons95 = require("@100mslive/react-icons");
    init_src();
    init_Sheet2();
    init_Theme();
    init_hooks();
    getQualityText = (layer) => `${Math.min(layer.height || 0, layer.width || 0)}p `;
    getBitrateText = (layer) => `(${(Number(layer.bitrate / 1e3) / 1e3).toFixed(2)} Mbps)`;
  }
});

// src/Prebuilt/components/HMSVideo/MwebHLSViewTitle.tsx
var import_react209, import_react_icons96, HLSViewTitle;
var init_MwebHLSViewTitle = __esm({
  "src/Prebuilt/components/HMSVideo/MwebHLSViewTitle.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react209 = __toESM(require("react"));
    import_react_icons96 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_HeaderComponents();
    init_RoomDetailsRow();
    init_useRoomLayoutScreen();
    init_useSidepane();
    init_constants();
    HLSViewTitle = () => {
      const { title, details, description } = useRoomLayoutHeader();
      const toggleDetailsPane = useSidepaneToggle(SIDE_PANE_OPTIONS.ROOM_DETAILS);
      const isDetailSidepaneOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.ROOM_DETAILS);
      if (isDetailSidepaneOpen) {
        return /* @__PURE__ */ import_react209.default.createElement(
          Flex,
          {
            gap: "4",
            align: "center",
            justify: "between",
            css: {
              position: "relative",
              h: "fit-content",
              w: "100%",
              borderBottom: "1px solid $border_bright",
              p: "$8",
              backgroundColor: "$surface_dim"
            }
          },
          /* @__PURE__ */ import_react209.default.createElement(Text, { variant: "sub2", css: { fontWeight: "$semiBold" } }, "About Session"),
          /* @__PURE__ */ import_react209.default.createElement(
            Flex,
            {
              onClick: toggleDetailsPane,
              css: {
                color: "$on_surface_high",
                cursor: "pointer",
                "&:hover": { opacity: "0.8" }
              }
            },
            /* @__PURE__ */ import_react209.default.createElement(import_react_icons96.ChevronDownIcon, null)
          )
        );
      }
      return /* @__PURE__ */ import_react209.default.createElement(
        Flex,
        {
          gap: "4",
          align: "center",
          css: {
            position: "relative",
            h: "fit-content",
            w: "100%",
            borderBottom: "1px solid $border_bright",
            p: "$8",
            backgroundColor: "$surface_dim"
          }
        },
        /* @__PURE__ */ import_react209.default.createElement(Logo, null),
        /* @__PURE__ */ import_react209.default.createElement(Flex, { direction: "column" }, title ? /* @__PURE__ */ import_react209.default.createElement(Text, { variant: "sub2", css: { fontWeight: "$semiBold" } }, title) : null, /* @__PURE__ */ import_react209.default.createElement(Flex, null, /* @__PURE__ */ import_react209.default.createElement(RoomDetailsRow, { details }), description ? /* @__PURE__ */ import_react209.default.createElement(Text, { variant: "caption", css: { color: "$on_surface_medium" }, onClick: toggleDetailsPane }, "\xA0...more") : null))
      );
    };
  }
});

// src/Prebuilt/layouts/HLSView.jsx
var HLSView_exports = {};
__export(HLSView_exports, {
  default: () => HLSView_default
});
var import_react210, import_react_use49, import_hls_player3, import_screenfull3, import_ts_pattern13, import_react_sdk106, import_react_icons97, hlsPlayer, toastMap, ToggleChat, HLSView, HLSView_default;
var init_HLSView = __esm({
  "src/Prebuilt/layouts/HLSView.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react210 = __toESM(require("react"));
    import_react_use49 = require("react-use");
    import_hls_player3 = require("@100mslive/hls-player");
    import_screenfull3 = __toESM(require("screenfull"));
    import_ts_pattern13 = require("ts-pattern");
    import_react_sdk106 = require("@100mslive/react-sdk");
    import_react_icons97 = require("@100mslive/react-icons");
    init_ChatToggle();
    init_HlsStatsOverlay();
    init_HMSVideo2();
    init_FullscreenButton();
    init_HLSAutoplayBlockedPrompt();
    init_HLSCaptionSelector();
    init_HLSQualitySelector();
    init_MwebHLSViewTitle();
    init_PlayerContext();
    init_LeaveRoom();
    init_ToastManager();
    init_Button2();
    init_IconButton2();
    init_Layout();
    init_Loading2();
    init_Text2();
    init_Theme();
    init_Tooltip2();
    init_WaitingView();
    init_useSidepane();
    init_useRoomLayoutScreen();
    init_hooks();
    init_constants();
    toastMap = {};
    ToggleChat = ({ isFullScreen = false }) => {
      const { elements } = useRoomLayoutConferencingScreen();
      const sidepane = (0, import_react_sdk106.useHMSStore)((0, import_react_sdk106.selectAppData)(APP_DATA.sidePane));
      const toggleChat = useSidepaneToggle(SIDE_PANE_OPTIONS.CHAT);
      const showChat = !!elements?.chat;
      const isMobile = (0, import_react_use49.useMedia)(config.media.md);
      const hmsActions = (0, import_react_sdk106.useHMSActions)();
      (0, import_react210.useEffect)(() => {
        (0, import_ts_pattern13.match)({ sidepane, isMobile, showChat, isFullScreen }).with({ isFullScreen: true }, () => {
          hmsActions.setAppData(APP_DATA.sidePane, "");
        }).with({ isMobile: true, showChat: true, sidepane: import_ts_pattern13.P.when((value) => !value) }, () => {
          toggleChat();
        }).with({ showChat: false, isMobile: true, sidepane: SIDE_PANE_OPTIONS.CHAT }, () => {
          hmsActions.setAppData(APP_DATA.sidePane, "");
        }).otherwise(() => {
        });
      }, [sidepane, isMobile, toggleChat, showChat, hmsActions, isFullScreen]);
      return null;
    };
    HLSView = () => {
      const videoRef = (0, import_react210.useRef)(null);
      const hlsViewRef = (0, import_react210.useRef)();
      const { elements } = useRoomLayoutConferencingScreen();
      const hlsState = (0, import_react_sdk106.useHMSStore)(import_react_sdk106.selectHLSState);
      const enablHlsStats = (0, import_react_sdk106.useHMSStore)((0, import_react_sdk106.selectAppData)(APP_DATA.hlsStats));
      const notification = (0, import_react_sdk106.useHMSNotifications)(import_react_sdk106.HMSNotificationTypes.POLL_STOPPED);
      const hmsActions = (0, import_react_sdk106.useHMSActions)();
      const { themeType } = useTheme();
      const [streamEnded, setStreamEnded] = (0, import_react210.useState)(false);
      let [hlsStatsState, setHlsStatsState] = (0, import_react210.useState)(null);
      const hlsUrl = hlsState.variants[0]?.url;
      const [availableLayers, setAvailableLayers] = (0, import_react210.useState)([]);
      const [isVideoLive, setIsVideoLive] = (0, import_react210.useState)(true);
      const [isCaptionEnabled, setIsCaptionEnabled] = (0, import_react210.useState)(true);
      const [hasCaptions, setHasCaptions] = (0, import_react210.useState)(false);
      const [currentSelectedQuality, setCurrentSelectedQuality] = (0, import_react210.useState)(null);
      const [isHlsAutoplayBlocked, setIsHlsAutoplayBlocked] = (0, import_react210.useState)(false);
      const [hoverControlsVisible, setHoverControlsVisible] = (0, import_react210.useState)({
        seekForward: false,
        pausePlay: false,
        seekBackward: false
      });
      const [isPaused, setIsPaused] = (0, import_react210.useState)(false);
      const [show, toggle] = (0, import_react_use49.useToggle)(false);
      const lastHlsUrl = (0, import_react_use49.usePrevious)(hlsUrl);
      const vanillaStore = (0, import_react_sdk106.useHMSVanillaStore)();
      const [controlsVisible, setControlsVisible] = (0, import_react210.useState)(true);
      const [isUserSelectedAuto, setIsUserSelectedAuto] = (0, import_react210.useState)(true);
      const [qualityDropDownOpen, setQualityDropDownOpen] = (0, import_react210.useState)(false);
      const controlsRef = (0, import_react210.useRef)(null);
      const controlsTimerRef = (0, import_react210.useRef)();
      const [seekProgress, setSeekProgress] = (0, import_react210.useState)(false);
      const isFullScreenSupported = import_screenfull3.default.isEnabled;
      const toggleChat = useSidepaneToggle(SIDE_PANE_OPTIONS.CHAT);
      const showChat = !!elements?.chat;
      const isMobile = (0, import_react_use49.useMedia)(config.media.md);
      const isLandscape = useIsLandscape();
      const isFullScreen = (0, import_react_use49.useFullscreen)(hlsViewRef, show, {
        onClose: () => toggle(false)
      });
      const [showLoader, setShowLoader] = (0, import_react210.useState)(false);
      (0, import_react210.useEffect)(() => {
        const videoEl = videoRef.current;
        const showLoader2 = () => setShowLoader(true);
        const hideLoader = () => setShowLoader(false);
        videoEl?.addEventListener("playing", hideLoader);
        videoEl?.addEventListener("waiting", showLoader2);
        return () => {
          videoEl?.removeEventListener("playing", hideLoader);
          videoEl?.removeEventListener("waiting", showLoader2);
        };
      }, []);
      (0, import_react210.useEffect)(() => {
        if (streamEnded && lastHlsUrl !== hlsUrl) {
          setStreamEnded(false);
        }
      }, [hlsUrl, streamEnded, lastHlsUrl]);
      (0, import_react210.useEffect)(() => {
        if (!notification) return;
        const toastID = toastMap?.[notification.data.id];
        if (toastID) {
          ToastManager.removeToast(toastMap[notification.data.id]);
          delete toastMap[notification.data.id];
        }
      }, [notification]);
      (0, import_react210.useEffect)(() => {
        const videoElem = videoRef.current;
        const setStreamEndedCallback = () => {
          setStreamEnded(true);
          videoElem?.removeEventListener("ended", setStreamEndedCallback);
        };
        videoElem?.addEventListener("ended", setStreamEndedCallback);
        return () => {
          videoElem?.removeEventListener("ended", setStreamEndedCallback);
        };
      }, [hlsUrl]);
      const handleQuality = (0, import_react210.useCallback)(
        (quality) => {
          if (hlsPlayer) {
            setIsUserSelectedAuto(quality.height?.toString().toLowerCase() === "auto");
            hlsPlayer?.setLayer(quality);
          }
        },
        [availableLayers]
        //eslint-disable-line
      );
      (0, import_react210.useEffect)(() => {
        let videoEl = videoRef.current;
        const manifestLoadedHandler = ({ layers }) => {
          setAvailableLayers(layers);
          setHasCaptions(hlsPlayer?.hasCaptions());
        };
        const layerUpdatedHandler = ({ layer }) => {
          setCurrentSelectedQuality(layer);
        };
        const metadataLoadedHandler = ({ payload, ...rest }) => {
          const parsePayload = (str) => {
            try {
              return JSON.parse(str);
            } catch (e) {
              return str;
            }
          };
          const duration = rest.duration;
          const parsedPayload = parsePayload(payload);
          if (parsedPayload.startsWith("poll:")) {
            const pollId = parsedPayload.substr(parsedPayload.indexOf(":") + 1);
            const poll = vanillaStore.getState((0, import_react_sdk106.selectPollByID)(pollId));
            const pollStartedBy = vanillaStore.getState((0, import_react_sdk106.selectPeerNameByID)(poll.startedBy)) || "Participant";
            if (!toastMap[pollId]) {
              const toastID = ToastManager.addToast({
                title: `${pollStartedBy} started a ${poll.type}: ${poll.title}`,
                action: /* @__PURE__ */ import_react210.default.createElement(
                  Button,
                  {
                    onClick: () => {
                      hmsActions.setAppData(APP_DATA.pollState, {
                        [POLL_STATE.pollInView]: pollId,
                        [POLL_STATE.view]: POLL_VIEWS.VOTE
                      });
                      hmsActions.setAppData(APP_DATA.sidePane, SIDE_PANE_OPTIONS.POLLS);
                    },
                    variant: "standard",
                    css: {
                      backgroundColor: "$surface_bright",
                      fontWeight: "$semiBold",
                      color: "$on_surface_high",
                      p: "$xs $md"
                    }
                  },
                  poll.type === "quiz" ? "Answer" : "Vote"
                ),
                duration: Infinity
              });
              toastMap[pollId] = toastID;
            }
            return;
          }
          switch (parsedPayload.type) {
            case EMOJI_REACTION_TYPE:
              window.showFlyingEmoji?.({ emojiId: parsedPayload?.emojiId, senderId: parsedPayload?.senderId });
              break;
            default: {
              const toast = {
                title: `Payload from timed Metadata ${parsedPayload}`,
                duration: duration || 3e3
              };
              console.debug("Added toast ", JSON.stringify(toast));
              ToastManager.addToast(toast);
              break;
            }
          }
        };
        const handleError = (data3) => {
          console.error("[HLSView] error in hls", `${data3}`);
        };
        const handleNoLongerLive = ({ isLive }) => {
          setIsVideoLive(isLive);
        };
        const playbackEventHandler = (data3) => {
          setIsPaused(data3.state === import_hls_player3.HLSPlaybackState.paused);
          setHoverControlsVisible({
            ...hoverControlsVisible,
            pausePlay: true
          });
          setTimeout(() => {
            setHoverControlsVisible({
              ...hoverControlsVisible,
              pausePlay: false
            });
          }, 2e3);
        };
        const captionEnabledEventHandler = (isCaptionEnabled2) => {
          setIsCaptionEnabled(isCaptionEnabled2);
        };
        const handleAutoplayBlock = (data3) => setIsHlsAutoplayBlocked(!!data3);
        if (videoEl && hlsUrl) {
          hlsPlayer = new import_hls_player3.HMSHLSPlayer(hlsUrl, videoEl);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.SEEK_POS_BEHIND_LIVE_EDGE, handleNoLongerLive);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.TIMED_METADATA_LOADED, metadataLoadedHandler);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.ERROR, handleError);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.PLAYBACK_STATE, playbackEventHandler);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.CAPTION_ENABLED, captionEnabledEventHandler);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.AUTOPLAY_BLOCKED, handleAutoplayBlock);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.MANIFEST_LOADED, manifestLoadedHandler);
          hlsPlayer.on(import_hls_player3.HMSHLSPlayerEvents.LAYER_UPDATED, layerUpdatedHandler);
          return () => {
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.SEEK_POS_BEHIND_LIVE_EDGE, handleNoLongerLive);
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.ERROR, handleError);
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.TIMED_METADATA_LOADED, metadataLoadedHandler);
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.PLAYBACK_STATE, playbackEventHandler);
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.CAPTION_ENABLED, captionEnabledEventHandler);
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.AUTOPLAY_BLOCKED, handleAutoplayBlock);
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.MANIFEST_LOADED, manifestLoadedHandler);
            hlsPlayer.off(import_hls_player3.HMSHLSPlayerEvents.LAYER_UPDATED, layerUpdatedHandler);
            hlsPlayer.reset();
          };
        }
      }, [hlsUrl, vanillaStore, hmsActions]);
      (0, import_react210.useEffect)(() => {
        const onHLSStats = (state) => setHlsStatsState(state);
        if (enablHlsStats) {
          hlsPlayer?.on(import_hls_player3.HMSHLSPlayerEvents.STATS, onHLSStats);
        } else {
          hlsPlayer?.off(import_hls_player3.HMSHLSPlayerEvents.STATS, onHLSStats);
        }
        return () => {
          hlsPlayer?.off(import_hls_player3.HMSHLSPlayerEvents.STATS, onHLSStats);
        };
      }, [enablHlsStats]);
      const unblockAutoPlay = async () => {
        try {
          await hlsPlayer.play();
          setIsHlsAutoplayBlocked(false);
        } catch (error) {
          console.error("Tried to unblock Autoplay failed with", error.message);
        }
      };
      const sfnOverlayClose = () => {
        hmsActions.setAppData(APP_DATA.hlsStats, !enablHlsStats);
      };
      (0, import_react210.useEffect)(() => {
        if (controlsVisible && isFullScreen && !qualityDropDownOpen) {
          if (controlsTimerRef.current) {
            clearTimeout(controlsTimerRef.current);
          }
        }
        if (!isFullScreen && controlsTimerRef.current) {
          clearTimeout(controlsTimerRef.current);
        }
        controlsTimerRef.current = setTimeout(() => {
          if (!seekProgress) {
            setControlsVisible(false);
          }
        }, 5e3);
        return () => {
          if (controlsTimerRef.current) {
            clearTimeout(controlsTimerRef.current);
          }
        };
      }, [controlsVisible, isFullScreen, seekProgress, qualityDropDownOpen]);
      const onSeekTo = (0, import_react210.useCallback)(
        (seek) => {
          (0, import_ts_pattern13.match)({ isLandscape, isMobile, seek }).with({ seek: -10, isMobile: false, isLandscape: false }, () => {
            setHoverControlsVisible({ ...hoverControlsVisible, seekBackward: true });
            setTimeout(() => {
              setHoverControlsVisible({
                ...hoverControlsVisible,
                seekBackward: false
              });
            }, 1e3);
          }).with({ seek: 10, isMobile: false, isLandscape: false }, () => {
            setHoverControlsVisible({ ...hoverControlsVisible, seekForward: true });
            setTimeout(() => {
              setHoverControlsVisible({
                ...hoverControlsVisible,
                seekForward: false
              });
            }, 1e3);
          }).otherwise(() => null);
          hlsPlayer?.seekTo(videoRef.current?.currentTime + seek);
        },
        [hoverControlsVisible, isLandscape, isMobile]
      );
      const onDoubleClickHandler = (0, import_react210.useCallback)(
        (event) => {
          if (!(isMobile || isLandscape) || hlsState?.variants[0]?.playlist_type !== import_react_sdk106.HLSPlaylistType.DVR) {
            return;
          }
          const sidePercentage = event.screenX * 100 / event.target.clientWidth;
          if (sidePercentage < 45) {
            setHoverControlsVisible({
              ...hoverControlsVisible,
              seekBackward: true
            });
            onSeekTo(-10);
          } else {
            setHoverControlsVisible({
              ...hoverControlsVisible,
              seekForward: true
            });
            onSeekTo(10);
          }
          setTimeout(() => {
            setHoverControlsVisible({
              ...hoverControlsVisible,
              seekForward: false,
              seekBackward: false
            });
          }, 1e3);
        },
        [hlsState?.variants, hoverControlsVisible, isLandscape, isMobile, onSeekTo]
      );
      const onClickHandler = (0, import_react210.useCallback)(async () => {
        (0, import_ts_pattern13.match)({ isMobile, isLandscape, playlist_type: hlsState?.variants[0]?.playlist_type }).with({ playlist_type: import_react_sdk106.HLSPlaylistType.DVR, isMobile: false, isLandscape: false }, async () => {
          if (isPaused) {
            await hlsPlayer?.play();
          } else {
            hlsPlayer?.pause();
          }
        }).when(
          ({ isMobile: isMobile2, isLandscape: isLandscape2 }) => isMobile2 || isLandscape2,
          () => {
            setControlsVisible((value) => !value);
            if (controlsTimerRef.current) {
              clearTimeout(controlsTimerRef.current);
            }
          }
        ).otherwise(() => null);
      }, [hlsState?.variants, isLandscape, isMobile, isPaused]);
      const onHoverHandler = (0, import_react210.useCallback)(
        (event) => {
          event.preventDefault();
          if (isMobile || isLandscape) {
            return;
          }
          if (event.type === "mouseenter" || qualityDropDownOpen) {
            setControlsVisible(true);
            return;
          }
          if (event.type === "mouseleave" && !seekProgress) {
            setControlsVisible(false);
          } else if (!controlsVisible && event.type === "mousemove") {
            setControlsVisible(true);
            if (controlsTimerRef.current) {
              clearTimeout(controlsTimerRef.current);
            }
          }
        },
        [controlsVisible, isLandscape, isMobile, qualityDropDownOpen, seekProgress]
      );
      const keyHandler = useKeyboardHandler(isPaused, hlsPlayer);
      if (!hlsUrl || streamEnded) {
        return /* @__PURE__ */ import_react210.default.createElement(import_react210.default.Fragment, null, /* @__PURE__ */ import_react210.default.createElement(ToggleChat, null), hlsViewRef.current && (isMobile || isLandscape) && /* @__PURE__ */ import_react210.default.createElement(Box, { css: { position: "fixed", left: "$4", top: "$4", zIndex: 11 } }, /* @__PURE__ */ import_react210.default.createElement(LeaveRoom, { screenType: "hls_live_streaming", container: hlsViewRef.current })), /* @__PURE__ */ import_react210.default.createElement(
          Flex,
          {
            key: "hls-viewer",
            id: `hls-viewer-${themeType}`,
            ref: hlsViewRef,
            direction: isMobile || isLandscape ? "column" : "row",
            justify: "center",
            css: {
              flex: isLandscape ? "2 1 0" : "1 1 0"
            }
          },
          streamEnded ? /* @__PURE__ */ import_react210.default.createElement(
            WaitingView,
            {
              icon: /* @__PURE__ */ import_react210.default.createElement(import_react_icons97.ColoredHandIcon, { height: 56, width: 56 }),
              title: "Stream has ended",
              subtitle: "Have a nice day!"
            }
          ) : /* @__PURE__ */ import_react210.default.createElement(
            WaitingView,
            {
              icon: /* @__PURE__ */ import_react210.default.createElement(import_react_icons97.GoLiveIcon, { height: 56, width: 56, style: { color: "white" } }),
              title: "Stream yet to start",
              subtitle: "Sit back and relax"
            }
          )
        ));
      }
      return /* @__PURE__ */ import_react210.default.createElement(
        Flex,
        {
          key: "hls-viewer",
          id: `hls-viewer-${themeType}`,
          ref: hlsViewRef,
          direction: isMobile || isLandscape ? "column" : "row",
          justify: "center",
          css: {
            flex: isLandscape ? "2 1 0" : "1 1 0",
            transition: "all 0.3s ease-in-out",
            "&:fullscreen": {
              "& video": {
                height: "unset !important"
              }
            }
          }
        },
        hlsViewRef.current && (isMobile || isLandscape) && /* @__PURE__ */ import_react210.default.createElement(Box, { css: { position: "fixed", left: "$4", top: "$4", zIndex: 11 } }, /* @__PURE__ */ import_react210.default.createElement(LeaveRoom, { screenType: "hls_live_streaming", container: hlsViewRef.current })),
        /* @__PURE__ */ import_react210.default.createElement(HMSPlayerContext.Provider, { value: { hlsPlayer } }, hlsStatsState?.url && enablHlsStats && !(isMobile || isLandscape) ? /* @__PURE__ */ import_react210.default.createElement(HlsStatsOverlay, { hlsStatsState, onClose: sfnOverlayClose }) : null, /* @__PURE__ */ import_react210.default.createElement(
          Flex,
          {
            id: "hls-player-container",
            align: "center",
            justify: "center",
            css: {
              size: "100%",
              margin: "0 auto",
              "@md": {
                height: "auto"
              },
              outline: "none"
            },
            onKeyDown: async (event) => {
              if (hlsState?.variants[0]?.playlist_type === import_react_sdk106.HLSPlaylistType.DVR) {
                await keyHandler(event);
              }
            },
            tabIndex: "0"
          },
          !(isMobile || isLandscape) && /* @__PURE__ */ import_react210.default.createElement(HLSAutoplayBlockedPrompt, { open: isHlsAutoplayBlocked, unblockAutoPlay }),
          showLoader && /* @__PURE__ */ import_react210.default.createElement(
            Flex,
            {
              align: "center",
              justify: "center",
              css: {
                position: "absolute"
              }
            },
            /* @__PURE__ */ import_react210.default.createElement(Loading, { width: 72, height: 72 })
          ),
          /* @__PURE__ */ import_react210.default.createElement(
            HMSVideoPlayer.Root,
            {
              ref: videoRef,
              onMouseEnter: onHoverHandler,
              onMouseMove: onHoverHandler,
              onMouseLeave: onHoverHandler,
              onClick: onClickHandler,
              onDoubleClick: (e) => {
                onDoubleClickHandler(e);
              }
            },
            /* @__PURE__ */ import_react210.default.createElement(import_react210.default.Fragment, null, !(isMobile || isLandscape) && /* @__PURE__ */ import_react210.default.createElement(
              Flex,
              {
                align: "center",
                justify: "between",
                css: {
                  position: "absolute",
                  bg: `${hoverControlsVisible.pausePlay || hoverControlsVisible.seekBackward || hoverControlsVisible.seekForward ? "#00000066" : ""}`,
                  display: "inline-flex",
                  gap: "$2",
                  zIndex: 1,
                  size: "100%"
                }
              },
              !showLoader && hlsState?.variants[0]?.playlist_type === import_react_sdk106.HLSPlaylistType.DVR && /* @__PURE__ */ import_react210.default.createElement(
                HMSVideoPlayer.PlayPauseSeekControls.Overlay,
                {
                  isPaused,
                  showControls: controlsVisible,
                  hoverControlsVisible
                }
              )
            ), isMobile || isLandscape ? /* @__PURE__ */ import_react210.default.createElement(import_react210.default.Fragment, null, !showLoader && hlsState?.variants[0]?.playlist_type === import_react_sdk106.HLSPlaylistType.DVR && /* @__PURE__ */ import_react210.default.createElement(
              HMSVideoPlayer.PlayPauseSeekControls.Overlay,
              {
                isPaused,
                showControls: controlsVisible,
                hoverControlsVisible
              }
            ), /* @__PURE__ */ import_react210.default.createElement(
              Flex,
              {
                ref: controlsRef,
                direction: "column",
                justify: "start",
                align: "start",
                css: {
                  position: "absolute",
                  top: "0",
                  left: "0",
                  width: "100%",
                  flexShrink: 0,
                  zIndex: 1,
                  visibility: controlsVisible ? `` : `hidden`,
                  opacity: controlsVisible ? `1` : "0"
                }
              },
              /* @__PURE__ */ import_react210.default.createElement(
                HMSVideoPlayer.Controls.Root,
                {
                  css: {
                    p: "$4 $8"
                  },
                  onClick: (e) => e.stopPropagation()
                },
                /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.Controls.Right, null, (isLandscape || isMobile && isFullScreen) && showChat && /* @__PURE__ */ import_react210.default.createElement(
                  ChatToggle,
                  {
                    onClick: () => {
                      if (isFullScreen) {
                        toggle();
                      }
                      setTimeout(() => {
                        toggleChat();
                      }, 0);
                    }
                  }
                ), hasCaptions && !isHlsAutoplayBlocked && /* @__PURE__ */ import_react210.default.createElement(HLSCaptionSelector, { isEnabled: isCaptionEnabled }), hlsViewRef.current && availableLayers.length > 0 && !isHlsAutoplayBlocked ? /* @__PURE__ */ import_react210.default.createElement(
                  HLSQualitySelector,
                  {
                    layers: availableLayers,
                    onOpenChange: setQualityDropDownOpen,
                    open: qualityDropDownOpen,
                    selection: currentSelectedQuality,
                    onQualityChange: handleQuality,
                    isAuto: isUserSelectedAuto,
                    containerRef: hlsViewRef.current
                  }
                ) : null, /* @__PURE__ */ import_react210.default.createElement(HLSAutoplayBlockedPrompt, { open: isHlsAutoplayBlocked, unblockAutoPlay }))
              )
            )) : null, controlsVisible && /* @__PURE__ */ import_react210.default.createElement(
              Flex,
              {
                ref: controlsRef,
                direction: isMobile ? "columnReverse" : "column",
                justify: "end",
                align: "start",
                css: {
                  position: "absolute",
                  bottom: isFullScreen && hlsState?.variants[0]?.playlist_type === import_react_sdk106.HLSPlaylistType.DVR ? "$8" : "0",
                  left: "0",
                  zIndex: 1,
                  background: isMobile || isLandscape ? "" : `linear-gradient(180deg, ${theme.colors.background_dim.value}00 29.46%, ${theme.colors.background_dim.value}A3 100%);`,
                  width: "100%",
                  pt: "$8",
                  flexShrink: 0,
                  transition: "visibility 0s 0.5s, opacity 0.5s linear"
                }
              },
              hlsState?.variants[0]?.playlist_type === import_react_sdk106.HLSPlaylistType.DVR ? /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.Progress, { seekProgress, setSeekProgress }) : null,
              /* @__PURE__ */ import_react210.default.createElement(
                HMSVideoPlayer.Controls.Root,
                {
                  css: {
                    p: "$4 $8"
                  },
                  onClick: (e) => e.stopPropagation()
                },
                /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.Controls.Left, null, !(isMobile || isLandscape) && /* @__PURE__ */ import_react210.default.createElement(import_react210.default.Fragment, null, hlsState?.variants[0]?.playlist_type === import_react_sdk106.HLSPlaylistType.DVR ? /* @__PURE__ */ import_react210.default.createElement(import_react210.default.Fragment, null, /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.PlayPauseSeekControls.Button, { isPaused, onSeekTo }), !isVideoLive ? /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.Duration, null) : null) : null, /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.Volume, null)), /* @__PURE__ */ import_react210.default.createElement(
                  IconButton,
                  {
                    css: { px: "$2" },
                    onClick: async (e) => {
                      e.stopPropagation();
                      await hlsPlayer?.seekToLivePosition();
                      setIsVideoLive(true);
                    },
                    key: "jump-to-live_btn",
                    "data-testid": "jump-to-live_btn"
                  },
                  /* @__PURE__ */ import_react210.default.createElement(Tooltip, { title: isVideoLive ? "Live" : "Go to Live", side: "top" }, /* @__PURE__ */ import_react210.default.createElement(Flex, { justify: "center", gap: 2, align: "center" }, /* @__PURE__ */ import_react210.default.createElement(
                    Box,
                    {
                      css: {
                        height: "$4",
                        width: "$4",
                        background: isVideoLive ? "$alert_error_default" : "$on_primary_medium",
                        r: "$1"
                      }
                    }
                  ), /* @__PURE__ */ import_react210.default.createElement(
                    Text,
                    {
                      variant: "$body1",
                      css: {
                        c: isVideoLive ? "$on_surface_high" : "$on_surface_medium",
                        fontWeight: "$semiBold"
                      }
                    },
                    isVideoLive ? "LIVE" : "GO LIVE"
                  )))
                ), (isMobile || isLandscape) && !isVideoLive && hlsState?.variants[0]?.playlist_type === import_react_sdk106.HLSPlaylistType.DVR ? /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.Duration, null) : null),
                /* @__PURE__ */ import_react210.default.createElement(HMSVideoPlayer.Controls.Right, null, hasCaptions && !(isMobile || isLandscape) && /* @__PURE__ */ import_react210.default.createElement(HLSCaptionSelector, { isEnabled: isCaptionEnabled }), availableLayers.length > 0 && !(isMobile || isLandscape) ? /* @__PURE__ */ import_react210.default.createElement(
                  HLSQualitySelector,
                  {
                    layers: availableLayers,
                    onOpenChange: setQualityDropDownOpen,
                    open: qualityDropDownOpen,
                    selection: currentSelectedQuality,
                    onQualityChange: handleQuality,
                    isAuto: isUserSelectedAuto
                  }
                ) : null, isFullScreenSupported ? /* @__PURE__ */ import_react210.default.createElement(FullScreenButton2, { isFullScreen, onToggle: toggle }) : null)
              )
            ))
          )
        )),
        /* @__PURE__ */ import_react210.default.createElement(ToggleChat, { isFullScreen }),
        isMobile && !isFullScreen && /* @__PURE__ */ import_react210.default.createElement(HLSViewTitle, null)
      );
    };
    HLSView_default = HLSView;
  }
});

// src/Prebuilt/layouts/VideoStreamingSection.tsx
var import_react211, import_react_use50, import_ts_pattern14, import_react_sdk107, import_react_icons98, HLSView2, VideoStreamingSection;
var init_VideoStreamingSection = __esm({
  "src/Prebuilt/layouts/VideoStreamingSection.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react211 = __toESM(require("react"));
    import_react_use50 = require("react-use");
    import_ts_pattern14 = require("ts-pattern");
    import_react_sdk107 = require("@100mslive/react-sdk");
    import_react_icons98 = require("@100mslive/react-icons");
    init_FullPageProgress();
    init_GridLayout();
    init_Layout();
    init_Theme();
    init_EmbedView();
    init_PDFView();
    init_SidePane();
    init_WaitingView();
    init_CaptionsViewer();
    init_useUISettings();
    init_useCloseScreenshareWhiteboard();
    init_hooks();
    HLSView2 = import_react211.default.lazy(() => Promise.resolve().then(() => (init_HLSView(), HLSView_exports)));
    VideoStreamingSection = ({
      screenType,
      elements,
      hideControls = false
    }) => {
      const localPeerRoleName = (0, import_react_sdk107.useHMSStore)(import_react_sdk107.selectLocalPeerRoleName);
      const isConnected = (0, import_react_sdk107.useHMSStore)(import_react_sdk107.selectIsConnectedToRoom);
      const isSharingScreen = (0, import_react_sdk107.useHMSStore)(import_react_sdk107.selectIsLocalScreenShared);
      const hmsActions = (0, import_react_sdk107.useHMSActions)();
      const urlToIframe = useUrlToEmbed();
      const pdfAnnotatorActive = usePDFConfig();
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeHLSStream = useLandscapeHLSStream();
      const isMobile = (0, import_react_use50.useMedia)(config.media.md);
      const [captionPosition, setCaptionPosition] = (0, import_react211.useState)({ x: isMobile ? 0 : -200, y: 0 });
      useCloseScreenshareWhiteboard();
      const { isNotAllowedToPublish, isScreenOnlyPublishParams, hasSubscribedRolePublishing } = useWaitingRoomInfo();
      (0, import_react211.useEffect)(() => {
        if (!isConnected) {
          return;
        }
        hmsActions.sessionStore.observe([
          "pinnedMessages" /* PINNED_MESSAGES */,
          "spotlight" /* SPOTLIGHT */,
          "chatState" /* CHAT_STATE */,
          "chatMessageBlacklist" /* CHAT_MESSAGE_BLACKLIST */,
          "chatPeerBlacklist" /* CHAT_PEER_BLACKLIST */
        ]);
      }, [isConnected, hmsActions]);
      if (!localPeerRoleName) {
        return null;
      }
      return /* @__PURE__ */ import_react211.default.createElement(import_react211.Suspense, { fallback: /* @__PURE__ */ import_react211.default.createElement(FullPageProgress_default, null) }, /* @__PURE__ */ import_react211.default.createElement(
        Flex,
        {
          css: {
            size: "100%",
            position: "relative",
            gap: isMobileHLSStream || isLandscapeHLSStream ? "0" : "$4"
          },
          direction: (0, import_ts_pattern14.match)({ isLandscapeHLSStream, isMobileHLSStream }).with({ isLandscapeHLSStream: true }, () => "row").with({ isMobileHLSStream: true }, () => "column").otherwise(() => "row")
        },
        (0, import_ts_pattern14.match)({
          screenType,
          isNotAllowedToPublish,
          isScreenOnlyPublishParams,
          hasSubscribedRolePublishing,
          isSharingScreen,
          pdfAnnotatorActive,
          urlToIframe
        }).with(
          {
            screenType: "hls_live_streaming"
          },
          () => /* @__PURE__ */ import_react211.default.createElement(HLSView2, null)
        ).when(
          ({ isNotAllowedToPublish: isNotAllowedToPublish2, hasSubscribedRolePublishing: hasSubscribedRolePublishing2 }) => isNotAllowedToPublish2 && !hasSubscribedRolePublishing2,
          () => /* @__PURE__ */ import_react211.default.createElement(
            WaitingView,
            {
              title: "Waiting for Host to join",
              subtitle: "Sit back and relax",
              icon: /* @__PURE__ */ import_react211.default.createElement(import_react_icons98.PeopleAddIcon, { width: "56px", height: "56px", style: { color: "white" } })
            }
          )
        ).when(
          ({ isScreenOnlyPublishParams: isScreenOnlyPublishParams2, isSharingScreen: isSharingScreen2, hasSubscribedRolePublishing: hasSubscribedRolePublishing2 }) => isScreenOnlyPublishParams2 && !isSharingScreen2 && !hasSubscribedRolePublishing2,
          () => /* @__PURE__ */ import_react211.default.createElement(
            WaitingView,
            {
              title: "Ready to present",
              subtitle: "Select the Screenshare button to start presenting",
              icon: /* @__PURE__ */ import_react211.default.createElement(import_react_icons98.ShareScreenIcon, { width: "56px", height: "56px", style: { color: "white" } })
            }
          )
        ).when(
          ({ pdfAnnotatorActive: pdfAnnotatorActive2 }) => !!pdfAnnotatorActive2,
          () => /* @__PURE__ */ import_react211.default.createElement(PDFView, null)
        ).when(
          ({ urlToIframe: urlToIframe2 }) => !!urlToIframe2,
          () => /* @__PURE__ */ import_react211.default.createElement(EmbedView, null)
        ).otherwise(() => {
          return /* @__PURE__ */ import_react211.default.createElement(GridLayout, { ...elements?.video_tile_layout?.grid });
        }),
        /* @__PURE__ */ import_react211.default.createElement(CaptionsViewer, { setDefaultPosition: setCaptionPosition, defaultPosition: captionPosition }),
        /* @__PURE__ */ import_react211.default.createElement(
          Box,
          {
            css: {
              flex: (0, import_ts_pattern14.match)({ isLandscapeHLSStream, isMobileHLSStream }).with({ isLandscapeHLSStream: true }, () => "1  1 0").with({ isMobileHLSStream: true }, () => "2 1 0").otherwise(() => void 0),
              position: "relative",
              height: !isMobileHLSStream ? "100%" : void 0,
              maxHeight: "100%",
              "&:empty": { display: "none" },
              overflowY: "clip"
            }
          },
          /* @__PURE__ */ import_react211.default.createElement(
            SidePane_default,
            {
              screenType,
              tileProps: elements?.video_tile_layout?.grid,
              hideControls
            }
          )
        )
      ));
    };
  }
});

// src/Prebuilt/components/Header/RoomDetailsHeader.tsx
var import_react212, import_react_use51, import_react_icons99, RoomDetailsHeader;
var init_RoomDetailsHeader = __esm({
  "src/Prebuilt/components/Header/RoomDetailsHeader.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react212 = __toESM(require("react"));
    import_react_use51 = require("react-use");
    import_react_icons99 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_Theme();
    init_useRoomLayoutScreen();
    init_useSheet();
    init_useSidepane();
    init_constants();
    RoomDetailsHeader = () => {
      const { title, description } = useRoomLayoutHeader();
      const isMobile = (0, import_react_use51.useMedia)(config.media.md);
      const clipLength = 30;
      const toggleDetailsPane = useSidepaneToggle(SIDE_PANE_OPTIONS.ROOM_DETAILS);
      const toggleDetailsSheet = useSheetToggle(SHEET_OPTIONS.ROOM_DETAILS);
      if (!title && !description || isMobile && !title) {
        return null;
      }
      return /* @__PURE__ */ import_react212.default.createElement(Flex, { direction: isMobile ? "row" : "column", css: { ml: "$8", alignItems: isMobile ? "center" : "start" } }, /* @__PURE__ */ import_react212.default.createElement(Text, { variant: "sm", css: { c: "$on_surface_high", fontWeight: "$semiBold" } }, title), !isMobile && /* @__PURE__ */ import_react212.default.createElement(Flex, { align: "end", css: { color: "$on_surface_high" } }, /* @__PURE__ */ import_react212.default.createElement(Text, { variant: "xs", css: { c: "$on_surface_medium" } }, description.slice(0, clipLength)), description.length > clipLength ? /* @__PURE__ */ import_react212.default.createElement(
        "span",
        {
          style: { fontWeight: "600", fontSize: "12px", cursor: "pointer", lineHeight: "1rem" },
          onClick: toggleDetailsPane
        },
        "\xA0...more"
      ) : null), isMobile && description ? /* @__PURE__ */ import_react212.default.createElement(Flex, { css: { color: "$on_surface_medium" } }, /* @__PURE__ */ import_react212.default.createElement(import_react_icons99.ChevronRightIcon, { height: 16, width: 16, onClick: toggleDetailsSheet })) : null);
    };
  }
});

// src/Prebuilt/components/Header/common.jsx
var import_react213, import_react_sdk108, import_react_icons100, CamaraFlipActions, AudioActions, AudioSelectionSheet, SelectWithLabel;
var init_common2 = __esm({
  "src/Prebuilt/components/Header/common.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react213 = __toESM(require("react"));
    import_react_sdk108 = require("@100mslive/react-sdk");
    import_react_icons100 = require("@100mslive/react-icons");
    init_Divider2();
    init_Label2();
    init_Layout();
    init_Sheet2();
    init_Text2();
    init_IconButton3();
    init_ToastManager();
    CamaraFlipActions = () => {
      const actions = (0, import_react_sdk108.useHMSActions)();
      const { allDevices } = (0, import_react_sdk108.useDevices)();
      const { videoInput } = allDevices;
      const isVideoOn = (0, import_react_sdk108.useHMSStore)(import_react_sdk108.selectIsLocalVideoEnabled);
      const videoTrackId = (0, import_react_sdk108.useHMSStore)(import_react_sdk108.selectLocalVideoTrackID);
      const localVideoTrack = (0, import_react_sdk108.useHMSStore)((0, import_react_sdk108.selectVideoTrackByID)(videoTrackId));
      if (!videoInput || !videoInput?.length || !localVideoTrack?.facingMode) {
        return null;
      }
      return /* @__PURE__ */ import_react213.default.createElement(Box, null, /* @__PURE__ */ import_react213.default.createElement(
        IconButton_default,
        {
          disabled: !isVideoOn,
          onClick: async () => {
            try {
              await actions.switchCamera();
            } catch (e) {
              ToastManager.addToast({
                title: `Error while flipping camera ${e.message || ""}`,
                variant: "error"
              });
            }
          }
        },
        /* @__PURE__ */ import_react213.default.createElement(import_react_icons100.CameraFlipIcon, null)
      ));
    };
    AudioActions = () => {
      const { allDevices, selectedDeviceIDs, updateDevice } = (0, import_react_sdk108.useDevices)();
      const shouldShowAudioOutput = "setSinkId" in HTMLMediaElement.prototype;
      const { audioInput, audioOutput } = allDevices;
      let availableAudioDevices = audioInput;
      let selectedAudio = selectedDeviceIDs.audioInput;
      if (shouldShowAudioOutput) {
        availableAudioDevices = audioOutput;
        selectedAudio = selectedDeviceIDs.audioOutput;
      }
      const hmsActions = (0, import_react_sdk108.useHMSActions)();
      const audioFiltered = availableAudioDevices?.find((item) => !!item.label);
      const currentSelection = availableAudioDevices?.find((item) => item.deviceId === selectedAudio);
      if (!audioFiltered) {
        return null;
      }
      let AudioIcon = /* @__PURE__ */ import_react213.default.createElement(import_react_icons100.SpeakerIcon, null);
      if (currentSelection && currentSelection.label.toLowerCase().includes("bluetooth")) {
        AudioIcon = /* @__PURE__ */ import_react213.default.createElement(import_react_icons100.BluetoothIcon, null);
      } else if (currentSelection && currentSelection.label.toLowerCase().includes("wired")) {
        AudioIcon = /* @__PURE__ */ import_react213.default.createElement(import_react_icons100.HeadphonesIcon, null);
      } else if (currentSelection && currentSelection.label.toLowerCase().includes("earpiece")) {
        AudioIcon = /* @__PURE__ */ import_react213.default.createElement(import_react_icons100.TelePhoneIcon, null);
      }
      return /* @__PURE__ */ import_react213.default.createElement(
        AudioSelectionSheet,
        {
          audioDevices: availableAudioDevices,
          audioSelected: selectedAudio,
          onChange: async (deviceId) => {
            try {
              await updateDevice({
                deviceId,
                deviceType: shouldShowAudioOutput ? import_react_sdk108.DeviceType.audioOutput : import_react_sdk108.DeviceType.audioInput
              });
            } catch (e) {
              ToastManager.addToast({
                title: `Error while changing audio device ${e.message || ""}`,
                variant: "error"
              });
            }
          }
        },
        /* @__PURE__ */ import_react213.default.createElement(
          Box,
          {
            onClick: async () => {
              await hmsActions.refreshDevices();
            }
          },
          /* @__PURE__ */ import_react213.default.createElement(IconButton_default, null, AudioIcon, " ")
        )
      );
    };
    AudioSelectionSheet = ({ audioDevices, audioSelected, onChange, children }) => {
      return /* @__PURE__ */ import_react213.default.createElement(Sheet.Root, null, /* @__PURE__ */ import_react213.default.createElement(Sheet.Trigger, { asChild: true }, children), /* @__PURE__ */ import_react213.default.createElement(Sheet.Content, null, /* @__PURE__ */ import_react213.default.createElement(Sheet.Title, { css: { py: "$10", px: "$8", alignItems: "center" } }, /* @__PURE__ */ import_react213.default.createElement(Flex, { direction: "row", justify: "between", css: { w: "100%" } }, /* @__PURE__ */ import_react213.default.createElement(Text, { variant: "h6", css: { display: "flex" } }, "Audio"), /* @__PURE__ */ import_react213.default.createElement(Sheet.Close, null, /* @__PURE__ */ import_react213.default.createElement(IconButton_default, { as: "div", "data-testid": "dialog_cross_icon" }, /* @__PURE__ */ import_react213.default.createElement(import_react_icons100.CrossIcon, null))))), /* @__PURE__ */ import_react213.default.createElement(HorizontalDivider, null), /* @__PURE__ */ import_react213.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            px: "$8",
            maxHeight: "80vh",
            overflowY: "auto"
          }
        },
        audioDevices.map((audioDevice) => {
          return /* @__PURE__ */ import_react213.default.createElement(
            SelectWithLabel,
            {
              key: audioDevice.deviceId,
              label: audioDevice.label,
              id: audioDevice.deviceId,
              checked: audioDevice.deviceId === audioSelected,
              onChange: () => onChange(audioDevice.deviceId)
            }
          );
        })
      )));
    };
    SelectWithLabel = ({ label, icon = /* @__PURE__ */ import_react213.default.createElement(import_react213.default.Fragment, null), checked, id, onChange }) => {
      return /* @__PURE__ */ import_react213.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            my: "$2",
            py: "$8",
            w: "100%",
            borderBottom: "1px solid $border_default"
          },
          onClick: onChange
        },
        /* @__PURE__ */ import_react213.default.createElement(
          Label3,
          {
            htmlFor: id,
            css: {
              fontSize: "$md",
              fontWeight: "$semiBold",
              color: "$on_surface_high",
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              gap: "$8",
              flex: "1 1 0"
            }
          },
          icon,
          label
        ),
        checked && /* @__PURE__ */ import_react213.default.createElement(import_react_icons100.CheckIcon, { width: 24, height: 24 })
      );
    };
  }
});

// src/Prebuilt/components/Header/Header.tsx
var import_react214, import_react_use52, import_react_sdk109, Header2;
var init_Header = __esm({
  "src/Prebuilt/components/Header/Header.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react214 = __toESM(require("react"));
    import_react_use52 = require("react-use");
    import_react_sdk109 = require("@100mslive/react-sdk");
    init_src();
    init_HeaderComponents();
    init_RoomDetailsHeader();
    init_StreamActions();
    init_common2();
    Header2 = () => {
      const roomState = (0, import_react_sdk109.useHMSStore)(import_react_sdk109.selectRoomState);
      const isMobile = (0, import_react_use52.useMedia)(config.media.md);
      if (roomState !== import_react_sdk109.HMSRoomState.Connected) {
        return /* @__PURE__ */ import_react214.default.createElement(import_react214.default.Fragment, null);
      }
      return /* @__PURE__ */ import_react214.default.createElement(Flex, { justify: "between", align: "center", css: { position: "relative", height: "100%" } }, /* @__PURE__ */ import_react214.default.createElement(Flex, { align: "center", gap: "2", css: { position: "absolute", left: "$10" } }, /* @__PURE__ */ import_react214.default.createElement(Logo, null), /* @__PURE__ */ import_react214.default.createElement(RoomDetailsHeader, null), /* @__PURE__ */ import_react214.default.createElement(SpeakerTag, null), isMobile && /* @__PURE__ */ import_react214.default.createElement(Flex, { align: "center", css: { gap: "$4" } }, /* @__PURE__ */ import_react214.default.createElement(LiveStatus, null), /* @__PURE__ */ import_react214.default.createElement(RecordingStatus, null), /* @__PURE__ */ import_react214.default.createElement(RecordingPauseStatus, null))), /* @__PURE__ */ import_react214.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            position: "absolute",
            right: "$10",
            gap: "$4"
          }
        },
        /* @__PURE__ */ import_react214.default.createElement(StreamActions, null),
        isMobile ? /* @__PURE__ */ import_react214.default.createElement(import_react214.default.Fragment, null, /* @__PURE__ */ import_react214.default.createElement(CamaraFlipActions, null), /* @__PURE__ */ import_react214.default.createElement(AudioActions, null)) : null
      ));
    };
  }
});

// src/Prebuilt/components/Header/index.tsx
var init_Header2 = __esm({
  "src/Prebuilt/components/Header/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Header();
  }
});

// src/Prebuilt/components/PreviousRoleInMetadata.tsx
var import_react215, import_react_sdk110, PreviousRoleInMetadata;
var init_PreviousRoleInMetadata = __esm({
  "src/Prebuilt/components/PreviousRoleInMetadata.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react215 = require("react");
    import_react_sdk110 = require("@100mslive/react-sdk");
    init_useMetadata();
    PreviousRoleInMetadata = () => {
      const vanillaStore = (0, import_react_sdk110.useHMSVanillaStore)();
      const { updateMetaData } = useMyMetadata();
      (0, import_react215.useEffect)(() => {
        let previousRole = vanillaStore.getState(import_react_sdk110.selectLocalPeerRoleName);
        const unsubscribe = vanillaStore.subscribe((currentRole) => {
          if (previousRole !== currentRole && currentRole) {
            updateMetaData({ prevRole: previousRole });
            previousRole = currentRole;
          }
        }, import_react_sdk110.selectLocalPeerRoleName);
        return unsubscribe;
      }, [vanillaStore]);
      return null;
    };
  }
});

// src/Prebuilt/components/ConferenceScreen.tsx
var import_react216, import_uuid4, import_react_sdk111, ConferenceScreen;
var init_ConferenceScreen = __esm({
  "src/Prebuilt/components/ConferenceScreen.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react216 = __toESM(require("react"));
    import_uuid4 = require("uuid");
    import_react_sdk111 = require("@100mslive/react-sdk");
    init_Footer3();
    init_MoreSettings();
    init_HLSFailureModal();
    init_PIPComponent();
    init_PIPManager();
    init_RoleChangeRequestModal();
    init_Layout();
    init_AppContext();
    init_VideoStreamingSection();
    init_EmojiReaction();
    init_FullPageProgress();
    init_Header2();
    init_PreviousRoleInMetadata();
    init_RaiseHand();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_hooks();
    init_constants();
    ConferenceScreen = () => {
      const { userName, endpoints, onJoin: onJoinFunc } = useHMSPrebuiltContext();
      const screenProps = useRoomLayoutConferencingScreen();
      const { isPreviewScreenEnabled } = useRoomLayoutPreviewScreen();
      const roomState = (0, import_react_sdk111.useHMSStore)(import_react_sdk111.selectRoomState);
      const isConnectedToRoom = (0, import_react_sdk111.useHMSStore)(import_react_sdk111.selectIsConnectedToRoom);
      const hmsActions = (0, import_react_sdk111.useHMSActions)();
      const [hideControls, setHideControls] = (0, import_react216.useState)(false);
      const dropdownList = (0, import_react_sdk111.useHMSStore)((0, import_react_sdk111.selectAppData)(APP_DATA.dropdownList));
      const authTokenInAppData = useAuthToken();
      const headerRef = (0, import_react216.useRef)(null);
      const footerRef = (0, import_react216.useRef)(null);
      const isMobileDevice = isAndroid || isIOS || isIPadOS;
      const dropdownListRef = (0, import_react216.useRef)();
      const [isHLSStarted] = useSetAppDataByKey(APP_DATA.hlsStarted);
      const { requestPermission } = (0, import_react_sdk111.useAwayNotifications)();
      const showChat = !!screenProps.elements?.chat;
      const autoRoomJoined = (0, import_react216.useRef)(isPreviewScreenEnabled);
      const isMobileHLSStream = useMobileHLSStream();
      const isLandscapeHLSStream = useLandscapeHLSStream();
      const isMwebHLSStream = isMobileHLSStream || isLandscapeHLSStream;
      const toggleControls = () => {
        if (dropdownListRef.current?.length === 0 && isMobileDevice && !isMwebHLSStream) {
          setHideControls((value) => !value);
        }
      };
      (0, import_react216.useEffect)(() => {
        let timeout;
        dropdownListRef.current = dropdownList || [];
        if (dropdownListRef.current && dropdownListRef.current.length === 0) {
          clearTimeout(timeout);
          timeout = setTimeout(() => {
            if (dropdownListRef.current && dropdownListRef.current.length === 0) {
              setHideControls(isMobileDevice);
            }
          }, 5e3);
        }
        return () => {
          clearTimeout(timeout);
        };
      }, [dropdownList, hideControls, isMobileDevice]);
      (0, import_react216.useEffect)(() => {
        if (authTokenInAppData && !isConnectedToRoom && !isPreviewScreenEnabled && roomState !== import_react_sdk111.HMSRoomState.Connecting && !autoRoomJoined.current) {
          hmsActions.join({
            userName: userName || (0, import_uuid4.v4)(),
            authToken: authTokenInAppData,
            initEndpoint: endpoints?.init,
            settings: {
              isAudioMuted: !isPreviewScreenEnabled,
              isVideoMuted: !isPreviewScreenEnabled,
              speakerAutoSelectionBlacklist: ["Yeti Stereo Microphone"]
            }
          }).then(() => requestPermission()).catch(console.error);
          autoRoomJoined.current = true;
        }
      }, [
        authTokenInAppData,
        endpoints?.init,
        hmsActions,
        isConnectedToRoom,
        isPreviewScreenEnabled,
        roomState,
        userName,
        requestPermission
      ]);
      (0, import_react216.useEffect)(() => {
        onJoinFunc?.();
        return () => {
          PictureInPicture.stop().catch((error) => console.error("stopping pip", error.message));
        };
      }, [onJoinFunc]);
      if (!isConnectedToRoom && ![import_react_sdk111.HMSRoomState.Reconnecting, import_react_sdk111.HMSRoomState.Disconnected].includes(roomState)) {
        return /* @__PURE__ */ import_react216.default.createElement(FullPageProgress_default, { text: roomState === import_react_sdk111.HMSRoomState.Connecting ? "Joining..." : "" });
      }
      const hideControlsForStreaming = isMwebHLSStream ? true : hideControls;
      return /* @__PURE__ */ import_react216.default.createElement(import_react216.default.Fragment, null, isHLSStarted ? /* @__PURE__ */ import_react216.default.createElement(Box, { css: { position: "fixed", zIndex: 100, w: "100%", h: "100%", left: 0, top: 0 } }, /* @__PURE__ */ import_react216.default.createElement(FullPageProgress_default, { text: "Starting live stream...", css: { opacity: 0.8, bg: "$background_dim" } })) : null, /* @__PURE__ */ import_react216.default.createElement(Flex, { css: { size: "100%", overflow: "hidden" }, direction: "column" }, !(screenProps.hideSections.includes("header") || isMwebHLSStream) && /* @__PURE__ */ import_react216.default.createElement(
        Box,
        {
          ref: headerRef,
          css: {
            h: "$18",
            transition: "margin 0.3s ease-in-out",
            marginTop: hideControlsForStreaming ? `-${headerRef.current?.clientHeight}px` : "none",
            "@md": {
              h: "$17"
            }
          },
          "data-testid": "header"
        },
        /* @__PURE__ */ import_react216.default.createElement(Header2, null)
      ), /* @__PURE__ */ import_react216.default.createElement(
        Box,
        {
          css: {
            w: "100%",
            flex: "1 1 0",
            minHeight: 0,
            // @ts-ignore
            px: screenProps?.elements?.video_tile_layout?.grid?.edge_to_edge ? 0 : "$10",
            // TODO: padding to be controlled by section/element
            paddingBottom: "env(safe-area-inset-bottom)",
            "@lg": {
              px: 0
            }
          },
          id: "conferencing",
          "data-testid": "conferencing",
          onClick: toggleControls
        },
        screenProps.elements ? /* @__PURE__ */ import_react216.default.createElement(
          VideoStreamingSection,
          {
            screenType: screenProps.screenType,
            elements: screenProps.elements,
            hideControls: hideControlsForStreaming
          }
        ) : null
      ), !screenProps.hideSections.includes("footer") && screenProps.elements && !isMwebHLSStream && /* @__PURE__ */ import_react216.default.createElement(
        Box,
        {
          ref: footerRef,
          css: {
            flexShrink: 0,
            maxHeight: "$24",
            transition: "margin 0.3s ease-in-out",
            bg: "$background_dim",
            marginBottom: hideControlsForStreaming ? `-${footerRef.current?.clientHeight}px` : void 0,
            "@md": {
              maxHeight: "unset",
              bg: screenProps.screenType === "hls_live_streaming" ? "transparent" : "$background_dim"
            }
          },
          "data-testid": "footer"
        },
        /* @__PURE__ */ import_react216.default.createElement(Footer2, { elements: screenProps.elements, screenType: screenProps.screenType })
      ), isMwebHLSStream && !showChat && /* @__PURE__ */ import_react216.default.createElement(
        Flex,
        {
          css: {
            alignItems: "center",
            pr: "$4",
            pb: "$4",
            position: "relative"
          },
          justify: "end",
          gap: "2"
        },
        /* @__PURE__ */ import_react216.default.createElement(RaiseHand, null),
        /* @__PURE__ */ import_react216.default.createElement(MoreSettings, { elements: screenProps.elements, screenType: screenProps.screenType }),
        /* @__PURE__ */ import_react216.default.createElement(
          Box,
          {
            css: {
              position: "absolute",
              bottom: "100%",
              mb: "$4"
            }
          },
          /* @__PURE__ */ import_react216.default.createElement(EmojiReaction, null)
        )
      ), /* @__PURE__ */ import_react216.default.createElement(RoleChangeRequestModal, null), /* @__PURE__ */ import_react216.default.createElement(HLSFailureModal, null), /* @__PURE__ */ import_react216.default.createElement(ActivatedPIP, null), /* @__PURE__ */ import_react216.default.createElement(PreviousRoleInMetadata, null)));
    };
  }
});

// src/Prebuilt/components/ErrorBoundary.jsx
var import_react217, import_react_icons101, ErrorBoundary;
var init_ErrorBoundary = __esm({
  "src/Prebuilt/components/ErrorBoundary.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react217 = __toESM(require("react"));
    import_react_icons101 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Text2();
    init_Tooltip2();
    ErrorBoundary = class extends import_react217.Component {
      constructor(props) {
        super(props);
        this.state = { error: null, errorInfo: null, isErrorCopied: false };
      }
      componentDidCatch(error, errorInfo) {
        console.error(`react error boundary - ${error.message}`, error, errorInfo);
        this.setState({
          error: error?.message,
          errorInfo
        });
      }
      render() {
        if (this.state.errorInfo) {
          return /* @__PURE__ */ import_react217.default.createElement(
            Flex,
            {
              align: "center",
              justify: "center",
              css: {
                size: "100%",
                height: "100vh",
                width: "100%",
                color: "$on_primary_high",
                backgroundColor: "$background_default"
              }
            },
            /* @__PURE__ */ import_react217.default.createElement(Box, { css: { position: "relative", overflow: "hidden", r: "$3", height: "100%", width: "100%" } }, /* @__PURE__ */ import_react217.default.createElement(
              Flex,
              {
                direction: "column",
                css: {
                  position: "absolute",
                  size: "100%",
                  top: "33.33%",
                  left: 0
                }
              },
              /* @__PURE__ */ import_react217.default.createElement("div", { style: { margin: "1.5rem", width: "100%" } }, /* @__PURE__ */ import_react217.default.createElement(Text, null, "Something went wrong"), /* @__PURE__ */ import_react217.default.createElement(Text, null, "Message: $", this.state.error), /* @__PURE__ */ import_react217.default.createElement("br", null), "Please reload to see if it works. If you think this is a mistake on our side, please reach out to us on", /* @__PURE__ */ import_react217.default.createElement("a", { href: "https://discord.com/invite/kGdmszyzq2", target: "_blank", rel: "noreferrer" }, "Discord")),
              /* @__PURE__ */ import_react217.default.createElement(Flex, null, /* @__PURE__ */ import_react217.default.createElement(Tooltip, { title: "Reload page" }, /* @__PURE__ */ import_react217.default.createElement(
                Button,
                {
                  onClick: () => {
                    window.location.reload();
                  },
                  css: { mx: "$8" },
                  "data-testid": "join_again_btn"
                },
                "Reload"
              )), /* @__PURE__ */ import_react217.default.createElement(Tooltip, { title: "Copy error details to clipboard" }, /* @__PURE__ */ import_react217.default.createElement(
                Button,
                {
                  onClick: () => {
                    const { error, errorInfo } = this.state;
                    navigator.clipboard.writeText(
                      JSON.stringify({
                        error,
                        errorInfo
                      })
                    );
                    this.setState({ isErrorCopied: true });
                  },
                  css: { mx: "$8" },
                  "data-testid": "join_again_btn"
                },
                /* @__PURE__ */ import_react217.default.createElement(import_react_icons101.CopyIcon, null),
                " ",
                this.state.isErrorCopied ? "Copied" : "Copy Details"
              ))),
              /* @__PURE__ */ import_react217.default.createElement("details", { style: { whiteSpace: "pre-wrap", margin: "1.5rem" } }, /* @__PURE__ */ import_react217.default.createElement(Text, null, this.state.error && this.state.error.toString()), /* @__PURE__ */ import_react217.default.createElement("br", null), /* @__PURE__ */ import_react217.default.createElement(Text, null, JSON.stringify(this.state.errorInfo)))
            ))
          );
        }
        return this.props.children;
      }
    };
  }
});

// src/Prebuilt/services/FeatureFlags.jsx
function FeatureFlagsInit() {
  const roomId = (0, import_react_sdk112.useHMSStore)(import_react_sdk112.selectRoomID);
  (0, import_react218.useEffect)(() => {
    if (roomId) {
      FeatureFlags.init(roomId);
    }
  }, [roomId]);
  return null;
}
var import_react218, import_react_sdk112, FeatureFlags;
var init_FeatureFlags = __esm({
  "src/Prebuilt/services/FeatureFlags.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react218 = require("react");
    import_react_sdk112 = require("@100mslive/react-sdk");
    FeatureFlags = class {
      static enableTranscription = process.env.REACT_APP_ENABLE_TRANSCRIPTION === "true";
      static enableStatsForNerds = process.env.REACT_APP_ENABLE_STATS_FOR_NERDS === "true";
      static enableWhiteboard = process.env.REACT_APP_ENABLE_WHITEBOARD && process.env.REACT_APP_PUSHER_APP_KEY && process.env.REACT_APP_PUSHER_AUTHENDPOINT;
      static init(roomId) {
        if (!window.HMS) {
          window.HMS = {};
        }
        window.HMS.OPTIMISE_HLS_LATENCY = false;
        window.HMS.ALWAYS_REQUEST_PERMISSIONS = false;
        window.HMS.SHOW_NS = process.env.REACT_APP_ENV !== "prod";
        this.enableTranscription = process.env.REACT_APP_TRANSCRIPTION_ROOM_ID === roomId;
      }
      static showNS() {
        return window.HMS.SHOW_NS;
      }
      static optimiseHLSLatency() {
        return window.HMS.OPTIMISE_HLS_LATENCY;
      }
      static alwaysRequestPermissions() {
        return window.HMS.ALWAYS_REQUEST_PERMISSIONS;
      }
    };
  }
});

// src/Prebuilt/components/init/Init.jsx
var import_react219, Init;
var init_Init = __esm({
  "src/Prebuilt/components/init/Init.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react219 = __toESM(require("react"));
    init_src();
    init_FeatureFlags();
    Init = () => {
      const { toggleTheme } = useTheme();
      (0, import_react219.useEffect)(() => {
        window.toggleUiTheme = toggleTheme;
      }, [toggleTheme]);
      (0, import_react219.useEffect)(() => {
        function resetHeight() {
          document.body.style.height = `${window.visualViewport?.height || window.innerHeight}px`;
        }
        window.addEventListener("resize", resetHeight);
        resetHeight();
        return () => {
          window.removeEventListener("resize", resetHeight);
        };
      }, []);
      return /* @__PURE__ */ import_react219.default.createElement(FeatureFlagsInit, null);
    };
  }
});

// src/Prebuilt/components/Input/KeyboardInputManager.js
var import_react220, import_react_sdk113, isEvenListenersAttached, KeyboardInputManager, KeyboardHandler;
var init_KeyboardInputManager = __esm({
  "src/Prebuilt/components/Input/KeyboardInputManager.js"() {
    "use strict";
    init_cjs_shims();
    import_react220 = require("react");
    import_react_sdk113 = require("@100mslive/react-sdk");
    init_constants();
    isEvenListenersAttached = false;
    KeyboardInputManager = class {
      #actions;
      #store;
      constructor(store, actions) {
        this.#actions = actions;
        this.#store = store;
      }
      #toggleAudio = async () => {
        const enabled = this.#store.getState(import_react_sdk113.selectIsLocalAudioEnabled);
        await this.#actions.setLocalAudioEnabled(!enabled);
      };
      #toggleVideo = async () => {
        const enabled = this.#store.getState(import_react_sdk113.selectIsLocalVideoEnabled);
        await this.#actions.setLocalVideoEnabled(!enabled);
      };
      #hideSidepane = () => {
        if (this.#store.getState((0, import_react_sdk113.selectAppData)(APP_DATA.sidePane))) {
          this.#actions.setAppData(APP_DATA.sidePane, "");
        }
      };
      #toggleStatsForNerds = () => {
        const uiSettings = this.#store.getState((0, import_react_sdk113.selectAppData)(APP_DATA.uiSettings));
        const statsEnabled = uiSettings.showStatsOnTiles;
        this.#actions.setAppData(APP_DATA.uiSettings, {
          ...uiSettings,
          showStatsOnTiles: !statsEnabled
        });
      };
      #toggleHlsStats = () => {
        this.#actions.setAppData(APP_DATA.hlsStats, !this.#store.getState((0, import_react_sdk113.selectAppData)(APP_DATA.hlsStats)));
      };
      // eslint-disable-next-line complexity
      #keyDownHandler = async (e) => {
        const CONTROL_KEY = isMacOS ? e.metaKey : e.ctrlKey;
        const D_KEY = e.key === "d" || e.key === "D";
        const E_KEY = e.key === "e" || e.key === "E";
        const SNF_KEY = e.key === "]" || e.key === "}";
        const SHORTCUT_TOGGLE_AUDIO = CONTROL_KEY && D_KEY;
        const SHORTCUT_TOGGLE_VIDEO = CONTROL_KEY && E_KEY;
        const SHORTCUT_SIDEPANE_CLOSE = e.key === "Escape";
        const SHORTCUT_STATS_FOR_NERDS = CONTROL_KEY && SNF_KEY;
        if (SHORTCUT_TOGGLE_AUDIO) {
          e.preventDefault();
          await this.#toggleAudio();
        } else if (SHORTCUT_TOGGLE_VIDEO) {
          e.preventDefault();
          await this.#toggleVideo();
        } else if (SHORTCUT_SIDEPANE_CLOSE) {
          this.#hideSidepane();
        } else if (SHORTCUT_STATS_FOR_NERDS) {
          this.#toggleHlsStats();
          this.#toggleStatsForNerds();
        }
      };
      #bind = () => {
        document.addEventListener("keydown", this.#keyDownHandler, false);
      };
      #unbind = () => {
        document.removeEventListener("keydown", this.#keyDownHandler, false);
      };
      bindAllShortcuts = () => {
        if (!isEvenListenersAttached) {
          this.#bind();
          isEvenListenersAttached = true;
        }
      };
      unbindAllShortcuts = () => {
        if (isEvenListenersAttached) {
          this.#unbind();
          isEvenListenersAttached = false;
        }
      };
    };
    KeyboardHandler = () => {
      const store = (0, import_react_sdk113.useHMSVanillaStore)();
      const actions = (0, import_react_sdk113.useHMSActions)();
      (0, import_react220.useEffect)(() => {
        const keyboardManager = new KeyboardInputManager(store, actions);
        keyboardManager.bindAllShortcuts();
        return keyboardManager.unbindAllShortcuts;
      }, [actions, store]);
      return null;
    };
  }
});

// src/Prebuilt/components/EndCallFeedback/FeedbackForm.tsx
var import_react221, import_react_use53, import_react_sdk114, import_react_icons102, FEEBACK_INDEX, FeedbackModal, FeedbackContent, FeedbackHeader, FeedbackForm;
var init_FeedbackForm = __esm({
  "src/Prebuilt/components/EndCallFeedback/FeedbackForm.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react221 = __toESM(require("react"));
    import_react_use53 = require("react-use");
    import_react_sdk114 = require("@100mslive/react-sdk");
    import_react_icons102 = require("@100mslive/react-icons");
    init_Button2();
    init_Checkbox2();
    init_Label2();
    init_Layout();
    init_Modal();
    init_Sheet2();
    init_Text2();
    init_TextArea2();
    init_Theme();
    init_AppContext();
    init_useRoomLayoutScreen();
    FEEBACK_INDEX = {
      THANK_YOU: -10,
      INIT: -1
    };
    FeedbackModal = ({
      ratings,
      index,
      setIndex
    }) => {
      const isMobile = (0, import_react_use53.useMedia)(config.media.md);
      const onOpenChange = () => {
        setIndex(FEEBACK_INDEX.INIT);
      };
      const avoidDefaultDomBehavior = (e) => {
        e.preventDefault();
      };
      if (isMobile) {
        return /* @__PURE__ */ import_react221.default.createElement(Sheet.Root, { open: index !== FEEBACK_INDEX.INIT, onOpenChange }, /* @__PURE__ */ import_react221.default.createElement(
          Sheet.Content,
          {
            css: { bg: "$surface_dim", p: "$10", overflowY: "auto" },
            onPointerDownOutside: avoidDefaultDomBehavior,
            onInteractOutside: avoidDefaultDomBehavior
          },
          /* @__PURE__ */ import_react221.default.createElement(FeedbackContent, { ratings, indexSelected: index, setIndex })
        ));
      }
      return /* @__PURE__ */ import_react221.default.createElement(Dialog.Root, { open: index !== FEEBACK_INDEX.INIT, onOpenChange }, /* @__PURE__ */ import_react221.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react221.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react221.default.createElement(
        Dialog.Content,
        {
          css: { bg: "$surface_dim", width: "528px", p: "$12" },
          onPointerDownOutside: avoidDefaultDomBehavior,
          onInteractOutside: avoidDefaultDomBehavior
        },
        /* @__PURE__ */ import_react221.default.createElement(FeedbackContent, { ratings, indexSelected: index, setIndex })
      )));
    };
    FeedbackContent = ({
      ratings,
      indexSelected,
      setIndex
    }) => {
      const { feedback } = useRoomLayoutLeaveScreen();
      const { endpoints } = useHMSPrebuiltContext();
      const isMobile = (0, import_react_use53.useMedia)(config.media.md);
      const hmsActions = (0, import_react_sdk114.useHMSActions)();
      const [comment, setComment] = (0, import_react221.useState)("");
      const [selectedReasons, setSelectedReasons] = (0, import_react221.useState)(/* @__PURE__ */ new Set());
      const handleCheckedChange = (checked, index) => {
        const newSelected = new Set(selectedReasons);
        if (checked) {
          newSelected.add(index);
        } else {
          newSelected.delete(index);
        }
        setSelectedReasons(newSelected);
      };
      const submitFeedback = async () => {
        if (indexSelected < 0 || ratings.length <= indexSelected) {
          return;
        }
        try {
          const reasons = [...selectedReasons].map((value) => ratings[indexSelected]?.reasons?.[value] || "");
          await hmsActions.submitSessionFeedback(
            {
              question: `${feedback?.title} | ${ratings[indexSelected].question || ""}`,
              rating: ratings[indexSelected].value || 1,
              min_rating: 1,
              max_rating: ratings.length,
              reasons: selectedReasons.size === 0 ? [] : reasons,
              comment
            },
            endpoints?.event
          );
        } catch (e) {
          console.error(e);
        }
        setIndex(FEEBACK_INDEX.THANK_YOU);
      };
      return /* @__PURE__ */ import_react221.default.createElement(
        Flex,
        {
          css: {
            p: indexSelected === FEEBACK_INDEX.INIT ? "$12 !important" : "0",
            bg: "$surface_dim",
            r: "$3",
            gap: "$10"
          },
          direction: "column"
        },
        /* @__PURE__ */ import_react221.default.createElement(
          FeedbackHeader,
          {
            ratings,
            indexSelected,
            onEmojiClicked: (value) => {
              setSelectedReasons(/* @__PURE__ */ new Set());
              setIndex(value);
            }
          }
        ),
        /* @__PURE__ */ import_react221.default.createElement(
          FeedbackForm,
          {
            rating: ratings[indexSelected],
            comment,
            setComment,
            selectedReasons,
            handleCheckedChange
          }
        ),
        /* @__PURE__ */ import_react221.default.createElement(
          Button,
          {
            type: "submit",
            icon: true,
            css: {
              alignSelf: isMobile ? "" : "end"
            },
            onClick: submitFeedback
          },
          feedback?.submit_btn_label || "Submit Feedback"
        )
      );
    };
    FeedbackHeader = ({
      onEmojiClicked,
      ratings,
      indexSelected = FEEBACK_INDEX.INIT
    }) => {
      const isMobile = (0, import_react_use53.useMedia)(config.media.md);
      const { feedback } = useRoomLayoutLeaveScreen();
      return /* @__PURE__ */ import_react221.default.createElement(import_react221.default.Fragment, null, /* @__PURE__ */ import_react221.default.createElement(Flex, { align: "center" }, /* @__PURE__ */ import_react221.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            flex: "1 1 0"
          }
        },
        /* @__PURE__ */ import_react221.default.createElement(
          Text,
          {
            variant: isMobile ? "h6" : "h5",
            css: {
              c: "$on_surface_high",
              fontStyle: "normal"
            }
          },
          feedback?.title || "How was your experience?"
        ),
        /* @__PURE__ */ import_react221.default.createElement(
          Text,
          {
            variant: isMobile ? "body2" : "body1",
            css: {
              c: "$on_surface_medium",
              opacity: 0.9,
              fontWeight: "$regular"
            }
          },
          feedback?.sub_title || "Your answers help us improve the quality."
        )
      ), indexSelected !== FEEBACK_INDEX.INIT ? /* @__PURE__ */ import_react221.default.createElement(import_react_icons102.CrossIcon, { width: "24px", height: "24px", color: "white", onClick: () => onEmojiClicked(FEEBACK_INDEX.INIT) }) : null), /* @__PURE__ */ import_react221.default.createElement(
        Flex,
        {
          justify: "between",
          css: {
            gap: "$17",
            c: "$on_surface_high",
            "@md": {
              gap: "0"
            }
          }
        },
        ratings.map((element, index) => {
          return /* @__PURE__ */ import_react221.default.createElement(
            Flex,
            {
              align: "center",
              direction: "column",
              css: {
                c: indexSelected === index || indexSelected === FEEBACK_INDEX.INIT ? "$on_surface_high" : "$on_surface_default",
                gap: "$4"
              },
              onClick: () => onEmojiClicked(index),
              key: `${index}`
            },
            /* @__PURE__ */ import_react221.default.createElement(
              Text,
              {
                css: {
                  fontWeight: "$semiBold",
                  fontSize: "$h4",
                  pb: "$1",
                  cursor: "pointer",
                  opacity: indexSelected === index || indexSelected === FEEBACK_INDEX.INIT ? 1 : 0.2,
                  "@md": {
                    fontSize: "$h5"
                  }
                }
              },
              element.emoji
            ),
            /* @__PURE__ */ import_react221.default.createElement(
              Text,
              {
                variant: isMobile ? "body2" : "body1",
                css: {
                  c: indexSelected === index || indexSelected === FEEBACK_INDEX.INIT ? "$on_surface_medium" : "$on_surface_low",
                  fontWeight: "$regular"
                }
              },
              element.label
            )
          );
        })
      ));
    };
    FeedbackForm = ({
      rating,
      comment,
      setComment,
      selectedReasons,
      handleCheckedChange
    }) => {
      const { feedback } = useRoomLayoutLeaveScreen();
      return /* @__PURE__ */ import_react221.default.createElement(import_react221.default.Fragment, null, rating.reasons && rating.reasons.length > 0 && /* @__PURE__ */ import_react221.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            gap: "$4"
          }
        },
        /* @__PURE__ */ import_react221.default.createElement(
          Text,
          {
            variant: "sub2",
            css: {
              c: "$on_surface_high",
              fontWeight: "$semiBold",
              fontSize: "$sm",
              px: "$2"
            }
          },
          rating.question || "What do you like/dislike here?"
        ),
        /* @__PURE__ */ import_react221.default.createElement(
          Flex,
          {
            css: {
              alignItems: "flex-start",
              alignSelf: "stretch",
              flexWrap: "wrap",
              gap: "$6",
              flex: "1 1 calc(25% - 12px)",
              "@md": {
                flex: "1 1 calc(50% - 12px)"
              },
              "@sm": {
                flex: "1 1 100%"
              }
            }
          },
          rating.reasons.map((option, index) => {
            return /* @__PURE__ */ import_react221.default.createElement(
              Flex,
              {
                align: "center",
                gap: "2",
                key: index,
                css: {
                  border: "1px solid $border_bright",
                  r: "$1",
                  p: "$6"
                }
              },
              /* @__PURE__ */ import_react221.default.createElement(
                Checkbox.Root,
                {
                  id: `${option}-${index}`,
                  checked: selectedReasons.has(index),
                  onCheckedChange: (checked) => handleCheckedChange(checked, index),
                  css: {
                    cursor: "pointer",
                    flexShrink: 0,
                    bg: "$on_secondary_low",
                    border: "1px solid $border_bright"
                  }
                },
                /* @__PURE__ */ import_react221.default.createElement(Checkbox.Indicator, null, /* @__PURE__ */ import_react221.default.createElement(import_react_icons102.CheckIcon, { width: 12, height: 12 }))
              ),
              /* @__PURE__ */ import_react221.default.createElement(
                Label3,
                {
                  htmlFor: `${option}-${index}`,
                  css: {
                    color: "$on_surface_high",
                    fontSize: "$sm",
                    fontWeight: "$regular",
                    lineHeight: "20px"
                  }
                },
                option
              )
            );
          })
        )
      ), feedback?.comment && /* @__PURE__ */ import_react221.default.createElement(
        Flex,
        {
          direction: "column",
          css: {
            gap: "$4"
          }
        },
        /* @__PURE__ */ import_react221.default.createElement(
          Text,
          {
            variant: "body2",
            css: {
              c: "$on_surface_high",
              fontWeight: "$regular",
              fontSize: "$sm"
            }
          },
          feedback?.comment.label || "Additional comments (optional)"
        ),
        /* @__PURE__ */ import_react221.default.createElement(
          TextArea,
          {
            maxLength: 1024,
            placeholder: feedback?.comment.placeholder || "Tell us more...",
            css: {
              backgroundColor: "$surface_bright",
              border: "1px solid $border_bright",
              resize: "none",
              height: "$36",
              display: "flex"
            },
            value: comment,
            onChange: (event) => setComment(event.target.value.trimStart())
          }
        )
      ));
    };
  }
});

// src/Prebuilt/components/EndCallFeedback/ThankyouView.tsx
var import_react222, import_react_use54, import_react_icons103, ThankyouView;
var init_ThankyouView = __esm({
  "src/Prebuilt/components/EndCallFeedback/ThankyouView.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react222 = __toESM(require("react"));
    import_react_use54 = require("react-use");
    import_react_icons103 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_Theme();
    ThankyouView = () => {
      const isMobile = (0, import_react_use54.useMedia)(config.media.md);
      return /* @__PURE__ */ import_react222.default.createElement(
        Flex,
        {
          direction: isMobile ? "column" : "row",
          align: "center",
          css: {
            gap: "$10",
            border: "1px solid $border_default",
            borderRadius: !isMobile ? "$3" : "$3 $3 0 0",
            bg: "$surface_dim",
            w: !isMobile ? "528px" : "410px",
            p: "$12",
            pb: isMobile ? "$16" : "$12",
            "@md": {
              position: "absolute",
              bottom: "0"
            }
          }
        },
        /* @__PURE__ */ import_react222.default.createElement(import_react_icons103.UserMusicIcon, { width: "64px", height: "64px" }),
        /* @__PURE__ */ import_react222.default.createElement(Flex, { direction: "column", align: isMobile ? "center" : "start" }, /* @__PURE__ */ import_react222.default.createElement(Text, { variant: "h5" }, "Thank you for your feedback"), /* @__PURE__ */ import_react222.default.createElement(
          Text,
          {
            variant: "body1",
            css: {
              fontWeight: "$regular",
              fontSize: "$md",
              opacity: "0.9"
            }
          },
          "Your answers help us improve."
        ))
      );
    };
  }
});

// src/Prebuilt/components/EndCallFeedback/Feedback.tsx
var import_react223, import_react_use55, Feedback;
var init_Feedback = __esm({
  "src/Prebuilt/components/EndCallFeedback/Feedback.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react223 = __toESM(require("react"));
    import_react_use55 = require("react-use");
    init_Layout();
    init_Theme();
    init_FeedbackForm();
    init_ThankyouView();
    init_useRoomLayoutScreen();
    Feedback = () => {
      const { feedback } = useRoomLayoutLeaveScreen();
      const [index, setIndex] = (0, import_react223.useState)(FEEBACK_INDEX.INIT);
      const isMobile = (0, import_react_use55.useMedia)(config.media.md);
      if (!feedback) {
        return null;
      }
      const { ratings } = feedback;
      if (!ratings) {
        return null;
      }
      ratings.sort((a, b) => {
        if (!a.value || !b.value) {
          return 0;
        }
        return a.value - b.value;
      });
      if (index === FEEBACK_INDEX.THANK_YOU) {
        return /* @__PURE__ */ import_react223.default.createElement(
          Flex,
          {
            justify: "center",
            css: {
              pt: "$16"
            }
          },
          /* @__PURE__ */ import_react223.default.createElement(ThankyouView, null)
        );
      }
      return /* @__PURE__ */ import_react223.default.createElement(
        Flex,
        {
          justify: "center",
          css: {
            pt: "$16",
            w: isMobile ? "100%" : "528px"
          }
        },
        index === FEEBACK_INDEX.INIT ? /* @__PURE__ */ import_react223.default.createElement(
          Flex,
          {
            css: {
              p: isMobile ? "$10" : "$12",
              border: "1px solid $border_default",
              bg: "$surface_dim",
              borderRadius: !isMobile ? "$3" : "$3 $3 0 0",
              gap: "$10",
              "@md": {
                position: "absolute",
                bottom: "0",
                w: "100%"
              }
            },
            direction: "column"
          },
          /* @__PURE__ */ import_react223.default.createElement(FeedbackHeader, { ratings, onEmojiClicked: setIndex })
        ) : /* @__PURE__ */ import_react223.default.createElement(FeedbackModal, { ratings, index, setIndex })
      );
    };
  }
});

// src/Prebuilt/components/LeaveScreen.tsx
var import_react224, import_react_icons104, LeaveScreen;
var init_LeaveScreen = __esm({
  "src/Prebuilt/components/LeaveScreen.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react224 = __toESM(require("react"));
    import_react_icons104 = require("@100mslive/react-icons");
    init_Feedback();
    init_ToastManager();
    init_Button2();
    init_Layout();
    init_Text2();
    init_AppStateContext();
    init_Header2();
    init_useUserPreferences();
    init_utils();
    LeaveScreen = () => {
      const { rejoin } = useHMSAppStateContext();
      const [previewPreference] = useUserPreferences(UserPreferencesKeys.PREVIEW, defaultPreviewPreference);
      return /* @__PURE__ */ import_react224.default.createElement(Flex, { direction: "column", css: { size: "100%" } }, /* @__PURE__ */ import_react224.default.createElement(Box, { css: { h: "$18", "@md": { h: "$17" } }, "data-testid": "header" }, /* @__PURE__ */ import_react224.default.createElement(Header2, null)), /* @__PURE__ */ import_react224.default.createElement(
        Flex,
        {
          justify: "center",
          direction: "column",
          align: "center",
          css: { bg: "$background_dim", flex: "1 1 0", position: "relative" }
        },
        /* @__PURE__ */ import_react224.default.createElement(Text, { variant: "h2", css: { fontWeight: "$semiBold" } }, "\u{1F44B}"),
        /* @__PURE__ */ import_react224.default.createElement(Text, { variant: "h4", css: { color: "$on_surface_high", fontWeight: "$semiBold", mt: "$12" } }, "You left the room"),
        /* @__PURE__ */ import_react224.default.createElement(
          Text,
          {
            variant: "body1",
            css: {
              color: "$on_surface_medium",
              mt: "$8",
              fontWeight: "$regular",
              textAlign: "center"
            }
          },
          "Have a nice day",
          previewPreference.name && /* @__PURE__ */ import_react224.default.createElement(Box, { as: "span", css: { ...textEllipsis(100) } }, ", ", previewPreference.name),
          "!"
        ),
        /* @__PURE__ */ import_react224.default.createElement(Flex, { css: { mt: "$14", gap: "$10", alignItems: "center" } }, /* @__PURE__ */ import_react224.default.createElement(Text, { variant: "body1", css: { color: "$on_surface_medium", fontWeight: "$regular" } }, "Left by mistake?"), /* @__PURE__ */ import_react224.default.createElement(
          Button,
          {
            onClick: () => {
              rejoin();
              ToastManager.clearAllToast();
            },
            "data-testid": "join_again_btn"
          },
          /* @__PURE__ */ import_react224.default.createElement(import_react_icons104.ExitIcon, null),
          /* @__PURE__ */ import_react224.default.createElement(Text, { css: { ml: "$3", fontWeight: "$semiBold", color: "inherit" } }, "Rejoin")
        )),
        /* @__PURE__ */ import_react224.default.createElement(Feedback, null)
      ));
    };
  }
});

// src/Prebuilt/components/MwebLandscapePrompt.tsx
var import_react225, import_react_use56, import_ts_pattern15, import_react_icons105, MwebLandscapePrompt;
var init_MwebLandscapePrompt = __esm({
  "src/Prebuilt/components/MwebLandscapePrompt.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react225 = __toESM(require("react"));
    import_react_use56 = require("react-use");
    import_ts_pattern15 = require("ts-pattern");
    import_react_icons105 = require("@100mslive/react-icons");
    init_Button2();
    init_Layout();
    init_Modal();
    init_Text2();
    init_Theme();
    init_hooks();
    init_utils2();
    MwebLandscapePrompt = () => {
      const [showMwebLandscapePrompt, setShowMwebLandscapePrompt] = (0, import_react225.useState)(false);
      const isLandscape = (0, import_react_use56.useMedia)(config.media.ls);
      const isLandscapeHLSStream = useLandscapeHLSStream();
      (0, import_react225.useEffect)(() => {
        if (!isMobileUserAgent) {
          setShowMwebLandscapePrompt(false);
          return;
        }
        if (!window.screen?.orientation) {
          setShowMwebLandscapePrompt(isLandscape && !isLandscapeHLSStream);
          return;
        }
        const handleRotation = () => {
          const angle = window.screen.orientation.angle;
          const type = window.screen.orientation.type || "";
          setShowMwebLandscapePrompt(
            (0, import_ts_pattern15.match)({ angle, isLandscapeHLSStream, isLandscape, type }).with({ isLandscapeHLSStream: true }, () => false).with({ angle: import_ts_pattern15.P.when((angle2) => angle2 && angle2 >= 90) }, ({ type: type2 }) => type2.includes("landscape")).otherwise(() => isLandscape)
          );
        };
        handleRotation();
        window.screen.orientation.addEventListener("change", handleRotation);
        return () => {
          window.screen.orientation.removeEventListener("change", handleRotation);
        };
      }, [isLandscape, isLandscapeHLSStream]);
      if (isLandscapeHLSStream) {
        return null;
      }
      return /* @__PURE__ */ import_react225.default.createElement(Dialog.Root, { open: showMwebLandscapePrompt, onOpenChange: setShowMwebLandscapePrompt }, /* @__PURE__ */ import_react225.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react225.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react225.default.createElement(Dialog.Content, { css: { w: "min(420px, 90%)", p: "$8", bg: "$surface_dim" } }, /* @__PURE__ */ import_react225.default.createElement(Box, null, /* @__PURE__ */ import_react225.default.createElement(
        Flex,
        {
          css: {
            color: "$primary_default",
            display: "flex",
            alignItems: "center"
          }
        },
        /* @__PURE__ */ import_react225.default.createElement(import_react_icons105.RefreshIcon, { style: { marginRight: "0.5rem" } }),
        /* @__PURE__ */ import_react225.default.createElement(Text, { variant: "lg", css: { color: "$on_surface_high", fontWeight: "$semiBold" } }, "Please rotate your device")
      ), /* @__PURE__ */ import_react225.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", mb: "$8", mt: "$4" } }, "We do not support landscape mode as of now, please use the app in portrait mode for the best experience."), /* @__PURE__ */ import_react225.default.createElement(Flex, { align: "center", justify: "between", css: { w: "100%", gap: "$8" } }, /* @__PURE__ */ import_react225.default.createElement(Button, { outlined: true, variant: "standard", css: { w: "100%" }, onClick: () => setShowMwebLandscapePrompt(false) }, "Continue anyway"))))));
    };
  }
});

// src/Prebuilt/components/Notifications/AutoplayBlockedModal.tsx
function AutoplayBlockedModal() {
  const { error, resetError, unblockAudio } = (0, import_react_sdk115.useAutoplayError)();
  return /* @__PURE__ */ import_react226.default.createElement(
    Dialog.Root,
    {
      open: !!error,
      onOpenChange: (value) => {
        if (!value) {
          unblockAudio();
        }
        resetError();
      }
    },
    /* @__PURE__ */ import_react226.default.createElement(DialogContent, { title: "Permission Error", closeable: false }, /* @__PURE__ */ import_react226.default.createElement(DialogRow, null, /* @__PURE__ */ import_react226.default.createElement(Text, { variant: "md" }, "The browser wants us to get a confirmation for playing the Audio. Please allow audio to proceed.")), /* @__PURE__ */ import_react226.default.createElement(DialogRow, { justify: "end" }, /* @__PURE__ */ import_react226.default.createElement(
      Button,
      {
        variant: "primary",
        onClick: () => {
          unblockAudio();
          resetError();
        }
      },
      "Allow Audio"
    )))
  );
}
var import_react226, import_react_sdk115;
var init_AutoplayBlockedModal = __esm({
  "src/Prebuilt/components/Notifications/AutoplayBlockedModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react226 = __toESM(require("react"));
    import_react_sdk115 = require("@100mslive/react-sdk");
    init_src();
    init_DialogContent2();
  }
});

// src/Prebuilt/components/Notifications/ChatNotifications.tsx
var import_react227, import_uuid5, import_react_sdk116, import_react_icons106, NOTIFICATION_TIME_DIFFERENCE, ChatNotifications;
var init_ChatNotifications = __esm({
  "src/Prebuilt/components/Notifications/ChatNotifications.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react227 = __toESM(require("react"));
    import_uuid5 = require("uuid");
    import_react_sdk116 = require("@100mslive/react-sdk");
    import_react_icons106 = require("@100mslive/react-icons");
    init_ToastManager();
    NOTIFICATION_TIME_DIFFERENCE = 5e3;
    ChatNotifications = () => {
      const chatState = (0, import_react_sdk116.useHMSStore)((0, import_react_sdk116.selectSessionStore)("chatState" /* CHAT_STATE */));
      const localPeerId = (0, import_react_sdk116.useHMSStore)(import_react_sdk116.selectLocalPeerID);
      (0, import_react227.useEffect)(() => {
        if (!chatState || chatState.updatedBy?.peerId === localPeerId) {
          return;
        }
        const showToast = Date.now() - chatState.updatedAt < NOTIFICATION_TIME_DIFFERENCE;
        if (!showToast) {
          return;
        }
        const notification = {
          id: (0, import_uuid5.v4)(),
          icon: chatState.enabled ? /* @__PURE__ */ import_react227.default.createElement(import_react_icons106.ChatUnreadIcon, null) : /* @__PURE__ */ import_react227.default.createElement(import_react_icons106.ChatIcon, null),
          title: `Chat ${chatState.enabled ? "resumed" : "paused"} by ${chatState.updatedBy?.userName}`
        };
        ToastManager.addToast(notification);
      }, [chatState, localPeerId]);
      return /* @__PURE__ */ import_react227.default.createElement(import_react227.default.Fragment, null);
    };
  }
});

// src/Prebuilt/components/Toast/ToastConfig.jsx
var import_react228, import_react_sdk117, import_react_icons107, ChatAction, HandRaiseAction, ToastConfig;
var init_ToastConfig = __esm({
  "src/Prebuilt/components/Toast/ToastConfig.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react228 = __toESM(require("react"));
    import_react_sdk117 = require("@100mslive/react-sdk");
    import_react_icons107 = require("@100mslive/react-icons");
    init_Button2();
    init_roomLayoutProvider();
    init_useSidepane();
    init_constants();
    ChatAction = import_react228.default.forwardRef((_, ref) => {
      const toggleChat = useSidepaneToggle(SIDE_PANE_OPTIONS.CHAT);
      const isChatOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.CHAT);
      if (isChatOpen) {
        return null;
      }
      return /* @__PURE__ */ import_react228.default.createElement(Button, { outlined: true, as: "div", variant: "standard", css: { w: "max-content" }, onClick: toggleChat, ref }, "Open Chat");
    });
    HandRaiseAction = import_react228.default.forwardRef(({ id = "", isSingleHandRaise = true }, ref) => {
      const hmsActions = (0, import_react_sdk117.useHMSActions)();
      const toggleSidepane = useSidepaneToggle(SIDE_PANE_OPTIONS.PARTICIPANTS);
      const isParticipantsOpen = useIsSidepaneTypeOpen(SIDE_PANE_OPTIONS.PARTICIPANTS);
      const peer = (0, import_react_sdk117.useHMSStore)((0, import_react_sdk117.selectPeerByID)(id));
      const layout = useRoomLayout();
      const {
        bring_to_stage_label,
        on_stage_role,
        off_stage_roles = [],
        skip_preview_for_role_change = false
      } = layout?.screens?.conferencing?.default?.elements.on_stage_exp || {};
      const onClickHandler = (0, import_react228.useCallback)(async () => {
        if (isSingleHandRaise) {
          hmsActions.changeRoleOfPeer(id, on_stage_role, skip_preview_for_role_change);
          if (skip_preview_for_role_change) {
            await hmsActions.lowerRemotePeerHand(id);
          }
        } else {
          !isParticipantsOpen && toggleSidepane();
        }
      }, [
        hmsActions,
        id,
        isParticipantsOpen,
        isSingleHandRaise,
        on_stage_role,
        toggleSidepane,
        skip_preview_for_role_change
      ]);
      if (isSingleHandRaise && (!peer || !off_stage_roles.includes(peer.roleName))) {
        return null;
      }
      return /* @__PURE__ */ import_react228.default.createElement(Button, { outlined: true, as: "div", variant: "standard", css: { w: "max-content" }, onClick: onClickHandler, ref }, isSingleHandRaise ? bring_to_stage_label : "View");
    });
    ToastConfig = {
      PEER_JOINED: {
        single: function(notification) {
          return {
            title: `${notification.data?.name} joined`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.PeopleAddIcon, null)
          };
        },
        multiple: function(notifications) {
          return {
            title: `${notifications[notifications.length - 1].data.name} and ${notifications.length - 1} others joined`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.PeopleAddIcon, null)
          };
        }
      },
      PEER_LEFT: {
        single: function(notification) {
          return {
            title: `${notification.data?.name} left`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.PeopleRemoveIcon, null)
          };
        },
        multiple: function(notifications) {
          return {
            title: `${notifications[notifications.length - 1].data.name} and ${notifications.length - 1} others left`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.PeopleRemoveIcon, null)
          };
        }
      },
      RAISE_HAND: {
        single: (notification) => {
          return {
            title: `${notification.data?.name} raised hand`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.HandIcon, null)
          };
        },
        multiple: (notifications) => {
          const count = new Set(notifications.map((notification) => notification.data?.id)).size;
          return {
            title: `${notifications[notifications.length - 1].data?.name} ${count > 1 ? `and ${count} others` : ""} raised hand`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.HandIcon, null)
          };
        }
      },
      RAISE_HAND_HLS: {
        single: (notification) => {
          return {
            title: `${notification.data?.name} raised hand`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.HandIcon, null),
            action: /* @__PURE__ */ import_react228.default.createElement(HandRaiseAction, { id: notification.data?.id })
          };
        },
        multiple: (notifications) => {
          const count = new Set(notifications.map((notification) => notification.data?.id)).size;
          return {
            title: `${notifications[notifications.length - 1].data?.name} ${count > 1 ? `and ${count} others` : ""} raised hand`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.HandIcon, null),
            action: /* @__PURE__ */ import_react228.default.createElement(HandRaiseAction, { isSingleHandRaise: false })
          };
        }
      },
      NEW_MESSAGE: {
        single: (notification) => {
          return {
            title: `New message from ${notification.data?.senderName}`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.ChatUnreadIcon, null),
            action: /* @__PURE__ */ import_react228.default.createElement(ChatAction, null)
          };
        },
        multiple: (notifications) => {
          return {
            title: `${notifications.length} new messages`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.ChatUnreadIcon, null),
            action: /* @__PURE__ */ import_react228.default.createElement(ChatAction, null)
          };
        }
      },
      RECONNECTED: {
        single: (online) => {
          return {
            title: `You are now ${online ? "online" : "connected"}`,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.ConnectivityIcon, null),
            variant: "success",
            duration: 3e3
          };
        }
      },
      RECONNECTING: {
        single: (message) => {
          return {
            title: `You are offline for now. while we try to reconnect, please check
        your internet connection. ${message}.
      `,
            icon: /* @__PURE__ */ import_react228.default.createElement(import_react_icons107.PoorConnectivityIcon, null),
            variant: "warning",
            duration: 3e4
          };
        }
      }
    };
  }
});

// src/Prebuilt/components/Toast/ToastBatcher.js
var ToastBatcher;
var init_ToastBatcher = __esm({
  "src/Prebuilt/components/Toast/ToastBatcher.js"() {
    "use strict";
    init_cjs_shims();
    init_ToastConfig();
    init_ToastManager();
    ToastBatcher = {
      toastsType: /* @__PURE__ */ new Map(),
      toastCache: {},
      showToastInternal({ notification, duration, type }) {
        let notificationType = type;
        if (!type) {
          notificationType = notification.type;
        }
        const toastType = this.toastsType.has(notificationType);
        if (toastType) {
          let { notifications } = this.toastsType.get(notificationType);
          const { id } = this.toastsType.get(notificationType);
          notifications.push(notification);
          const toastObject = ToastConfig[notificationType].multiple(notifications);
          const toastId = ToastManager.replaceToast(id, {
            ...toastObject,
            duration
          });
          this.toastsType.set(notificationType, {
            id: toastId,
            notifications,
            duration
          });
        } else {
          const toastObject = ToastConfig[notificationType].single(notification);
          const toastId = ToastManager.addToast({
            ...toastObject,
            duration
          });
          let notifications = [];
          notifications.push(notification);
          this.toastsType.set(notificationType, {
            id: toastId,
            notifications: [...notifications],
            duration
          });
        }
      },
      showToast({ notification, duration = 3e3, type }) {
        try {
          if (!this.toastCache[notification.id]) {
            this.showToastInternal({ notification, duration, type });
          }
          this.toastCache[notification.id] = true;
          if (Object.keys(this.toastCache).length > 100) {
            this.toastCache = {};
          }
        } catch (err) {
          console.debug("Notifications", err);
        }
      },
      syncUItoast(toastsDisplaying) {
        for (const [toastType, toastInfo] of this.toastsType.entries()) {
          if (!toastsDisplaying.find((toast) => toast.id === toastInfo.id)) {
            this.toastsType.delete(toastType);
          }
        }
      }
    };
    ToastManager.addListener(ToastBatcher.syncUItoast.bind(ToastBatcher));
  }
});

// src/Prebuilt/components/Notifications/HandRaisedNotifications.tsx
var import_react229, import_react_use57, import_react_sdk118, HandRaisedNotifications;
var init_HandRaisedNotifications = __esm({
  "src/Prebuilt/components/Notifications/HandRaisedNotifications.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react229 = require("react");
    import_react_use57 = require("react-use");
    import_react_sdk118 = require("@100mslive/react-sdk");
    init_roomLayoutProvider();
    init_ToastBatcher();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_constants();
    HandRaisedNotifications = () => {
      const notification = (0, import_react_sdk118.useHMSNotifications)(import_react_sdk118.HMSNotificationTypes.HAND_RAISE_CHANGED);
      const roomState = (0, import_react_sdk118.useHMSStore)(import_react_sdk118.selectRoomState);
      const vanillaStore = (0, import_react_sdk118.useHMSVanillaStore)();
      const { on_stage_exp } = useRoomLayoutConferencingScreen().elements || {};
      const isSubscribing = !!useSubscribedNotifications(SUBSCRIBED_NOTIFICATIONS.METADATA_UPDATED);
      const amIScreenSharing = (0, import_react_sdk118.useHMSStore)(import_react_sdk118.selectIsLocalScreenShared);
      const { showNotification } = (0, import_react_sdk118.useAwayNotifications)();
      const logoURL = useRoomLayout()?.logo?.url;
      (0, import_react229.useEffect)(() => {
        if (!notification?.data) {
          return;
        }
        if (roomState !== import_react_sdk118.HMSRoomState.Connected || notification.data.isLocal || !isSubscribing) {
          return;
        }
        const hasPeerHandRaised = vanillaStore.getState((0, import_react_sdk118.selectHasPeerHandRaised)(notification.data.id));
        const peer = vanillaStore.getState((0, import_react_sdk118.selectPeerByID)(notification.data.id));
        if (hasPeerHandRaised) {
          const showCTA = peer?.roleName && (on_stage_exp?.off_stage_roles || [])?.includes(peer.roleName);
          ToastBatcher.showToast({ notification, type: showCTA ? "RAISE_HAND_HLS" : "RAISE_HAND" });
          console.debug("Metadata updated", notification.data);
        }
      }, [isSubscribing, notification, on_stage_exp, roomState, vanillaStore]);
      (0, import_react_use57.useDebounce)(
        () => {
          if (!notification?.data) {
            return;
          }
          if (roomState !== import_react_sdk118.HMSRoomState.Connected || notification.data.isLocal || !isSubscribing) {
            return;
          }
          const hasPeerHandRaised = vanillaStore.getState((0, import_react_sdk118.selectHasPeerHandRaised)(notification.data.id));
          const peer = vanillaStore.getState((0, import_react_sdk118.selectPeerByID)(notification.data.id));
          const handRaisedPeers = vanillaStore.getState(import_react_sdk118.selectHandRaisedPeers);
          if (amIScreenSharing && hasPeerHandRaised) {
            const title = `${peer?.name} ${handRaisedPeers.length > 1 ? `and ${handRaisedPeers.length - 1} others` : ""} raised hand`;
            showNotification(title, { icon: logoURL });
          }
        },
        1e3,
        [isSubscribing, notification, roomState, vanillaStore, amIScreenSharing]
      );
      return null;
    };
  }
});

// src/Prebuilt/components/Notifications/InitErrorModal.tsx
var import_react230, import_react_sdk119, InitErrorModal;
var init_InitErrorModal = __esm({
  "src/Prebuilt/components/Notifications/InitErrorModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react230 = __toESM(require("react"));
    import_react_sdk119 = require("@100mslive/react-sdk");
    init_src();
    init_DialogContent2();
    InitErrorModal = () => {
      const notification = (0, import_react_sdk119.useHMSNotifications)(import_react_sdk119.HMSNotificationTypes.ERROR);
      const [showModal, setShowModal] = (0, import_react230.useState)(false);
      const [info, setInfo] = (0, import_react230.useState)({ title: "Init Error", description: "" });
      (0, import_react230.useEffect)(() => {
        const data3 = notification?.data;
        if (!data3 || data3.action !== "INIT") {
          return;
        }
        let description;
        let title;
        if (data3.description.includes("role is invalid")) {
          description = "This role does not exist for the given room. Try again with a valid role.";
          title = "Invalid Role";
        } else if (data3.description.includes("room is not active")) {
          title = "Room is disabled";
          description = "This room is disabled and cannot be joined. To enable the room, use the 100ms dashboard or the API.";
        } else {
          description = data3.description;
          title = "Init Error";
        }
        setInfo({ title, description });
        setShowModal(true);
      }, [notification]);
      return /* @__PURE__ */ import_react230.default.createElement(ErrorDialog, { open: showModal, onOpenChange: setShowModal, title: info.title }, /* @__PURE__ */ import_react230.default.createElement(Text, { variant: "sm", css: { wordBreak: "break-word" } }, info.description, " ", /* @__PURE__ */ import_react230.default.createElement("br", null), "Current URL - ", window.location.href));
    };
  }
});

// src/Prebuilt/components/Notifications/PeerNotifications.tsx
var import_react231, import_react_sdk120, notificationTypes, PeerNotifications;
var init_PeerNotifications = __esm({
  "src/Prebuilt/components/Notifications/PeerNotifications.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react231 = require("react");
    import_react_sdk120 = require("@100mslive/react-sdk");
    init_ToastBatcher();
    init_useUISettings();
    init_constants();
    notificationTypes = [import_react_sdk120.HMSNotificationTypes.PEER_JOINED, import_react_sdk120.HMSNotificationTypes.PEER_LEFT];
    PeerNotifications = () => {
      const notification = (0, import_react_sdk120.useHMSNotifications)(notificationTypes);
      const isPeerJoinSubscribed = useSubscribedNotifications(SUBSCRIBED_NOTIFICATIONS.PEER_JOINED);
      const isPeerLeftSubscribed = useSubscribedNotifications(SUBSCRIBED_NOTIFICATIONS.PEER_LEFT);
      const [selectedPeer, setPeerSelector] = useSetSubscribedChatSelector(CHAT_SELECTOR.PEER);
      (0, import_react231.useEffect)(() => {
        if (!notification?.data) {
          return;
        }
        console.debug(`[${notification.type}]`, notification);
        switch (notification.type) {
          case import_react_sdk120.HMSNotificationTypes.PEER_JOINED:
            if (!isPeerJoinSubscribed) {
              return;
            }
            break;
          case import_react_sdk120.HMSNotificationTypes.PEER_LEFT:
            if (selectedPeer.id === notification.data.id) {
              setPeerSelector({});
            }
            if (!isPeerLeftSubscribed) {
              return;
            }
            break;
          default:
            return;
        }
        ToastBatcher.showToast({ notification });
      }, [notification, isPeerJoinSubscribed, isPeerLeftSubscribed, selectedPeer.id, setPeerSelector]);
      return null;
    };
  }
});

// src/Prebuilt/images/android-perm-1.png
var android_perm_1_default;
var init_android_perm_1 = __esm({
  "src/Prebuilt/images/android-perm-1.png"() {
    android_perm_1_default = "./android-perm-1-FTKOQOEP.png";
  }
});

// src/Prebuilt/images/ios-perm-0.png
var ios_perm_0_default;
var init_ios_perm_0 = __esm({
  "src/Prebuilt/images/ios-perm-0.png"() {
    ios_perm_0_default = "./ios-perm-0-FIX5TKQT.png";
  }
});

// src/Prebuilt/components/Notifications/PermissionErrorModal.tsx
function PermissionErrorNotificationModal() {
  const notification = (0, import_react_sdk121.useHMSNotifications)(import_react_sdk121.HMSNotificationTypes.ERROR);
  return /* @__PURE__ */ import_react232.default.createElement(PermissionErrorModal, { error: notification?.data });
}
var import_react232, import_react_use58, import_react_sdk121, PermissionErrorModal;
var init_PermissionErrorModal = __esm({
  "src/Prebuilt/components/Notifications/PermissionErrorModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react232 = __toESM(require("react"));
    import_react_use58 = require("react-use");
    import_react_sdk121 = require("@100mslive/react-sdk");
    init_src();
    init_android_perm_1();
    init_ios_perm_0();
    init_constants();
    PermissionErrorModal = ({ error }) => {
      const [deviceType, setDeviceType] = (0, import_react232.useState)("");
      const [isSystemError, setIsSystemError] = (0, import_react232.useState)(false);
      const isMobile = (0, import_react_use58.useMedia)(config.media.md);
      (0, import_react232.useEffect)(() => {
        if (!error || error?.code !== 3001 && error?.code !== 3011 || error?.code === 3001 && error?.message.includes("screen")) {
          return;
        }
        const errorMessage = error?.message;
        const hasAudio = errorMessage.includes("audio");
        const hasVideo = errorMessage.includes("video");
        const hasScreen = errorMessage.includes("screen");
        if (hasAudio && hasVideo) {
          setDeviceType("camera and microphone");
        } else if (hasAudio) {
          setDeviceType("microphone");
        } else if (hasVideo) {
          setDeviceType("camera");
        } else if (hasScreen) {
          setDeviceType("screen");
        }
        setIsSystemError(error.code === 3011);
      }, [error]);
      return deviceType ? /* @__PURE__ */ import_react232.default.createElement(Dialog.Root, { open: !!deviceType }, /* @__PURE__ */ import_react232.default.createElement(Dialog.Portal, null, /* @__PURE__ */ import_react232.default.createElement(Dialog.Overlay, null), /* @__PURE__ */ import_react232.default.createElement(
        Dialog.Content,
        {
          css: {
            w: "min(380px, 90%)",
            p: "$8",
            // overlay over Sheet.tsx
            zIndex: 23
          }
        },
        /* @__PURE__ */ import_react232.default.createElement(
          Dialog.Title,
          {
            css: {
              borderBottom: "1px solid $border_default"
            }
          },
          isMobile && isIOS ? /* @__PURE__ */ import_react232.default.createElement("img", { style: { maxWidth: "100%", maxHeight: "100%" }, src: ios_perm_0_default, alt: "iOS Permission flow" }) : null,
          isMobile && isAndroid ? /* @__PURE__ */ import_react232.default.createElement(
            "img",
            {
              src: android_perm_1_default,
              style: { maxWidth: "100%", maxHeight: "100%" },
              alt: "Android Permission flow "
            }
          ) : null,
          /* @__PURE__ */ import_react232.default.createElement(Text, { variant: "h6" }, "We can't access your ", deviceType)
        ),
        /* @__PURE__ */ import_react232.default.createElement(Text, { variant: "sm", css: { pt: "$4", pb: "$10", color: "$on_surface_medium" } }, isMobile && isIOS ? 'Enable permissions by reloading this page and clicking "Allow" on the pop-up, or change settings from the address bar.' : null, isMobile && isAndroid ? `To allow other users to see and hear you, click the blocked camera icon in your browser's address bar.` : null, !isMobile ? `Access to ${deviceType} is required. ` : null, isSystemError && !isMobile ? `Enable permissions for ${deviceType}${deviceType === "screen" ? "share" : ""} from sytem settings` : null, !isSystemError && !isMobile ? `Enable permissions for ${deviceType}${deviceType === "screen" ? "share" : ""} from address bar or browser settings.` : null),
        isMobile && isIOS ? /* @__PURE__ */ import_react232.default.createElement(import_react232.default.Fragment, null, /* @__PURE__ */ import_react232.default.createElement(Button, { onClick: () => window.location.reload(), css: { w: "100%", mb: "$6" } }, "Reload"), /* @__PURE__ */ import_react232.default.createElement(Button, { outlined: true, variant: "standard", onClick: () => setDeviceType(""), css: { w: "100%" } }, "Continue anyway")) : null,
        isMobile && isAndroid ? /* @__PURE__ */ import_react232.default.createElement(import_react232.default.Fragment, null, /* @__PURE__ */ import_react232.default.createElement(Button, { onClick: () => setDeviceType(""), css: { w: "100%", mb: "$6" } }, "I've allowed access"), /* @__PURE__ */ import_react232.default.createElement(Button, { outlined: true, variant: "standard", onClick: () => setDeviceType(""), css: { w: "100%" } }, "Continue anyway")) : null,
        !isMobile ? /* @__PURE__ */ import_react232.default.createElement(Flex, { justify: "end", css: { w: "100%" } }, /* @__PURE__ */ import_react232.default.createElement(Button, { outlined: true, variant: "standard", onClick: () => setDeviceType("") }, "Dismiss")) : null
      ))) : null;
    };
  }
});

// src/Prebuilt/components/Notifications/ReconnectNotifications.tsx
var import_react233, import_react_sdk122, notificationTypes2, notificationId, ReconnectNotifications;
var init_ReconnectNotifications = __esm({
  "src/Prebuilt/components/Notifications/ReconnectNotifications.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react233 = require("react");
    import_react_sdk122 = require("@100mslive/react-sdk");
    init_ToastConfig();
    init_ToastManager();
    notificationTypes2 = [
      import_react_sdk122.HMSNotificationTypes.RECONNECTED,
      import_react_sdk122.HMSNotificationTypes.RECONNECTING,
      import_react_sdk122.HMSNotificationTypes.ERROR
    ];
    notificationId = null;
    ReconnectNotifications = () => {
      const notification = (0, import_react_sdk122.useHMSNotifications)(notificationTypes2);
      const prevErrorCode = (0, import_react233.useRef)(0);
      (0, import_react233.useEffect)(() => {
        if (!notification) {
          return;
        }
        if (notification.type === import_react_sdk122.HMSNotificationTypes.RECONNECTED) {
          notificationId = ToastManager.replaceToast(
            notificationId,
            ToastConfig.RECONNECTED.single([4005, 4006].includes(prevErrorCode.current))
          );
        } else if (notification.type === import_react_sdk122.HMSNotificationTypes.RECONNECTING) {
          prevErrorCode.current = notification.data?.code || 0;
          notificationId = ToastManager.replaceToast(
            notificationId,
            ToastConfig.RECONNECTING.single(notification.data?.message)
          );
        }
      }, [notification]);
      return null;
    };
  }
});

// src/Prebuilt/components/Notifications/TrackBulkUnmuteModal.tsx
var import_react234, import_react_sdk123, import_react_icons108, TrackBulkUnmuteModal;
var init_TrackBulkUnmuteModal = __esm({
  "src/Prebuilt/components/Notifications/TrackBulkUnmuteModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react234 = __toESM(require("react"));
    import_react_sdk123 = require("@100mslive/react-sdk");
    import_react_icons108 = require("@100mslive/react-icons");
    init_DialogContent2();
    TrackBulkUnmuteModal = () => {
      const hmsActions = (0, import_react_sdk123.useHMSActions)();
      const [muteNotification, setMuteNotification] = (0, import_react234.useState)(null);
      const notification = (0, import_react_sdk123.useHMSNotifications)([
        import_react_sdk123.HMSNotificationTypes.CHANGE_MULTI_TRACK_STATE_REQUEST,
        import_react_sdk123.HMSNotificationTypes.ROOM_ENDED,
        import_react_sdk123.HMSNotificationTypes.REMOVED_FROM_ROOM
      ]);
      (0, import_react234.useEffect)(() => {
        switch (notification?.type) {
          case import_react_sdk123.HMSNotificationTypes.REMOVED_FROM_ROOM:
          case import_react_sdk123.HMSNotificationTypes.ROOM_ENDED:
            setMuteNotification(null);
            break;
          case import_react_sdk123.HMSNotificationTypes.CHANGE_MULTI_TRACK_STATE_REQUEST:
            if (notification?.data.enabled) {
              setMuteNotification(notification.data);
            }
            break;
          default:
            return;
        }
      }, [notification]);
      if (!muteNotification) {
        return null;
      }
      const { requestedBy: peer, tracks, enabled } = muteNotification;
      const types = new Set(tracks.map((track) => track.type));
      return /* @__PURE__ */ import_react234.default.createElement(
        RequestDialog,
        {
          title: "Unmute request",
          body: `${peer?.name} is requesting you to unmute your ${Array.from(types).join(",")}`,
          onOpenChange: (value) => !value && setMuteNotification(null),
          onAction: () => {
            tracks.forEach((track) => {
              hmsActions.setEnabledTrack(track.id, enabled);
            });
            setMuteNotification(null);
          },
          Icon: import_react_icons108.MicOnIcon
        }
      );
    };
  }
});

// src/Prebuilt/components/Notifications/TrackNotifications.tsx
var import_react235, import_react_sdk124, notificationTypes3, TrackNotifications;
var init_TrackNotifications = __esm({
  "src/Prebuilt/components/Notifications/TrackNotifications.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react235 = require("react");
    import_react_sdk124 = require("@100mslive/react-sdk");
    notificationTypes3 = [
      import_react_sdk124.HMSNotificationTypes.TRACK_ADDED,
      import_react_sdk124.HMSNotificationTypes.TRACK_REMOVED,
      import_react_sdk124.HMSNotificationTypes.TRACK_MUTED,
      import_react_sdk124.HMSNotificationTypes.TRACK_UNMUTED
    ];
    TrackNotifications = () => {
      const notification = (0, import_react_sdk124.useHMSNotifications)(notificationTypes3);
      (0, import_react235.useEffect)(() => {
        if (notification) {
          console.debug(`[${notification.type}]`, notification);
        }
      }, [notification]);
      return null;
    };
  }
});

// src/Prebuilt/components/Notifications/TrackUnmuteModal.tsx
var import_react236, import_react_sdk125, import_react_icons109, TrackUnmuteModal;
var init_TrackUnmuteModal = __esm({
  "src/Prebuilt/components/Notifications/TrackUnmuteModal.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react236 = __toESM(require("react"));
    import_react_sdk125 = require("@100mslive/react-sdk");
    import_react_icons109 = require("@100mslive/react-icons");
    init_DialogContent2();
    TrackUnmuteModal = () => {
      const hmsActions = (0, import_react_sdk125.useHMSActions)();
      const notification = (0, import_react_sdk125.useHMSNotifications)([
        import_react_sdk125.HMSNotificationTypes.CHANGE_TRACK_STATE_REQUEST,
        import_react_sdk125.HMSNotificationTypes.ROOM_ENDED,
        import_react_sdk125.HMSNotificationTypes.REMOVED_FROM_ROOM
      ]);
      const [muteNotification, setMuteNotification] = (0, import_react236.useState)(null);
      (0, import_react236.useEffect)(() => {
        switch (notification?.type) {
          case import_react_sdk125.HMSNotificationTypes.REMOVED_FROM_ROOM:
          case import_react_sdk125.HMSNotificationTypes.ROOM_ENDED:
            setMuteNotification(null);
            break;
          case import_react_sdk125.HMSNotificationTypes.CHANGE_TRACK_STATE_REQUEST:
            if (notification?.data.enabled) {
              setMuteNotification(notification.data);
            }
            break;
          default:
            return;
        }
      }, [notification]);
      if (!muteNotification) {
        return null;
      }
      const { requestedBy: peer, track, enabled } = muteNotification;
      return /* @__PURE__ */ import_react236.default.createElement(
        RequestDialog,
        {
          title: `Unmute your ${track.type}?`,
          onOpenChange: (value) => !value && setMuteNotification(null),
          body: `${peer?.name}is requesting you to unmute your ${track?.type}.`,
          onAction: () => {
            hmsActions.setEnabledTrack(track.id, enabled);
            setMuteNotification(null);
          },
          Icon: import_react_icons109.MicOnIcon
        }
      );
    };
  }
});

// src/Prebuilt/components/Notifications/TranscriptionNotifications.tsx
var import_react237, import_ts_pattern16, import_react_sdk126, import_react_icons110, TranscriptionNotifications;
var init_TranscriptionNotifications = __esm({
  "src/Prebuilt/components/Notifications/TranscriptionNotifications.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react237 = __toESM(require("react"));
    import_ts_pattern16 = require("ts-pattern");
    import_react_sdk126 = require("@100mslive/react-sdk");
    import_react_icons110 = require("@100mslive/react-icons");
    init_ToastManager();
    init_useUISettings();
    init_constants();
    TranscriptionNotifications = () => {
      const notification = (0, import_react_sdk126.useHMSNotifications)(import_react_sdk126.HMSNotificationTypes.TRANSCRIPTION_STATE_UPDATED);
      const [toastId, setToastId] = useSetAppDataByKey(CAPTION_TOAST.captionToast);
      (0, import_react237.useEffect)(() => {
        if (!notification?.data) {
          return;
        }
        console.debug(`[${notification.type}]`, notification);
        const transcriptionStates = notification.data;
        if (transcriptionStates.length > 0) {
          let id = "";
          (0, import_ts_pattern16.match)({ state: transcriptionStates[0].state, error: transcriptionStates[0].error }).when(
            ({ error }) => !!error,
            () => {
              id = ToastManager.replaceToast(toastId, {
                title: `Failed to enable Closed Caption`,
                variant: "error",
                icon: /* @__PURE__ */ import_react237.default.createElement(import_react_icons110.AlertTriangleIcon, { style: { marginRight: "0.5rem" } })
              });
            }
          ).with({ state: import_react_sdk126.HMSTranscriptionState.STARTED }, () => {
            id = ToastManager.replaceToast(toastId, {
              title: `Closed Captioning enabled for everyone`,
              variant: "standard",
              duration: 2e3,
              icon: /* @__PURE__ */ import_react237.default.createElement(import_react_icons110.ClosedCaptionIcon, { style: { marginRight: "0.5rem" } })
            });
          }).with({ state: import_react_sdk126.HMSTranscriptionState.STOPPED }, () => {
            id = ToastManager.replaceToast(toastId, {
              title: `Closed Captioning disabled for everyone`,
              variant: "standard",
              duration: 2e3,
              icon: /* @__PURE__ */ import_react237.default.createElement(import_react_icons110.OpenCaptionIcon, { style: { marginRight: "0.5rem" } })
            });
          }).otherwise(() => null);
          setToastId(id);
        }
      }, [notification, setToastId]);
      return null;
    };
  }
});

// src/Prebuilt/components/Notifications/Notifications.tsx
function Notifications() {
  const localPeerID = (0, import_react_sdk127.useHMSStore)(import_react_sdk127.selectLocalPeerID);
  const notification = (0, import_react_sdk127.useHMSNotifications)();
  const subscribedNotifications = useSubscribedNotifications() || {};
  const roomState = (0, import_react_sdk127.useHMSStore)(import_react_sdk127.selectRoomState);
  const updateRoomLayoutForRole = useUpdateRoomLayout();
  const isNotificationDisabled = useIsNotificationDisabled();
  const screenProps = useRoomLayoutConferencingScreen();
  const vanillaStore = (0, import_react_sdk127.useHMSVanillaStore)();
  const togglePollView = usePollViewToggle();
  const { showNotification } = (0, import_react_sdk127.useAwayNotifications)();
  const amIScreenSharing = (0, import_react_sdk127.useHMSStore)(import_react_sdk127.selectIsLocalScreenShared);
  const logoURL = useRoomLayout()?.logo?.url;
  const { pipWindow } = usePIPWindow();
  const handleRoleChangeDenied = (0, import_react238.useCallback)((request) => {
    ToastManager.addToast({
      title: `${request.peerName} denied your request to join the ${request.role.name} role`,
      variant: "error"
    });
  }, []);
  (0, import_react_sdk127.useCustomEvent)({ type: ROLE_CHANGE_DECLINED, onEvent: handleRoleChangeDenied });
  (0, import_react238.useEffect)(() => {
    if (!notification || isNotificationDisabled) {
      return;
    }
    switch (notification.type) {
      case import_react_sdk127.HMSNotificationTypes.NAME_UPDATED:
        console.log(notification.data.id + " changed their name to " + notification.data.name);
        break;
      case import_react_sdk127.HMSNotificationTypes.ERROR:
        if (notification.data?.isTerminal && notification.data?.action !== "INIT") {
          if ([500, 6008].includes(notification.data?.code)) {
            ToastManager.addToast({
              title: `Error: ${notification.data?.message}`
            });
          } else if (notification.data?.message === "role limit reached") {
            ToastManager.addToast({
              title: "The room is currently full, try joining later",
              close: true,
              icon: /* @__PURE__ */ import_react238.default.createElement(Box, { css: { color: "$alert_error_default" } }, /* @__PURE__ */ import_react238.default.createElement(import_react_icons111.GroupIcon, null))
            });
          } else {
            ToastManager.addToast({
              title: notification.data?.message || "We couldn\u2019t reconnect you. When you\u2019re back online, try joining the room.",
              close: false
            });
          }
          return;
        }
        if (notification.data?.code === 3008 || notification.data?.code === 3001 || notification.data?.code === 3011) {
          return;
        }
        if (notification.data?.action === "INIT") {
          return;
        }
        if (!subscribedNotifications.ERROR) return;
        ToastManager.addToast({
          title: `Error: ${notification.data?.message} - ${notification.data?.description}`
        });
        break;
      case import_react_sdk127.HMSNotificationTypes.ROLE_UPDATED: {
        if (notification.data?.isLocal && notification.data?.roleName) {
          ToastManager.addToast({
            title: `You are now a ${notification.data.roleName}`
          });
          updateRoomLayoutForRole?.(notification.data.roleName);
        }
        break;
      }
      case import_react_sdk127.HMSNotificationTypes.CHANGE_TRACK_STATE_REQUEST:
        const track = notification.data?.track;
        if (!notification.data.enabled) {
          ToastManager.addToast({
            title: `Your ${track.source} ${track.type} was muted by
                ${notification.data.requestedBy?.name}.`
          });
        }
        break;
      case import_react_sdk127.HMSNotificationTypes.REMOVED_FROM_ROOM:
      case import_react_sdk127.HMSNotificationTypes.ROOM_ENDED:
        ToastManager.addToast({
          title: `${notification.message}. 
              ${notification.data.reason && `Reason: ${notification.data.reason}`}`
        });
        break;
      case import_react_sdk127.HMSNotificationTypes.DEVICE_CHANGE_UPDATE:
        ToastManager.addToast({
          title: notification.message
        });
        break;
      case import_react_sdk127.HMSNotificationTypes.POLL_STARTED:
        if (notification.data.startedBy !== localPeerID && screenProps.screenType !== "hls_live_streaming") {
          const pollStartedBy = vanillaStore.getState((0, import_react_sdk127.selectPeerNameByID)(notification.data.startedBy)) || "Participant";
          const pollToastID = ToastManager.addToast({
            title: `${pollStartedBy} started a ${notification.data.type}: ${notification.data.title}`,
            action: /* @__PURE__ */ import_react238.default.createElement(
              Button,
              {
                onClick: () => togglePollView(notification.data.id),
                variant: "standard",
                css: {
                  backgroundColor: "$surface_bright",
                  fontWeight: "$semiBold",
                  color: "$on_surface_high",
                  p: "$xs $md"
                }
              },
              notification.data.type === "quiz" ? "Answer" : "Vote"
            ),
            duration: Infinity
          });
          pollToastKey[notification.data.id] = pollToastID;
        }
        break;
      case import_react_sdk127.HMSNotificationTypes.POLL_STOPPED:
        const pollID = notification?.data.id;
        if (pollID && pollToastKey?.[pollID]) {
          ToastManager.removeToast(pollToastKey?.[notification.data.id]);
          delete pollToastKey[notification?.data.id];
        }
        break;
      case import_react_sdk127.HMSNotificationTypes.NEW_MESSAGE:
        if (amIScreenSharing && !notification.data?.ignored && !pipWindow) {
          showNotification(`New message from ${notification.data.senderName}`, {
            body: notification.data.message,
            icon: logoURL
          });
        }
        break;
      default:
        break;
    }
  }, [notification, subscribedNotifications.ERROR, subscribedNotifications.METADATA_UPDATED]);
  if (isNotificationDisabled) {
    return null;
  }
  return /* @__PURE__ */ import_react238.default.createElement(import_react238.default.Fragment, null, /* @__PURE__ */ import_react238.default.createElement(TrackUnmuteModal, null), /* @__PURE__ */ import_react238.default.createElement(TrackBulkUnmuteModal, null), /* @__PURE__ */ import_react238.default.createElement(TrackNotifications, null), roomState === import_react_sdk127.HMSRoomState.Connected ? /* @__PURE__ */ import_react238.default.createElement(PeerNotifications, null) : null, /* @__PURE__ */ import_react238.default.createElement(ReconnectNotifications, null), /* @__PURE__ */ import_react238.default.createElement(AutoplayBlockedModal, null), /* @__PURE__ */ import_react238.default.createElement(PermissionErrorNotificationModal, null), /* @__PURE__ */ import_react238.default.createElement(InitErrorModal, null), /* @__PURE__ */ import_react238.default.createElement(ChatNotifications, null), /* @__PURE__ */ import_react238.default.createElement(HandRaisedNotifications, null), /* @__PURE__ */ import_react238.default.createElement(TranscriptionNotifications, null));
}
var import_react238, import_react_sdk127, import_react_icons111, pollToastKey;
var init_Notifications = __esm({
  "src/Prebuilt/components/Notifications/Notifications.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react238 = __toESM(require("react"));
    import_react_sdk127 = require("@100mslive/react-sdk");
    import_react_icons111 = require("@100mslive/react-icons");
    init_src();
    init_roomLayoutProvider();
    init_ToastManager();
    init_AutoplayBlockedModal();
    init_ChatNotifications();
    init_HandRaisedNotifications();
    init_InitErrorModal();
    init_PeerNotifications();
    init_PermissionErrorModal();
    init_ReconnectNotifications();
    init_TrackBulkUnmuteModal();
    init_TrackNotifications();
    init_TrackUnmuteModal();
    init_TranscriptionNotifications();
    init_useRoomLayoutScreen();
    init_useSidepane();
    init_useUISettings();
    init_usePIPWindow();
    init_constants();
    pollToastKey = {};
  }
});

// src/Prebuilt/components/Notifications/index.tsx
var init_Notifications2 = __esm({
  "src/Prebuilt/components/Notifications/index.tsx"() {
    "use strict";
    init_cjs_shims();
    init_Notifications();
  }
});

// src/Prebuilt/components/PIP/PIPProvider.tsx
var import_react239, PIPProvider;
var init_PIPProvider = __esm({
  "src/Prebuilt/components/PIP/PIPProvider.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react239 = __toESM(require("react"));
    init_context();
    PIPProvider = ({ children }) => {
      const isSupported = "documentPictureInPicture" in window;
      const [pipWindow, setPipWindow] = (0, import_react239.useState)(null);
      const closePipWindow = (0, import_react239.useCallback)(() => {
        if (pipWindow != null) {
          pipWindow.close();
          setPipWindow(null);
        }
      }, [pipWindow]);
      const requestPipWindow = (0, import_react239.useCallback)(
        async (width, height) => {
          if (pipWindow != null) {
            return;
          }
          const pip = await window.documentPictureInPicture.requestWindow({
            width,
            height
          });
          pip.addEventListener("pagehide", () => {
            setPipWindow(null);
          });
          setPipWindow(pip);
        },
        [pipWindow]
      );
      const value = (0, import_react239.useMemo)(() => {
        return {
          isSupported,
          pipWindow,
          requestPipWindow,
          closePipWindow
        };
      }, [closePipWindow, isSupported, pipWindow, requestPipWindow]);
      return /* @__PURE__ */ import_react239.default.createElement(PIPContext.Provider, { value }, children);
    };
  }
});

// src/Prebuilt/components/Preview/PreviewScreen.tsx
var import_react240, import_react_use59, PreviewScreen;
var init_PreviewScreen = __esm({
  "src/Prebuilt/components/Preview/PreviewScreen.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react240 = __toESM(require("react"));
    import_react_use59 = require("react-use");
    init_src();
    init_AppContext();
    init_roomLayoutProvider();
    init_FullPageProgress();
    init_PreviewJoin();
    init_useRoomLayoutScreen();
    init_useUISettings();
    init_constants();
    PreviewScreen = () => {
      const { isPreviewScreenEnabled } = useRoomLayoutPreviewScreen();
      const skipPreview = !isPreviewScreenEnabled;
      const previewAsRole = (0, import_react_use59.useSearchParam)(QUERY_PARAM_PREVIEW_AS_ROLE);
      const { userName } = useHMSPrebuiltContext();
      const initialName = userName || (skipPreview ? "Beam" : "");
      const authToken = useAuthToken();
      const roomLayout = useRoomLayout();
      const { preview_header: previewHeader = {} } = roomLayout?.screens?.preview?.default?.elements || {};
      return /* @__PURE__ */ import_react240.default.createElement(Flex, { direction: "column", css: { size: "100%" } }, /* @__PURE__ */ import_react240.default.createElement(
        Flex,
        {
          css: { flex: "1 1 0", position: "relative", overflowY: "auto", color: "$primary_default" },
          justify: "center",
          align: "center"
        },
        authToken && Object.keys(previewHeader).length > 0 ? /* @__PURE__ */ import_react240.default.createElement(PreviewJoin_default, { initialName, skipPreview, asRole: previewAsRole ?? void 0 }) : /* @__PURE__ */ import_react240.default.createElement(FullPageProgress_default, null)
      ));
    };
  }
});

// src/Prebuilt/components/Toast/Toast.jsx
var import_react241, Toast2;
var init_Toast3 = __esm({
  "src/Prebuilt/components/Toast/Toast.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react241 = __toESM(require("react"));
    init_Toast2();
    Toast2 = ({ title, description, close = true, open, duration, onOpenChange, icon, ...props }) => {
      return /* @__PURE__ */ import_react241.default.createElement(
        Toast.HMSToast,
        {
          title,
          description,
          open,
          isClosable: close,
          onOpenChange,
          duration: !close ? 6e5 : duration,
          icon,
          ...props
        }
      );
    };
  }
});

// src/Prebuilt/components/Toast/ToastContainer.jsx
var import_react242, import_react_sdk128, ToastContainer;
var init_ToastContainer = __esm({
  "src/Prebuilt/components/Toast/ToastContainer.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react242 = __toESM(require("react"));
    import_react_sdk128 = require("@100mslive/react-sdk");
    init_Toast2();
    init_Toast3();
    init_ToastManager();
    init_constants();
    ToastContainer = () => {
      const isConnected = (0, import_react_sdk128.useHMSStore)(import_react_sdk128.selectIsConnectedToRoom);
      const [toasts, setToast] = (0, import_react242.useState)([]);
      (0, import_react242.useEffect)(() => {
        ToastManager.addListener(setToast);
        return () => {
          ToastManager.removeListener(setToast);
        };
      }, []);
      return /* @__PURE__ */ import_react242.default.createElement(Toast.Provider, { swipeDirection: "left", duration: 3e3 }, toasts.slice(0, MAX_TOASTS).map((toast) => {
        return /* @__PURE__ */ import_react242.default.createElement(Toast2, { key: toast.id, ...toast, onOpenChange: (value) => !value && ToastManager.removeToast(toast.id) });
      }), /* @__PURE__ */ import_react242.default.createElement(
        Toast.Viewport,
        {
          css: {
            position: "absolute",
            ...!isConnected ? {} : { bottom: "$24" }
          }
        }
      ));
    };
  }
});

// src/Prebuilt/components/RoomDetails/RoomDetailsSheet.tsx
var import_react243, import_react_icons112, RoomDetailsSheet;
var init_RoomDetailsSheet = __esm({
  "src/Prebuilt/components/RoomDetails/RoomDetailsSheet.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react243 = __toESM(require("react"));
    import_react_icons112 = require("@100mslive/react-icons");
    init_Layout();
    init_Sheet2();
    init_Text2();
    init_HeaderComponents();
    init_RoomDetailsRow();
    init_useRoomLayoutScreen();
    init_useSheet();
    init_constants();
    RoomDetailsSheet = () => {
      const { title, description, details } = useRoomLayoutHeader();
      const toggleSheet = useSheetToggle(SHEET_OPTIONS.ROOM_DETAILS);
      const showRoomDetailsSheet = useIsSheetTypeOpen(SHEET_OPTIONS.ROOM_DETAILS);
      return /* @__PURE__ */ import_react243.default.createElement(Sheet.Root, { open: showRoomDetailsSheet, onOpenChange: toggleSheet }, /* @__PURE__ */ import_react243.default.createElement(Sheet.Content, { css: { py: "$8", pb: "$12" } }, /* @__PURE__ */ import_react243.default.createElement(
        Flex,
        {
          justify: "between",
          align: "center",
          css: { w: "100%", borderBottom: "1px solid $border_bright", pb: "$4", mb: "$4", px: "$8" }
        },
        /* @__PURE__ */ import_react243.default.createElement(Text, { css: { fontWeight: "$semiBold", color: "$on_surface_high" } }, "Description"),
        /* @__PURE__ */ import_react243.default.createElement(Sheet.Close, { css: { color: "$on_surface_high" } }, /* @__PURE__ */ import_react243.default.createElement(import_react_icons112.CrossIcon, null))
      ), /* @__PURE__ */ import_react243.default.createElement(Flex, { align: "center", css: { w: "100%", gap: "$4", pb: "$8", px: "$8" } }, /* @__PURE__ */ import_react243.default.createElement(Logo, null), /* @__PURE__ */ import_react243.default.createElement(Box, null, /* @__PURE__ */ import_react243.default.createElement(Text, { variant: "sm", css: { c: "$on_secondary_high", fontWeight: "$semiBold" } }, title), /* @__PURE__ */ import_react243.default.createElement(RoomDetailsRow, { details }))), /* @__PURE__ */ import_react243.default.createElement(Text, { variant: "sm", css: { color: "$on_surface_medium", px: "$8" } }, description)));
    };
  }
});

// src/Prebuilt/layouts/Sheet.tsx
var import_react244, import_react_sdk129, Sheet2;
var init_Sheet3 = __esm({
  "src/Prebuilt/layouts/Sheet.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react244 = __toESM(require("react"));
    import_react_sdk129 = require("@100mslive/react-sdk");
    init_RoomDetailsSheet();
    init_Layout();
    init_constants();
    Sheet2 = () => {
      const sheet = (0, import_react_sdk129.useHMSStore)((0, import_react_sdk129.selectAppData)(APP_DATA.sheet));
      let ViewComponent;
      if (sheet === SHEET_OPTIONS.ROOM_DETAILS) {
        ViewComponent = /* @__PURE__ */ import_react244.default.createElement(RoomDetailsSheet, null);
      }
      return /* @__PURE__ */ import_react244.default.createElement(Box, null, ViewComponent);
    };
  }
});

// src/Prebuilt/plugins/FlyingEmoji.jsx
function FlyingEmoji() {
  const localPeerId = (0, import_react_sdk130.useHMSStore)(import_react_sdk130.selectLocalPeerID);
  const vanillaStore = (0, import_react_sdk130.useHMSVanillaStore)();
  const hmsActions = (0, import_react_sdk130.useHMSActions)();
  const [emojis, setEmojis] = (0, import_react245.useState)([]);
  const isMobile = (0, import_react_use60.useMedia)(config.media.md);
  const isLargeRoom = (0, import_react_sdk130.useHMSStore)(import_react_sdk130.selectIsLargeRoom);
  const startingPoints = (0, import_react245.useMemo)(() => getStartingPoints(isMobile), [isMobile]);
  const showFlyingEmoji = (0, import_react245.useCallback)(
    async ({ emojiId, senderId }) => {
      if (!emojiId || !senderId || document.hidden) {
        return;
      }
      let senderPeerName = vanillaStore.getState((0, import_react_sdk130.selectPeerNameByID)(senderId));
      if (!senderPeerName && isLargeRoom) {
        const sender = await hmsActions.getPeer(senderId);
        senderPeerName = sender?.name;
      }
      const nameToShow = localPeerId === senderId ? "You" : senderPeerName;
      const startingPoint = startingPoints[emojiCount % startingPoints.length];
      const id = emojiCount++;
      setEmojis((emojis2) => {
        return [
          ...emojis2,
          {
            id,
            emojiId,
            senderName: nameToShow,
            startingPoint: `${startingPoint}%`,
            wiggleType: Math.random() < 0.5 ? 0 : 1
          }
        ];
      });
    },
    [vanillaStore, isLargeRoom, localPeerId, startingPoints, hmsActions]
  );
  (0, import_react_sdk130.useCustomEvent)({
    type: EMOJI_REACTION_TYPE,
    onEvent: showFlyingEmoji
  });
  (0, import_react245.useEffect)(() => {
    window.showFlyingEmoji = showFlyingEmoji;
  }, [showFlyingEmoji]);
  return /* @__PURE__ */ import_react245.default.createElement(
    Box,
    {
      css: {
        position: "absolute",
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        overflow: "hidden",
        pointerEvents: "none",
        userSelect: "none",
        zIndex: 999
      }
    },
    emojis.map((emoji) => {
      return /* @__PURE__ */ import_react245.default.createElement(
        Flex,
        {
          key: emoji.id,
          css: {
            left: emoji.startingPoint,
            flexDirection: "column",
            alignItems: "center",
            position: "absolute",
            bottom: 0,
            animation: `${flyAndFade()} 5s forwards, ${emoji.wiggleType === 0 ? wiggleLeftRight() : wiggleRightLeft()} 1s ease-in-out infinite alternate`
          },
          onAnimationEnd: () => setEmojis(emojis.filter((item) => item.id !== emoji.id))
        },
        /* @__PURE__ */ import_react245.default.createElement(Box, null, /* @__PURE__ */ import_react245.default.createElement("em-emoji", { id: emoji.emojiId, size: "48px", set: "apple" })),
        emoji.senderName ? /* @__PURE__ */ import_react245.default.createElement(
          Box,
          {
            css: {
              width: "fit-content",
              padding: "$2 $4",
              background: "$surface_bright",
              borderRadius: "$1"
            }
          },
          /* @__PURE__ */ import_react245.default.createElement(
            Text,
            {
              css: {
                fontSize: "$space$6",
                lineHeight: "$xs",
                color: "$on_surface_high"
              }
            },
            emoji.senderName
          )
        ) : ""
      );
    })
  );
}
var import_react245, import_react_use60, import_react_sdk130, emojiCount, flyAndFade, wiggleLeftRight, wiggleRightLeft, getStartingPoints;
var init_FlyingEmoji = __esm({
  "src/Prebuilt/plugins/FlyingEmoji.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react245 = __toESM(require("react"));
    import_react_use60 = require("react-use");
    import_react_sdk130 = require("@100mslive/react-sdk");
    init_Layout();
    init_Text2();
    init_Theme();
    init_constants();
    emojiCount = 1;
    flyAndFade = keyframes({
      "20%": { opacity: 1 },
      "100%": { bottom: "60%", opacity: 0 }
    });
    wiggleLeftRight = keyframes({
      "0%": { marginLeft: "-50px" },
      "100%": { marginLeft: "50px" }
    });
    wiggleRightLeft = keyframes({
      "0%": { marginLeft: "50px" },
      "100%": { marginLeft: "-50px" }
    });
    getStartingPoints = (isMobile) => {
      let arr = [];
      const min = 5;
      const max = isMobile ? 30 : 20;
      const inc = isMobile ? 8 : 5;
      for (let i = min; i <= max; i += inc) {
        arr.push(i);
      }
      return arr;
    };
  }
});

// src/Prebuilt/plugins/RemoteStopScreenshare.jsx
function RemoteStopScreenshare() {
  const actions = (0, import_react_sdk131.useHMSActions)();
  const onRemoteStopScreenshare = (0, import_react246.useCallback)(async () => {
    await actions.setScreenShareEnabled(false);
  }, [actions]);
  (0, import_react_sdk131.useCustomEvent)({
    type: REMOTE_STOP_SCREENSHARE_TYPE,
    onEvent: onRemoteStopScreenshare
  });
  return /* @__PURE__ */ import_react246.default.createElement(import_react246.default.Fragment, null);
}
var import_react246, import_react_sdk131;
var init_RemoteStopScreenshare = __esm({
  "src/Prebuilt/plugins/RemoteStopScreenshare.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react246 = __toESM(require("react"));
    import_react_sdk131 = require("@100mslive/react-sdk");
    init_constants();
  }
});

// src/Prebuilt/components/hooks/useAutoStartStreaming.tsx
var import_react247, import_react_sdk132, useAutoStartStreaming;
var init_useAutoStartStreaming = __esm({
  "src/Prebuilt/components/hooks/useAutoStartStreaming.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react247 = require("react");
    import_react_sdk132 = require("@100mslive/react-sdk");
    init_useUISettings();
    init_hooks();
    init_constants();
    useAutoStartStreaming = () => {
      const [isHLSStarted, setHLSStarted] = useSetAppDataByKey(APP_DATA.hlsStarted);
      const permissions = (0, import_react_sdk132.useHMSStore)(import_react_sdk132.selectPermissions);
      const showStreamingUI = useShowStreamingUI();
      const hmsActions = (0, import_react_sdk132.useHMSActions)();
      const isConnected = (0, import_react_sdk132.useHMSStore)(import_react_sdk132.selectIsConnectedToRoom);
      const { isHLSRunning, isRTMPRunning, isHLSRecordingOn, isBrowserRecordingOn } = (0, import_react_sdk132.useRecordingStreaming)();
      const streamStartedRef = (0, import_react247.useRef)(false);
      const startHLS = (0, import_react247.useCallback)(async () => {
        try {
          if (isHLSStarted || !showStreamingUI || isHLSRunning || isRTMPRunning || isHLSRecordingOn || isBrowserRecordingOn) {
            return;
          }
          setHLSStarted(true);
          streamStartedRef.current = true;
          await hmsActions.startHLSStreaming();
        } catch (error) {
          console.error(error);
          streamStartedRef.current = false;
          setHLSStarted(false);
        }
      }, [
        hmsActions,
        isHLSRunning,
        isHLSStarted,
        setHLSStarted,
        showStreamingUI,
        isRTMPRunning,
        isHLSRecordingOn,
        isBrowserRecordingOn
      ]);
      (0, import_react247.useEffect)(() => {
        if (!isHLSStarted && !isHLSRunning) {
          streamStartedRef.current = false;
        }
      }, [isHLSStarted, isHLSRunning]);
      (0, import_react247.useEffect)(() => {
        if (!isConnected || streamStartedRef.current || !permissions?.hlsStreaming) {
          return;
        }
        startHLS();
      }, [isConnected]);
    };
  }
});

// src/Prebuilt/App.tsx
function AppRoutes({
  authTokenByRoomCodeEndpoint,
  defaultAuthToken
}) {
  const roomLayout = useRoomLayout();
  const isNotificationsDisabled = useIsNotificationDisabled();
  const { activeState, rejoin } = useAppStateManager();
  return /* @__PURE__ */ import_react248.default.createElement(AppStateContext.Provider, { value: { rejoin } }, /* @__PURE__ */ import_react248.default.createElement(import_react248.default.Fragment, null, activeState !== "leave" /* LEAVE */ && /* @__PURE__ */ import_react248.default.createElement(AppData, null), /* @__PURE__ */ import_react248.default.createElement(ToastContainer, null), /* @__PURE__ */ import_react248.default.createElement(Notifications, null), /* @__PURE__ */ import_react248.default.createElement(MwebLandscapePrompt, null), /* @__PURE__ */ import_react248.default.createElement(Sheet2, null), /* @__PURE__ */ import_react248.default.createElement(BackSwipe, null), !isNotificationsDisabled && /* @__PURE__ */ import_react248.default.createElement(FlyingEmoji, null), /* @__PURE__ */ import_react248.default.createElement(RemoteStopScreenshare, null), /* @__PURE__ */ import_react248.default.createElement(KeyboardHandler, null), /* @__PURE__ */ import_react248.default.createElement(
    AuthToken_default,
    {
      authTokenByRoomCodeEndpoint,
      defaultAuthToken,
      activeState
    }
  ), roomLayout && activeState && /* @__PURE__ */ import_react248.default.createElement(AppStates, { activeState })));
}
var import_react248, import_ts_pattern17, import_react_sdk133, HMSPrebuilt, AppStates, BackSwipe;
var init_App = __esm({
  "src/Prebuilt/App.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react248 = __toESM(require("react"));
    import_ts_pattern17 = require("ts-pattern");
    import_react_sdk133 = require("@100mslive/react-sdk");
    init_AppData();
    init_AuthToken();
    init_ConferenceScreen();
    init_ErrorBoundary();
    init_Init();
    init_KeyboardInputManager();
    init_LeaveScreen();
    init_MwebLandscapePrompt();
    init_Notifications2();
    init_PIPProvider();
    init_PreviewScreen();
    init_ToastContainer();
    init_VBHandler();
    init_Sheet3();
    init_roomLayoutProvider();
    init_DialogContext();
    init_Layout();
    init_Theme();
    init_AppContext();
    init_AppStateContext();
    init_FlyingEmoji();
    init_RemoteStopScreenshare();
    init_useUISettings();
    init_useAutoStartStreaming();
    init_useRoomLayoutScreen();
    init_FeatureFlags();
    init_constants();
    HMSPrebuilt = import_react248.default.forwardRef(
      ({
        roomCode = "",
        authToken = "",
        containerSelector = DEFAULT_PORTAL_CONTAINER,
        logo,
        typography,
        themes,
        options: { userName = "", userId = "", endpoints } = {},
        screens,
        leaveOnUnload = true,
        onLeave,
        onJoin
      }, ref) => {
        const reactiveStore = (0, import_react248.useRef)();
        const [hydrated, setHydrated] = import_react248.default.useState(false);
        (0, import_react248.useEffect)(() => {
          setHydrated(true);
          const hms = new import_react_sdk133.HMSReactiveStore();
          const hmsStore = hms.getStore();
          const hmsActions = hms.getActions();
          const hmsNotifications = hms.getNotifications();
          const hmsStats = hms.getStats();
          hms.triggerOnSubscribe();
          reactiveStore.current = {
            hmsActions,
            hmsStats,
            hmsStore,
            hmsNotifications
          };
        }, []);
        (0, import_react248.useEffect)(() => {
          if (!ref || !reactiveStore.current) {
            return;
          }
          ref.current = { ...reactiveStore.current };
        }, [ref]);
        (0, import_react248.useEffect)(() => {
          return () => {
            VBHandler.reset();
            reactiveStore?.current?.hmsActions.leave();
          };
        }, []);
        const endpointsObj = endpoints;
        const tokenByRoomCodeEndpoint = endpointsObj?.tokenByRoomCode || "";
        const initEndpoint = endpointsObj?.init || "";
        const eventEndpoint = endpointsObj?.event || "";
        const roomLayoutEndpoint = endpointsObj?.roomLayout || "";
        const overrideLayout = {
          logo,
          themes,
          typography,
          screens
        };
        if (!roomCode && !authToken) {
          console.error(`
          HMSPrebuilt can be initialised by providing: 
          either "roomCode" or "authToken".
          Please check if you are providing the above values for initialising prebuilt.
        `);
          throw Error("Incorrect initializing params for HMSPrebuilt component");
        }
        if (!hydrated) {
          return null;
        }
        globalStyles();
        return /* @__PURE__ */ import_react248.default.createElement(ErrorBoundary, null, /* @__PURE__ */ import_react248.default.createElement(
          HMSPrebuiltContext.Provider,
          {
            value: {
              roomCode,
              containerSelector,
              onLeave,
              onJoin,
              userName,
              userId,
              endpoints: {
                tokenByRoomCode: tokenByRoomCodeEndpoint,
                init: initEndpoint,
                roomLayout: roomLayoutEndpoint,
                event: eventEndpoint
              }
            }
          },
          /* @__PURE__ */ import_react248.default.createElement(
            import_react_sdk133.HMSRoomProvider,
            {
              isHMSStatsOn: FeatureFlags.enableStatsForNerds,
              actions: reactiveStore.current?.hmsActions,
              store: reactiveStore.current?.hmsStore,
              notifications: reactiveStore.current?.hmsNotifications,
              stats: reactiveStore.current?.hmsStats,
              leaveOnUnload
            },
            /* @__PURE__ */ import_react248.default.createElement(RoomLayoutProvider, { roomLayoutEndpoint, overrideLayout }, /* @__PURE__ */ import_react248.default.createElement(RoomLayoutContext.Consumer, null, (data3) => {
              const layout = data3?.layout;
              const theme2 = layout?.themes?.[0] || {};
              const { typography: typography2 } = layout || {};
              let fontFamily = ["sans-serif"];
              if (typography2?.font_family) {
                fontFamily = [`${typography2?.font_family}`, ...fontFamily];
              }
              return /* @__PURE__ */ import_react248.default.createElement(
                HMSThemeProvider,
                {
                  themeType: `${theme2.name}-${Date.now()}`,
                  theme: {
                    //@ts-ignore: Prebuilt theme to match stiches theme
                    colors: theme2.palette,
                    fonts: {
                      //@ts-ignore: font list to match token types of stiches
                      sans: fontFamily
                    }
                  }
                },
                /* @__PURE__ */ import_react248.default.createElement(PIPProvider, null, /* @__PURE__ */ import_react248.default.createElement(Init, null), /* @__PURE__ */ import_react248.default.createElement(DialogContainerProvider, { dialogContainerSelector: containerSelector }, /* @__PURE__ */ import_react248.default.createElement(
                  Box,
                  {
                    className: DEFAULT_PORTAL_CONTAINER.slice(1),
                    css: {
                      bg: "$background_dim",
                      size: "100%",
                      lineHeight: "1.5",
                      "-webkit-text-size-adjust": "100%",
                      position: "relative"
                    }
                  },
                  /* @__PURE__ */ import_react248.default.createElement(
                    AppRoutes,
                    {
                      authTokenByRoomCodeEndpoint: tokenByRoomCodeEndpoint,
                      defaultAuthToken: authToken
                    }
                  )
                )))
              );
            }))
          )
        ));
      }
    );
    HMSPrebuilt.displayName = "HMSPrebuilt";
    AppStates = ({ activeState }) => {
      const { isPreviewScreenEnabled } = useRoomLayoutPreviewScreen();
      const { isLeaveScreenEnabled } = useRoomLayoutLeaveScreen();
      useAutoStartStreaming();
      return (0, import_ts_pattern17.match)({ activeState, isPreviewScreenEnabled, isLeaveScreenEnabled }).with({ activeState: "preview" /* PREVIEW */, isPreviewScreenEnabled: true }, () => /* @__PURE__ */ import_react248.default.createElement(PreviewScreen, null)).with({ activeState: "leave" /* LEAVE */, isLeaveScreenEnabled: true }, () => /* @__PURE__ */ import_react248.default.createElement(LeaveScreen, null)).otherwise(() => /* @__PURE__ */ import_react248.default.createElement(ConferenceScreen, null));
    };
    BackSwipe = () => {
      const isConnectedToRoom = (0, import_react_sdk133.useHMSStore)(import_react_sdk133.selectIsConnectedToRoom);
      const hmsActions = (0, import_react_sdk133.useHMSActions)();
      (0, import_react248.useEffect)(() => {
        const onRouteLeave = async () => {
          if (isConnectedToRoom) {
            await hmsActions.leave();
          }
        };
        window.addEventListener("popstate", onRouteLeave);
        return () => {
          window.removeEventListener("popstate", onRouteLeave);
        };
      }, [hmsActions, isConnectedToRoom]);
      return null;
    };
  }
});

// src/Prebuilt/index.ts
var init_Prebuilt = __esm({
  "src/Prebuilt/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_App();
  }
});

// src/Progress/index.tsx
var import_react_progress, StyledIndicator, StyledRoot2, Progress;
var init_Progress = __esm({
  "src/Progress/index.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react_progress = require("@radix-ui/react-progress");
    init_Theme();
    StyledIndicator = styled(import_react_progress.Indicator, { h: "$4", backgroundColor: "$primary_default" });
    StyledRoot2 = styled(import_react_progress.Root, {
      w: "100%",
      h: "$4",
      borderRadius: "$round",
      backgroundColor: "$secondary_dim",
      overflow: "hidden"
    });
    Progress = {
      Root: StyledRoot2,
      Content: StyledIndicator
    };
  }
});

// src/Diagnostics/DiagnosticsContext.ts
var import_react249, DiagnosticsStep, initialSteps, DiagnosticsContext, useDiagnostics;
var init_DiagnosticsContext = __esm({
  "src/Diagnostics/DiagnosticsContext.ts"() {
    "use strict";
    init_cjs_shims();
    import_react249 = __toESM(require("react"));
    DiagnosticsStep = /* @__PURE__ */ ((DiagnosticsStep2) => {
      DiagnosticsStep2[DiagnosticsStep2["BROWSER"] = 0] = "BROWSER";
      DiagnosticsStep2[DiagnosticsStep2["VIDEO"] = 1] = "VIDEO";
      DiagnosticsStep2[DiagnosticsStep2["AUDIO"] = 2] = "AUDIO";
      DiagnosticsStep2[DiagnosticsStep2["CONNECTIVITY"] = 3] = "CONNECTIVITY";
      return DiagnosticsStep2;
    })(DiagnosticsStep || {});
    initialSteps = {
      [0 /* BROWSER */]: { name: "Browser Support" },
      [1 /* VIDEO */]: { name: "Test Video" },
      [2 /* AUDIO */]: { name: "Test Audio" },
      [3 /* CONNECTIVITY */]: { name: "Connection Quality" }
    };
    DiagnosticsContext = import_react249.default.createContext({
      activeStepIndex: 0,
      setActiveStep: () => {
        return;
      },
      steps: initialSteps,
      updateStep: () => {
        return;
      }
    });
    useDiagnostics = () => {
      const context = (0, import_react249.useContext)(DiagnosticsContext);
      const activeStep = context.steps[context.activeStepIndex];
      return { ...context, activeStep };
    };
  }
});

// src/Diagnostics/components.tsx
var import_react250, TestContainer, TestFooter;
var init_components = __esm({
  "src/Diagnostics/components.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react250 = __toESM(require("react"));
    init_Button2();
    init_Layout();
    init_Text2();
    init_DiagnosticsContext();
    TestContainer = ({ css: css2, children }) => {
      return /* @__PURE__ */ import_react250.default.createElement(Box, { css: { p: "$10", ...css2 } }, children);
    };
    TestFooter = ({
      error,
      ctaText,
      children
    }) => {
      const { hmsDiagnostics, activeStepIndex: activeStep, setActiveStep } = useDiagnostics();
      const onNextStep = () => {
        if (activeStep === 2 /* AUDIO */) {
          hmsDiagnostics?.stopMicCheck();
        } else if (activeStep === 1 /* VIDEO */) {
          hmsDiagnostics?.stopCameraCheck();
        } else if (activeStep === 3 /* CONNECTIVITY */) {
          hmsDiagnostics?.stopConnectivityCheck();
        }
        setActiveStep((step) => step + 1);
      };
      return /* @__PURE__ */ import_react250.default.createElement(
        Flex,
        {
          css: {
            py: "$8",
            px: "$10",
            background: "$background_dim",
            justifyContent: "space-between",
            alignItems: "center",
            borderTop: "1px solid $border_default",
            fontSize: "$sm",
            borderBottomLeftRadius: "$1",
            borderBottomRightRadius: "$1",
            lineHeight: "$sm",
            zIndex: 1001,
            "@lg": { flexDirection: "column", gap: "$8" }
          }
        },
        /* @__PURE__ */ import_react250.default.createElement(Box, null, error && /* @__PURE__ */ import_react250.default.createElement(Text, { css: { c: "$alert_error_default" } }, "Error: ", error.message)),
        children ? children : /* @__PURE__ */ import_react250.default.createElement(Flex, { align: "center", css: { gap: "$8", "@lg": { flexDirection: "column" } } }, /* @__PURE__ */ import_react250.default.createElement(Text, { css: { c: "$on_primary_medium" } }, ctaText), /* @__PURE__ */ import_react250.default.createElement(Flex, { align: "center", gap: "4" }, /* @__PURE__ */ import_react250.default.createElement(Button, { onClick: onNextStep, variant: "standard", outlined: true }, "Skip"), /* @__PURE__ */ import_react250.default.createElement(Button, { disabled: !!error, onClick: onNextStep }, "Yes")))
      );
    };
  }
});

// src/Diagnostics/DeviceSelector.jsx
var import_react251, import_prop_types, DeviceSelector2;
var init_DeviceSelector = __esm({
  "src/Diagnostics/DeviceSelector.jsx"() {
    "use strict";
    init_cjs_shims();
    import_react251 = __toESM(require("react"));
    import_prop_types = __toESM(require("prop-types"));
    init_Dropdown2();
    init_Layout();
    init_DropdownTrigger();
    init_Text2();
    DeviceSelector2 = ({ title, devices, selection, onChange, icon, children = null }) => {
      const [open, setOpen] = (0, import_react251.useState)(false);
      const ref = (0, import_react251.useRef)(null);
      return /* @__PURE__ */ import_react251.default.createElement(Box, { css: { mb: "$6" } }, /* @__PURE__ */ import_react251.default.createElement(Text, { css: { mb: "$4" } }, title), /* @__PURE__ */ import_react251.default.createElement(
        Flex,
        {
          align: "center",
          css: {
            gap: "$4",
            "@md": {
              flexDirection: children ? "column" : "row",
              alignItems: children ? "start" : "center"
            }
          }
        },
        /* @__PURE__ */ import_react251.default.createElement(Dropdown.Root, { open, onOpenChange: setOpen }, /* @__PURE__ */ import_react251.default.createElement(
          DialogDropdownTrigger,
          {
            ref,
            icon,
            title: devices.find(({ deviceId }) => deviceId === selection)?.label || "Select device from list",
            open
          }
        ), /* @__PURE__ */ import_react251.default.createElement(Dropdown.Portal, null, /* @__PURE__ */ import_react251.default.createElement(
          Dropdown.Content,
          {
            align: "start",
            sideOffset: 8,
            css: {
              w: (
                // @ts-ignore
                ref.current?.clientWidth
              ),
              zIndex: 1001
            }
          },
          devices.map((device) => {
            return /* @__PURE__ */ import_react251.default.createElement(
              Dropdown.Item,
              {
                key: device.label,
                onSelect: () => onChange(device.deviceId),
                css: {
                  px: "$9"
                }
              },
              device.label
            );
          })
        ))),
        children
      ));
    };
    DeviceSelector2.propTypes = {
      title: import_prop_types.default.string.isRequired,
      devices: import_prop_types.default.array.isRequired,
      selection: import_prop_types.default.string,
      onChange: import_prop_types.default.func.isRequired,
      icon: import_prop_types.default.node,
      children: import_prop_types.default.node
    };
  }
});

// src/Diagnostics/AudioTest.tsx
var import_react252, import_react_sdk134, import_react_icons113, SelectContainer, MicTest, SpeakerTest, AudioTest;
var init_AudioTest = __esm({
  "src/Diagnostics/AudioTest.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react252 = __toESM(require("react"));
    import_react_sdk134 = require("@100mslive/react-sdk");
    import_react_icons113 = require("@100mslive/react-icons");
    init_PermissionErrorModal();
    init_components();
    init_Button2();
    init_Layout();
    init_Progress();
    init_Text2();
    init_DeviceSelector();
    init_DiagnosticsContext();
    init_useAudioOutputTest();
    init_constants();
    SelectContainer = ({ children }) => /* @__PURE__ */ import_react252.default.createElement(Box, { css: { w: "calc(50% - 0.75rem)", "@lg": { w: "100%" } } }, children);
    MicTest = ({ setError }) => {
      const { hmsDiagnostics } = useDiagnostics();
      const devices = (0, import_react_sdk134.useHMSStore)(import_react_sdk134.selectDevices);
      const [isRecording, setIsRecording] = (0, import_react252.useState)(false);
      const [selectedMic, setSelectedMic] = (0, import_react252.useState)(devices.audioInput[0]?.deviceId || "default");
      const trackID = (0, import_react_sdk134.useHMSStore)(import_react_sdk134.selectLocalAudioTrackID);
      const audioLevel = (0, import_react_sdk134.useHMSStore)((0, import_react_sdk134.selectTrackAudioByID)(trackID));
      const { audioOutputDeviceId } = (0, import_react_sdk134.useHMSStore)(import_react_sdk134.selectLocalMediaSettings);
      const { playing, setPlaying, audioRef } = useAudioOutputTest({
        deviceId: audioOutputDeviceId || devices.audioOutput[0]?.deviceId
      });
      return /* @__PURE__ */ import_react252.default.createElement(SelectContainer, null, /* @__PURE__ */ import_react252.default.createElement(
        DeviceSelector2,
        {
          title: "Microphone (Input)",
          devices: devices.audioInput,
          selection: selectedMic,
          icon: /* @__PURE__ */ import_react252.default.createElement(import_react_icons113.MicOnIcon, null),
          onChange: (deviceId) => {
            setError(void 0);
            setSelectedMic(deviceId);
            hmsDiagnostics?.stopMicCheck();
          }
        }
      ), /* @__PURE__ */ import_react252.default.createElement(Flex, { css: { gap: "$6", alignItems: "center" } }, /* @__PURE__ */ import_react252.default.createElement(
        Button,
        {
          variant: "standard",
          icon: true,
          onClick: () => {
            isRecording ? hmsDiagnostics?.stopMicCheck() : hmsDiagnostics?.startMicCheck({
              inputDevice: selectedMic,
              onError: (err) => {
                setError(err);
              },
              onStop: () => {
                setIsRecording(false);
              }
            }).then(() => {
              setIsRecording(true);
            });
          },
          disabled: devices.audioInput.length === 0 || playing
        },
        isRecording ? /* @__PURE__ */ import_react252.default.createElement(import_react_icons113.StopIcon, null) : /* @__PURE__ */ import_react252.default.createElement(import_react_icons113.MicOnIcon, null),
        isRecording ? "Stop Recording" : "Record"
      ), /* @__PURE__ */ import_react252.default.createElement(
        Button,
        {
          icon: true,
          variant: "standard",
          outlined: hmsDiagnostics?.getRecordedAudio() === TEST_AUDIO_URL,
          onClick: () => {
            if (audioRef.current) {
              audioRef.current.src = hmsDiagnostics?.getRecordedAudio() || "";
              audioRef.current.play();
            }
          },
          disabled: playing || hmsDiagnostics?.getRecordedAudio() === TEST_AUDIO_URL
        },
        /* @__PURE__ */ import_react252.default.createElement(import_react_icons113.SpeakerIcon, null),
        playing ? "Playing..." : "Playback"
      ), /* @__PURE__ */ import_react252.default.createElement(
        "audio",
        {
          ref: audioRef,
          onEnded: () => setPlaying(false),
          onPlay: () => setPlaying(true),
          style: { display: "none" }
        }
      )), /* @__PURE__ */ import_react252.default.createElement(Flex, { align: "center", css: { mt: "$4", maxWidth: "10rem", opacity: isRecording ? "1" : "0", gap: "$4" } }, /* @__PURE__ */ import_react252.default.createElement(Text, null, /* @__PURE__ */ import_react252.default.createElement(import_react_icons113.MicOnIcon, null)), /* @__PURE__ */ import_react252.default.createElement(Progress.Root, { value: audioLevel, css: { h: "$2" } }, /* @__PURE__ */ import_react252.default.createElement(
        Progress.Content,
        {
          style: {
            transform: `translateX(-${100 - audioLevel}%)`,
            transition: "transform 0.3s"
          }
        }
      ))));
    };
    SpeakerTest = () => {
      const actions = (0, import_react_sdk134.useHMSActions)();
      const devices = (0, import_react_sdk134.useHMSStore)(import_react_sdk134.selectDevices);
      const { audioOutputDeviceId } = (0, import_react_sdk134.useHMSStore)(import_react_sdk134.selectLocalMediaSettings);
      if (devices.audioOutput.length === 0) {
        return /* @__PURE__ */ import_react252.default.createElement(import_react252.default.Fragment, null);
      }
      return /* @__PURE__ */ import_react252.default.createElement(SelectContainer, null, /* @__PURE__ */ import_react252.default.createElement(
        DeviceSelector2,
        {
          title: "Speaker (Output)",
          devices: devices.audioOutput,
          selection: audioOutputDeviceId || devices.audioOutput[0]?.deviceId,
          icon: /* @__PURE__ */ import_react252.default.createElement(import_react_icons113.SpeakerIcon, null),
          onChange: (deviceId) => {
            actions.setAudioOutputDevice(deviceId);
          }
        }
      ));
    };
    AudioTest = () => {
      const { hmsDiagnostics, updateStep } = useDiagnostics();
      const [error, setErrorAlone] = (0, import_react252.useState)();
      const setError = (0, import_react252.useCallback)(
        (err) => {
          updateStep(2 /* AUDIO */, { hasFailed: !!err });
          setErrorAlone(err);
        },
        [updateStep, setErrorAlone]
      );
      (0, import_react252.useEffect)(() => {
        hmsDiagnostics?.requestPermission({ audio: true }).catch((error2) => setError(error2));
      }, [hmsDiagnostics, setError]);
      return /* @__PURE__ */ import_react252.default.createElement(import_react252.default.Fragment, null, /* @__PURE__ */ import_react252.default.createElement(TestContainer, null, /* @__PURE__ */ import_react252.default.createElement(Text, { variant: "body2", css: { c: "$on_primary_medium" } }, "Record a 10 second audio clip and play it back to check that your microphone and speaker are working. If they aren't, make sure your volume is turned up, try a different speaker or microphone, or check your bluetooth settings."), /* @__PURE__ */ import_react252.default.createElement(
        Flex,
        {
          css: {
            mt: "$10",
            gap: "$10",
            "@lg": {
              flexDirection: "column",
              gap: "$8"
            }
          }
        },
        /* @__PURE__ */ import_react252.default.createElement(MicTest, { setError }),
        /* @__PURE__ */ import_react252.default.createElement(SpeakerTest, null)
      )), /* @__PURE__ */ import_react252.default.createElement(TestFooter, { error, ctaText: "Does your audio sound good?" }), /* @__PURE__ */ import_react252.default.createElement(PermissionErrorModal, { error }));
    };
  }
});

// src/Diagnostics/BrowserTest.tsx
var import_react253, import_react_sdk135, CMS_MEDIA_SERVER, operatingSystemIconInfo, browserTypeIconInfo, CheckDetails, BrowserTest;
var init_BrowserTest = __esm({
  "src/Diagnostics/BrowserTest.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react253 = __toESM(require("react"));
    import_react_sdk135 = require("@100mslive/react-sdk");
    init_components();
    init_Layout();
    init_Text2();
    init_DiagnosticsContext();
    CMS_MEDIA_SERVER = "https://storage.googleapis.com/100ms-cms-prod/";
    operatingSystemIconInfo = {
      tizen: {
        key: "tizen",
        val: "Tizen",
        icon: `${CMS_MEDIA_SERVER}cms/Tizen_b99350214e/Tizen_b99350214e.svg`
      },
      "mac os": {
        key: "macos",
        val: "Mac OS",
        icon: `${CMS_MEDIA_SERVER}cms/mac_OS_804456afd8/mac_OS_804456afd8.png`
      },
      windows: {
        key: "windows",
        val: "Windows",
        icon: `${CMS_MEDIA_SERVER}cms/Windows_fdfe6749b6/Windows_fdfe6749b6.svg`
      },
      linux: {
        key: "linux",
        val: "Linux",
        icon: `${CMS_MEDIA_SERVER}cms/Linux_31f8353a2e/Linux_31f8353a2e.svg`
      },
      chromium: {
        key: "chromium",
        val: "Chromium",
        icon: `${CMS_MEDIA_SERVER}cms/Chromium_3df17710bd/Chromium_3df17710bd.svg`
      },
      ubuntu: {
        key: "ubuntu",
        val: "Ubuntu",
        icon: `${CMS_MEDIA_SERVER}cms/Ubuntu_966dd923c5/Ubuntu_966dd923c5.svg`
      },
      ios: {
        key: "ios",
        val: "iOS",
        icon: `${CMS_MEDIA_SERVER}cms/i_OS_3cdc9d9b71/i_OS_3cdc9d9b71.svg`
      },
      android: {
        key: "android",
        val: "Android",
        icon: `${CMS_MEDIA_SERVER}cms/Android_49dcfdc934/Android_49dcfdc934.svg`
      }
    };
    browserTypeIconInfo = {
      brave: {
        key: "brave",
        val: "Brave",
        icon: `${CMS_MEDIA_SERVER}cms/Brave_7e66131f09/Brave_7e66131f09.svg`
      },
      chrome: {
        key: "chrome",
        val: "Chrome",
        icon: `${CMS_MEDIA_SERVER}cms/Chrome_7bf77fbdd7/Chrome_7bf77fbdd7.svg`
      },
      firefox: {
        key: "firefox",
        val: "Firefox",
        icon: `${CMS_MEDIA_SERVER}cms/Firefox_30f3976fb8/Firefox_30f3976fb8.svg`
      },
      safari: {
        key: "safari",
        val: "Safari",
        icon: `${CMS_MEDIA_SERVER}cms/Safari_254e74ed94/Safari_254e74ed94.svg`
      },
      "mobile safari": {
        key: "safari",
        val: "Safari",
        icon: `${CMS_MEDIA_SERVER}cms/Safari_254e74ed94/Safari_254e74ed94.svg`
      },
      edge: {
        key: "edge",
        val: "Edge",
        icon: `${CMS_MEDIA_SERVER}cms/Edge_23add4a83f/Edge_23add4a83f.svg`
      },
      opera: {
        key: "opera",
        val: "Opera",
        icon: `${CMS_MEDIA_SERVER}cms/Opera_0f3bf4eb19/Opera_0f3bf4eb19.svg`
      }
    };
    CheckDetails = ({ title, value, iconURL }) => /* @__PURE__ */ import_react253.default.createElement(Box, { css: { w: "100%", my: "$10", p: "$10", r: "$1", bg: "$surface_default", "@lg": { w: "auto" } } }, /* @__PURE__ */ import_react253.default.createElement(Text, { css: { c: "$on_primary_medium", mb: "$6" } }, title), /* @__PURE__ */ import_react253.default.createElement(Flex, { align: "center" }, iconURL && /* @__PURE__ */ import_react253.default.createElement(Box, { css: { size: "2rem", r: "$round", bg: "$surface_brighter", mr: "$4" } }, /* @__PURE__ */ import_react253.default.createElement("img", { style: { objectFit: "contain", width: "2rem" }, src: iconURL, alt: value })), /* @__PURE__ */ import_react253.default.createElement(Text, null, value)));
    BrowserTest = () => {
      const { hmsDiagnostics, updateStep } = useDiagnostics();
      const [error, setError] = (0, import_react253.useState)();
      (0, import_react253.useEffect)(() => {
        try {
          hmsDiagnostics?.checkBrowserSupport();
        } catch (err) {
          updateStep(0 /* BROWSER */, { hasFailed: true });
          setError(err);
        }
      }, [hmsDiagnostics, updateStep]);
      return /* @__PURE__ */ import_react253.default.createElement(import_react253.default.Fragment, null, /* @__PURE__ */ import_react253.default.createElement(TestContainer, { css: { display: "flex", gap: "$8", "@lg": { display: "block" } } }, /* @__PURE__ */ import_react253.default.createElement(
        CheckDetails,
        {
          title: "Browser",
          iconURL: import_react_sdk135.parsedUserAgent.getBrowser().name && browserTypeIconInfo[import_react_sdk135.parsedUserAgent.getBrowser().name?.toLowerCase()]?.icon,
          value: `${import_react_sdk135.parsedUserAgent.getBrowser().name} ${import_react_sdk135.parsedUserAgent.getBrowser().version}`
        }
      ), /* @__PURE__ */ import_react253.default.createElement(
        CheckDetails,
        {
          title: "Operating system",
          iconURL: import_react_sdk135.parsedUserAgent.getOS().name && operatingSystemIconInfo[import_react_sdk135.parsedUserAgent.getOS().name?.toLowerCase()]?.icon,
          value: `${import_react_sdk135.parsedUserAgent.getOS().name} ${import_react_sdk135.parsedUserAgent.getOS().version}`
        }
      )), /* @__PURE__ */ import_react253.default.createElement(TestFooter, { error, ctaText: "Is your device information correct?" }));
    };
  }
});

// src/Diagnostics/ConnectivityTest.tsx
var import_react254, import_react_sdk136, import_react_icons114, Regions, ConnectivityStateMessage, ConnectivityTestStepResult, DetailedInfo, MediaServerResult, SignallingResult, AudioStats, VideoStats, Footer3, ConnectivityTestReport, RegionSelector, ConnectivityTest, downloadJson;
var init_ConnectivityTest = __esm({
  "src/Diagnostics/ConnectivityTest.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react254 = __toESM(require("react"));
    import_react_sdk136 = require("@100mslive/react-sdk");
    import_react_icons114 = require("@100mslive/react-icons");
    init_components();
    init_Button2();
    init_Layout();
    init_Loading2();
    init_Stats2();
    init_Text2();
    init_DiagnosticsContext();
    Regions = {
      in: "India",
      eu: "Europe",
      us: "United States"
    };
    ConnectivityStateMessage = {
      [import_react_sdk136.ConnectivityState.STARTING]: "Fetching Init",
      [import_react_sdk136.ConnectivityState.INIT_FETCHED]: "Connecting to signal server",
      [import_react_sdk136.ConnectivityState.SIGNAL_CONNECTED]: "Establishing ICE connection",
      [import_react_sdk136.ConnectivityState.ICE_ESTABLISHED]: "Capturing Media",
      [import_react_sdk136.ConnectivityState.MEDIA_CAPTURED]: "Publishing Media",
      [import_react_sdk136.ConnectivityState.MEDIA_PUBLISHED]: "Finishing Up",
      [import_react_sdk136.ConnectivityState.COMPLETED]: "Completed"
    };
    ConnectivityTestStepResult = ({
      title,
      status = "Connected",
      success,
      children
    }) => {
      const [hideDetails, setHideDetails] = (0, import_react254.useState)(true);
      return /* @__PURE__ */ import_react254.default.createElement(Box, { css: { my: "$10", p: "$10", r: "$1", bg: "$surface_bright" } }, /* @__PURE__ */ import_react254.default.createElement(Text, { css: { c: "$on_primary_medium", mb: "$6" } }, title), success ? /* @__PURE__ */ import_react254.default.createElement(Flex, null, /* @__PURE__ */ import_react254.default.createElement(Text, { css: { c: "$alert_success" } }, /* @__PURE__ */ import_react254.default.createElement(import_react_icons114.CheckCircleIcon, { width: "1.5rem", height: "1.5rem" })), /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "lg", css: { ml: "$4" } }, status)) : /* @__PURE__ */ import_react254.default.createElement(Flex, null, /* @__PURE__ */ import_react254.default.createElement(Text, { css: { c: "$alert_error_bright" } }, /* @__PURE__ */ import_react254.default.createElement(import_react_icons114.CrossCircleIcon, { width: "1.5rem", height: "1.5rem" })), /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "lg", css: { ml: "$4" } }, "Failed")), /* @__PURE__ */ import_react254.default.createElement(
        Flex,
        {
          onClick: () => setHideDetails(!hideDetails),
          align: "center",
          gap: "2",
          css: {
            color: "$primary_bright"
          }
        },
        hideDetails ? /* @__PURE__ */ import_react254.default.createElement(import_react_icons114.EyeOpenIcon, null) : /* @__PURE__ */ import_react254.default.createElement(import_react_icons114.EyeCloseIcon, null),
        /* @__PURE__ */ import_react254.default.createElement(
          Text,
          {
            variant: "caption",
            css: {
              color: "$primary_bright"
            }
          },
          hideDetails ? "View" : "Hide",
          " detailed information"
        )
      ), !hideDetails ? /* @__PURE__ */ import_react254.default.createElement(Box, null, children) : null);
    };
    DetailedInfo = ({
      title,
      value,
      Icon: Icon4
    }) => {
      return /* @__PURE__ */ import_react254.default.createElement(Box, { css: { flex: "50%", mt: "$6" } }, /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "caption", css: { fontWeight: "$semiBold", c: "$on_primary_medium" } }, title), /* @__PURE__ */ import_react254.default.createElement(Flex, { css: { mt: "$xs", alignItems: "flex-start" } }, Icon4 && /* @__PURE__ */ import_react254.default.createElement(Text, { css: { mr: "$4" } }, /* @__PURE__ */ import_react254.default.createElement(Icon4, { width: "1rem", height: "1rem" })), /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "caption" }, value)));
    };
    MediaServerResult = ({ result }) => {
      return /* @__PURE__ */ import_react254.default.createElement(
        ConnectivityTestStepResult,
        {
          title: "Media server connection test",
          success: result?.isPublishICEConnected && result.isSubscribeICEConnected
        },
        /* @__PURE__ */ import_react254.default.createElement(Flex, { css: { flexWrap: "wrap" } }, /* @__PURE__ */ import_react254.default.createElement(
          DetailedInfo,
          {
            title: "Media Captured",
            value: result?.stats?.audio.bytesSent ? "Yes" : "No",
            Icon: result?.stats?.audio.bytesSent ? import_react_icons114.CheckCircleIcon : import_react_icons114.CrossCircleIcon
          }
        ), /* @__PURE__ */ import_react254.default.createElement(
          DetailedInfo,
          {
            title: "Media Published",
            value: result?.stats?.audio.bitrateSent ? "Yes" : "No",
            Icon: result?.stats?.audio.bytesSent ? import_react_icons114.CheckCircleIcon : import_react_icons114.CrossCircleIcon
          }
        ), result?.connectionQualityScore ? /* @__PURE__ */ import_react254.default.createElement(
          DetailedInfo,
          {
            title: "Connection Quality Score (CQS)",
            value: `${result.connectionQualityScore.toFixed(2)} (out of 5)`
          }
        ) : null)
      );
    };
    SignallingResult = ({ result }) => {
      return /* @__PURE__ */ import_react254.default.createElement(ConnectivityTestStepResult, { title: "Signalling server connection test", success: result?.isConnected }, /* @__PURE__ */ import_react254.default.createElement(Flex, { css: { flexWrap: "wrap" } }, /* @__PURE__ */ import_react254.default.createElement(
        DetailedInfo,
        {
          title: "Signalling Gateway",
          value: result?.isConnected ? "Reachable" : "Unreachable",
          Icon: result?.isConnected ? import_react_icons114.CheckCircleIcon : import_react_icons114.CrossCircleIcon
        }
      ), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Websocket URL", value: result?.websocketUrl || "N/A", Icon: import_react_icons114.LinkIcon })));
    };
    AudioStats = ({ stats }) => {
      return /* @__PURE__ */ import_react254.default.createElement(ConnectivityTestStepResult, { title: "Audio", status: "Received", success: !!stats?.bytesSent }, stats && /* @__PURE__ */ import_react254.default.createElement(Flex, { css: { flexWrap: "wrap" } }, /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bytes Sent", value: formatBytes(stats.bytesSent) }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bytes Received", value: formatBytes(stats.bytesReceived) }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Packets Received", value: stats.packetsReceived.toString() }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Packets Lost", value: stats.packetsLost.toString() }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bitrate Sent", value: formatBytes(stats.bitrateSent, "b/s") }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bitrate Received", value: formatBytes(stats.bitrateReceived, "b/s") }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Round Trip Time", value: `${stats.roundTripTime} ms` })));
    };
    VideoStats = ({ stats }) => {
      return /* @__PURE__ */ import_react254.default.createElement(ConnectivityTestStepResult, { title: "Video", status: "Received", success: !!stats?.bytesSent }, stats && /* @__PURE__ */ import_react254.default.createElement(Flex, { css: { flexWrap: "wrap" } }, /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bytes Sent", value: formatBytes(stats.bytesSent) }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bytes Received", value: formatBytes(stats.bytesReceived) }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Packets Received", value: stats.packetsReceived.toString() }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Packets Lost", value: stats.packetsLost.toString() }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bitrate Sent", value: formatBytes(stats.bitrateSent, "b/s") }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Bitrate Received", value: formatBytes(stats.bitrateReceived, "b/s") }), /* @__PURE__ */ import_react254.default.createElement(DetailedInfo, { title: "Round Trip Time", value: `${stats.roundTripTime} ms` })));
    };
    Footer3 = ({
      error,
      result,
      restart
    }) => {
      return /* @__PURE__ */ import_react254.default.createElement(TestFooter, { error }, /* @__PURE__ */ import_react254.default.createElement(Flex, { css: { gap: "$8", "@lg": { flexDirection: "column" } } }, /* @__PURE__ */ import_react254.default.createElement(Button, { variant: "standard", onClick: restart }, "Restart Test"), /* @__PURE__ */ import_react254.default.createElement(Button, { disabled: !result, onClick: () => result && downloadJson(result, "hms_diagnostics_results") }, "Download Test Report")));
    };
    ConnectivityTestReport = ({
      error,
      result,
      progress,
      startTest
    }) => {
      if (error) {
        return /* @__PURE__ */ import_react254.default.createElement(import_react254.default.Fragment, null, /* @__PURE__ */ import_react254.default.createElement(TestContainer, { css: { textAlign: "center" } }, /* @__PURE__ */ import_react254.default.createElement(Text, { css: { c: "$alert_error_default", mb: "$4" } }, /* @__PURE__ */ import_react254.default.createElement(import_react_icons114.CrossCircleIcon, null)), /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "h6" }, "Connectivity Test Failed"), /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "body2", css: { c: "$on_primary_medium" } }, error.message)), /* @__PURE__ */ import_react254.default.createElement(Footer3, { restart: startTest, error }));
      }
      if (result) {
        console.log(result);
        return /* @__PURE__ */ import_react254.default.createElement(import_react254.default.Fragment, null, /* @__PURE__ */ import_react254.default.createElement(TestContainer, null, /* @__PURE__ */ import_react254.default.createElement(Text, { css: { c: "$on_primary_medium" } }, "Connectivity test has been completed."), /* @__PURE__ */ import_react254.default.createElement(SignallingResult, { result: result?.signallingReport }), /* @__PURE__ */ import_react254.default.createElement(MediaServerResult, { result: result?.mediaServerReport }), /* @__PURE__ */ import_react254.default.createElement(AudioStats, { stats: result?.mediaServerReport?.stats?.audio }), /* @__PURE__ */ import_react254.default.createElement(VideoStats, { stats: result?.mediaServerReport?.stats?.video })), /* @__PURE__ */ import_react254.default.createElement(Footer3, { result, restart: startTest, error }));
      }
      if (progress !== void 0) {
        return /* @__PURE__ */ import_react254.default.createElement(TestContainer, { css: { textAlign: "center" } }, /* @__PURE__ */ import_react254.default.createElement(Text, { css: { c: "$primary_bright", display: "flex", justifyContent: "center" } }, /* @__PURE__ */ import_react254.default.createElement(Loading, { size: "3.5rem", color: "currentColor" })), /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "h6", css: { mt: "$8" } }, "Checking your connection..."), /* @__PURE__ */ import_react254.default.createElement(
          Text,
          {
            variant: "body2",
            css: { c: "$on_primary_medium", mt: "$4" }
          },
          `${ConnectivityStateMessage[progress]}...`
        ));
      }
      return null;
    };
    RegionSelector = ({
      region,
      setRegion,
      startTest
    }) => {
      return /* @__PURE__ */ import_react254.default.createElement(TestContainer, { css: { borderBottom: "1px solid $border_default" } }, /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "body1" }, "Select a region"), /* @__PURE__ */ import_react254.default.createElement(Text, { variant: "body2", css: { c: "$on_secondary_low" } }, "Select the closest region for best results"), /* @__PURE__ */ import_react254.default.createElement(
        Flex,
        {
          justify: "between",
          css: {
            mt: "$md",
            "@lg": {
              flexDirection: "column",
              gap: "$8"
            }
          }
        },
        /* @__PURE__ */ import_react254.default.createElement(
          Flex,
          {
            css: {
              gap: "$4",
              "@lg": {
                flexDirection: "column"
              }
            }
          },
          Object.entries(Regions).map(([key, value]) => /* @__PURE__ */ import_react254.default.createElement(
            Button,
            {
              key,
              outlined: region !== key,
              variant: region === key ? "primary" : "standard",
              css: region === key ? { bg: "$primary_dim" } : {},
              onClick: () => setRegion(key)
            },
            value
          ))
        ),
        /* @__PURE__ */ import_react254.default.createElement(Flex, { css: { "@lg": { flexDirection: "column" } } }, /* @__PURE__ */ import_react254.default.createElement(Button, { variant: "primary", onClick: startTest, disabled: !startTest }, startTest ? "Start Test" : "Testing..."))
      ));
    };
    ConnectivityTest = () => {
      const { hmsDiagnostics, updateStep } = useDiagnostics();
      const [region, setRegion] = (0, import_react254.useState)(Object.keys(Regions)[0]);
      const [error, setError] = (0, import_react254.useState)();
      const [progress, setProgress] = (0, import_react254.useState)();
      const [result, setResult] = (0, import_react254.useState)();
      const startTest = () => {
        updateStep(3 /* CONNECTIVITY */, { hasFailed: false, isCompleted: false });
        setError(void 0);
        setResult(void 0);
        hmsDiagnostics?.startConnectivityCheck(
          (state) => {
            setProgress(state);
          },
          (result2) => {
            updateStep(3 /* CONNECTIVITY */, { isCompleted: true });
            setResult(result2);
          },
          region
        ).catch((error2) => {
          updateStep(3 /* CONNECTIVITY */, { hasFailed: true });
          setError(error2);
        });
      };
      return /* @__PURE__ */ import_react254.default.createElement(import_react254.default.Fragment, null, /* @__PURE__ */ import_react254.default.createElement(
        RegionSelector,
        {
          region,
          setRegion,
          startTest: progress === void 0 || progress === import_react_sdk136.ConnectivityState.COMPLETED ? startTest : void 0
        }
      ), /* @__PURE__ */ import_react254.default.createElement(ConnectivityTestReport, { error, result, progress, startTest }));
    };
    downloadJson = (obj, fileName) => {
      const a = document.createElement("a");
      const file = new Blob([JSON.stringify(obj, null, 2)], {
        type: "application/json"
      });
      a.href = URL.createObjectURL(file);
      a.download = `${fileName}.json`;
      a.click();
    };
  }
});

// src/Diagnostics/VideoTest.tsx
var import_react255, import_react_sdk137, import_react_icons115, VideoTest;
var init_VideoTest = __esm({
  "src/Diagnostics/VideoTest.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react255 = __toESM(require("react"));
    import_react_sdk137 = require("@100mslive/react-sdk");
    import_react_icons115 = require("@100mslive/react-icons");
    init_PermissionErrorModal();
    init_components();
    init_Layout();
    init_Text2();
    init_Video2();
    init_VideoTile();
    init_DeviceSelector();
    init_DiagnosticsContext();
    VideoTest = () => {
      const { hmsDiagnostics, updateStep } = useDiagnostics();
      const allDevices = (0, import_react_sdk137.useHMSStore)(import_react_sdk137.selectDevices);
      const { videoInput } = allDevices;
      const trackID = (0, import_react_sdk137.useHMSStore)(import_react_sdk137.selectLocalVideoTrackID);
      const sdkSelectedDevices = (0, import_react_sdk137.useHMSStore)(import_react_sdk137.selectLocalMediaSettings);
      const [error, setError] = (0, import_react255.useState)();
      (0, import_react255.useEffect)(() => {
        hmsDiagnostics?.startCameraCheck().catch((err) => {
          updateStep(1 /* VIDEO */, { hasFailed: true });
          setError(err);
        });
      }, [hmsDiagnostics, updateStep]);
      return /* @__PURE__ */ import_react255.default.createElement(import_react255.default.Fragment, null, /* @__PURE__ */ import_react255.default.createElement(TestContainer, { css: { display: "flex", "@lg": { flexDirection: "column", alignItems: "center" } } }, trackID && /* @__PURE__ */ import_react255.default.createElement(
        StyledVideoTile.Container,
        {
          css: {
            width: "90%",
            aspectRatio: "16/9",
            mr: "$10",
            "@lg": { mr: 0, mb: "$10", aspectRatio: "1/1" }
          }
        },
        /* @__PURE__ */ import_react255.default.createElement(Video, { mirror: true, trackId: trackID })
      ), /* @__PURE__ */ import_react255.default.createElement(Flex, { direction: "column", css: { w: "100%" } }, /* @__PURE__ */ import_react255.default.createElement(Text, { variant: "body2", css: { c: "$on_primary_medium", mb: "$10" } }, "Move in front of your camera to make sure it's working. If you don't see your video, try changing the selected camera. If the camera isn't part of your computer, check your settings to make sure your system recognizes it."), /* @__PURE__ */ import_react255.default.createElement(
        DeviceSelector2,
        {
          title: "Video",
          devices: videoInput || [],
          icon: /* @__PURE__ */ import_react255.default.createElement(import_react_icons115.VideoOnIcon, null),
          selection: sdkSelectedDevices.videoInputDeviceId,
          onChange: async (deviceId) => {
            hmsDiagnostics?.stopCameraCheck();
            hmsDiagnostics?.startCameraCheck(deviceId);
          }
        }
      ))), /* @__PURE__ */ import_react255.default.createElement(TestFooter, { error, ctaText: "Does your video look good?" }), /* @__PURE__ */ import_react255.default.createElement(PermissionErrorModal, { error }));
    };
  }
});

// src/Diagnostics/Diagnostics.tsx
var import_react256, import_react_sdk138, import_react_icons116, DiagnosticsStepIcon, Container5, DiagnosticsStepTest, DiagnosticsStepHeader, DiagnosticsStepContainer, DiagnosticsStepsList, DiagnosticsProvider, Diagnostics;
var init_Diagnostics = __esm({
  "src/Diagnostics/Diagnostics.tsx"() {
    "use strict";
    init_cjs_shims();
    import_react256 = __toESM(require("react"));
    import_react_sdk138 = require("@100mslive/react-sdk");
    import_react_icons116 = require("@100mslive/react-icons");
    init_Layout();
    init_Text2();
    init_Theme();
    init_AudioTest();
    init_BrowserTest();
    init_ConnectivityTest();
    init_DiagnosticsContext();
    init_VideoTest();
    DiagnosticsStepIcon = {
      [1 /* VIDEO */]: /* @__PURE__ */ import_react256.default.createElement(import_react_icons116.VideoOnIcon, { width: "2rem", height: "2rem" }),
      [2 /* AUDIO */]: /* @__PURE__ */ import_react256.default.createElement(import_react_icons116.MicOnIcon, { width: "2rem", height: "2rem" }),
      [0 /* BROWSER */]: /* @__PURE__ */ import_react256.default.createElement(import_react_icons116.GlobeIcon, { width: "2rem", height: "2rem" }),
      [3 /* CONNECTIVITY */]: /* @__PURE__ */ import_react256.default.createElement(import_react_icons116.ConnectivityIcon, { width: "2rem", height: "2rem" })
    };
    Container5 = ({ children }) => /* @__PURE__ */ import_react256.default.createElement(
      Box,
      {
        css: {
          px: "120px",
          pt: "120px",
          pb: "24px",
          bg: "$background_dim",
          lineHeight: "1.5",
          "-webkit-text-size-adjust": "100%",
          position: "relative",
          h: "100%",
          "@lg": {
            p: "$12"
          },
          overflowY: "auto",
          boxSizing: "border-box",
          "& *": {
            boxSizing: "border-box"
          },
          "::-webkit-scrollbar-track": {
            WebkitBoxShadow: "inset 0 0 6px rgba(0, 0, 0, 0.3)",
            boxShadow: "inset 0 0 6px rgba(0, 0, 0, 0.3)",
            backgroundColor: "transparent"
          },
          "::-webkit-scrollbar": {
            width: "6px",
            height: "6px",
            backgroundColor: "transparent"
          },
          "::-webkit-scrollbar-thumb": {
            backgroundColor: "#657080",
            borderRadius: "5px"
          }
        }
      },
      children
    );
    DiagnosticsStepTest = () => {
      const { activeStepIndex } = useDiagnostics();
      let TestComponent = () => /* @__PURE__ */ import_react256.default.createElement(import_react256.default.Fragment, null);
      if (activeStepIndex === 2 /* AUDIO */) {
        TestComponent = AudioTest;
      } else if (activeStepIndex === 1 /* VIDEO */) {
        TestComponent = VideoTest;
      } else if (activeStepIndex === 0 /* BROWSER */) {
        TestComponent = BrowserTest;
      } else if (activeStepIndex === 3 /* CONNECTIVITY */) {
        TestComponent = ConnectivityTest;
      }
      return /* @__PURE__ */ import_react256.default.createElement(TestComponent, { key: activeStepIndex });
    };
    DiagnosticsStepHeader = () => {
      const { activeStepIndex, activeStep } = useDiagnostics();
      return /* @__PURE__ */ import_react256.default.createElement(Flex, { css: { py: "$8", px: "$10", alignItems: "center", borderBottom: "1px solid $border_default" } }, /* @__PURE__ */ import_react256.default.createElement(Text, { css: { c: "$primary_bright", mt: "$xs" } }, DiagnosticsStepIcon[activeStepIndex]), /* @__PURE__ */ import_react256.default.createElement(Text, { css: { fontSize: "$h6", ml: "$9" } }, activeStep.name));
    };
    DiagnosticsStepContainer = () => {
      return /* @__PURE__ */ import_react256.default.createElement(Box, { css: { border: "1px solid $border_default", r: "$1", w: "75%", maxWidth: "65rem", "@lg": { w: "100%" } } }, /* @__PURE__ */ import_react256.default.createElement(DiagnosticsStepHeader, null), /* @__PURE__ */ import_react256.default.createElement(DiagnosticsStepTest, null));
    };
    DiagnosticsStepsList = () => {
      const { activeStepIndex, activeStep, steps } = useDiagnostics();
      return /* @__PURE__ */ import_react256.default.createElement(Box, { css: { w: "25%", "@lg": { display: "none" } } }, Object.keys(DiagnosticsStep).filter((key) => !isNaN(Number(key))).map((key) => {
        const keyIndex = Number(key);
        const step = steps[keyIndex];
        const isStepCompleted = activeStepIndex > keyIndex || activeStep.isCompleted;
        let color = "$on_primary_low";
        let icon = /* @__PURE__ */ import_react256.default.createElement(Text, { css: { c: color, fontSize: "1.75rem" } }, "\u2022");
        if (activeStepIndex === keyIndex) {
          color = "$on_primary_high";
          icon = /* @__PURE__ */ import_react256.default.createElement(Text, { css: { c: color, fontSize: "1.75rem" } }, "\u2022");
        }
        if (isStepCompleted) {
          color = "$primary_bright";
          icon = /* @__PURE__ */ import_react256.default.createElement(import_react_icons116.CheckCircleIcon, { width: "1rem", height: "1rem" });
        }
        if (step.hasFailed) {
          color = "$alert_error_default";
          icon = /* @__PURE__ */ import_react256.default.createElement(import_react_icons116.CrossCircleIcon, { width: "1rem", height: "1rem" });
        }
        return /* @__PURE__ */ import_react256.default.createElement(Flex, { key, css: { mb: "$10", c: color, gap: "$4", alignItems: "center" } }, icon, /* @__PURE__ */ import_react256.default.createElement(Text, { css: { c: color } }, step.name));
      }));
    };
    DiagnosticsProvider = () => {
      const actions = (0, import_react_sdk138.useHMSActions)();
      const [activeStep, setActiveStep] = (0, import_react256.useState)(0);
      const [steps, setSteps] = (0, import_react256.useState)(initialSteps);
      const diagnosticsRef = (0, import_react256.useRef)(actions.initDiagnostics());
      const updateStep = (0, import_react256.useCallback)((step, value) => {
        setSteps((prevSteps) => ({ ...prevSteps, [step]: { ...prevSteps[step], ...value } }));
      }, []);
      return /* @__PURE__ */ import_react256.default.createElement(
        DiagnosticsContext.Provider,
        {
          value: {
            hmsDiagnostics: diagnosticsRef.current,
            activeStepIndex: activeStep,
            setActiveStep,
            steps,
            updateStep
          }
        },
        /* @__PURE__ */ import_react256.default.createElement(Container5, null, /* @__PURE__ */ import_react256.default.createElement(Text, { variant: "h4" }, "Pre-call Test"), /* @__PURE__ */ import_react256.default.createElement(Text, { variant: "md", css: { c: "$on_primary_medium" } }, "Make sure your devices and network are good to go, let's get started."), /* @__PURE__ */ import_react256.default.createElement(Flex, { css: { direction: "column", mt: "$12", justifyItems: "center" } }, /* @__PURE__ */ import_react256.default.createElement(DiagnosticsStepsList, null), /* @__PURE__ */ import_react256.default.createElement(DiagnosticsStepContainer, null)))
      );
    };
    Diagnostics = () => {
      return /* @__PURE__ */ import_react256.default.createElement(import_react_sdk138.HMSRoomProvider, null, /* @__PURE__ */ import_react256.default.createElement(HMSThemeProvider, { themeType: "default" }, /* @__PURE__ */ import_react256.default.createElement(DiagnosticsProvider, null)));
    };
  }
});

// src/Diagnostics/index.ts
var init_Diagnostics2 = __esm({
  "src/Diagnostics/index.ts"() {
    "use strict";
    init_cjs_shims();
    init_Diagnostics();
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Accordion: () => Accordion,
  AudioLevel: () => AudioLevel,
  Avatar: () => Avatar,
  Box: () => Box,
  Button: () => Button,
  Checkbox: () => Checkbox,
  Collapsible: () => Collapsible,
  Diagnostics: () => Diagnostics,
  Dialog: () => Dialog,
  DialogContainerContext: () => DialogContainerContext,
  DialogContainerProvider: () => DialogContainerProvider,
  Dropdown: () => Dropdown,
  Fieldset: () => Fieldset,
  Flex: () => Flex,
  Footer: () => Footer,
  HMSPrebuilt: () => HMSPrebuilt,
  HMSSelect: () => ReactSelect_exports,
  HMSThemeProvider: () => HMSThemeProvider,
  HorizontalDivider: () => HorizontalDivider,
  IconButton: () => IconButton,
  Input: () => Input,
  Label: () => Label3,
  Link: () => Link,
  Loading: () => Loading,
  PasswordInput: () => PasswordInput,
  Popover: () => Popover2,
  Progress: () => Progress,
  QRCode: () => QRCode,
  RadioGroup: () => RadioGroup,
  Select: () => Select,
  Slider: () => Slider,
  StyledAvatar: () => StyledAvatar,
  StyledMenuTile: () => StyledMenuTile,
  StyledPagination: () => StyledPagination,
  StyledVideo: () => StyledVideo,
  StyledVideoList: () => StyledVideoList,
  StyledVideoTile: () => StyledVideoTile,
  Switch: () => Switch,
  Tabs: () => Tabs,
  Text: () => Text,
  TextArea: () => TextArea,
  ThemeContext: () => ThemeContext,
  ThemeTypes: () => ThemeTypes,
  Toast: () => Toast,
  Tooltip: () => Tooltip,
  VerticalDivider: () => VerticalDivider,
  Video: () => Video,
  VideoTileStats: () => VideoTileStats,
  config: () => config,
  createTheme: () => createTheme,
  createThemeBase: () => createThemeBase,
  css: () => css,
  flexCenter: () => flexCenter,
  formatBytes: () => formatBytes,
  getCssText: () => getCssText,
  getLeft: () => getLeft,
  globalCss: () => globalCss,
  globalStyles: () => globalStyles,
  keyframes: () => keyframes,
  slideLeftAndFade: () => slideLeftAndFade,
  styled: () => styled,
  textEllipsis: () => textEllipsis,
  theme: () => theme,
  useBorderAudioLevel: () => useBorderAudioLevel,
  useTheme: () => useTheme
});
module.exports = __toCommonJS(src_exports);
var init_src = __esm({
  "src/index.ts"() {
    init_cjs_shims();
    init_Button2();
    init_Text2();
    init_IconButton2();
    init_Layout();
    init_Avatar2();
    init_Divider2();
    init_Switch2();
    init_Tooltip2();
    init_Select2();
    init_Slider2();
    init_Modal();
    init_Loading2();
    init_Input2();
    init_VideoTile();
    init_VideoList();
    init_Pagination();
    init_Dropdown2();
    init_utils();
    init_Video2();
    init_TileMenu();
    init_AudioLevel2();
    init_Popover();
    init_Stats2();
    init_Theme();
    init_Checkbox2();
    init_Label2();
    init_RadioGroup2();
    init_Toast2();
    init_Accordion2();
    init_Fieldset2();
    init_Footer2();
    init_ReactSelect2();
    init_Tabs2();
    init_QRCode2();
    init_Link2();
    init_Collapsible2();
    init_Prebuilt();
    init_Progress();
    init_DialogContext();
    init_TextArea2();
    init_Diagnostics2();
  }
});
init_src();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Accordion,
  AudioLevel,
  Avatar,
  Box,
  Button,
  Checkbox,
  Collapsible,
  Diagnostics,
  Dialog,
  DialogContainerContext,
  DialogContainerProvider,
  Dropdown,
  Fieldset,
  Flex,
  Footer,
  HMSPrebuilt,
  HMSSelect,
  HMSThemeProvider,
  HorizontalDivider,
  IconButton,
  Input,
  Label,
  Link,
  Loading,
  PasswordInput,
  Popover,
  Progress,
  QRCode,
  RadioGroup,
  Select,
  Slider,
  StyledAvatar,
  StyledMenuTile,
  StyledPagination,
  StyledVideo,
  StyledVideoList,
  StyledVideoTile,
  Switch,
  Tabs,
  Text,
  TextArea,
  ThemeContext,
  ThemeTypes,
  Toast,
  Tooltip,
  VerticalDivider,
  Video,
  VideoTileStats,
  config,
  createTheme,
  createThemeBase,
  css,
  flexCenter,
  formatBytes,
  getCssText,
  getLeft,
  globalCss,
  globalStyles,
  keyframes,
  slideLeftAndFade,
  styled,
  textEllipsis,
  theme,
  useBorderAudioLevel,
  useTheme
});
